{"ast":null,"code":"import { createVNode as _createVNode } from \"vue\"; // Styles\n\nimport \"./VIcon.css\"; // Composables\n\nimport { IconValue, useIcon } from \"../../composables/icons.mjs\";\nimport { makeSizeProps, useSize } from \"../../composables/size.mjs\";\nimport { makeTagProps } from \"../../composables/tag.mjs\";\nimport { makeThemeProps, provideTheme } from \"../../composables/theme.mjs\";\nimport { useTextColor } from \"../../composables/color.mjs\"; // Utilities\n\nimport { computed, Text, toRef } from 'vue';\nimport { convertToUnit, genericComponent, propsFactory, useRender } from \"../../util/index.mjs\"; // Types\n\nexport const makeVIconProps = propsFactory({\n  color: String,\n  start: Boolean,\n  end: Boolean,\n  icon: IconValue,\n  ...makeSizeProps(),\n  ...makeTagProps({\n    tag: 'i'\n  }),\n  ...makeThemeProps()\n}, 'v-icon');\nexport const VIcon = genericComponent()({\n  name: 'VIcon',\n  props: makeVIconProps(),\n\n  setup(props, _ref) {\n    let {\n      attrs,\n      slots\n    } = _ref;\n    let slotIcon;\n\n    if (slots.default) {\n      slotIcon = computed(() => {\n        const slot = slots.default?.();\n        if (!slot) return;\n        return slot.filter(node => node.type === Text && node.children && typeof node.children === 'string')[0]?.children;\n      });\n    }\n\n    const {\n      themeClasses\n    } = provideTheme(props);\n    const {\n      iconData\n    } = useIcon(slotIcon || props);\n    const {\n      sizeClasses\n    } = useSize(props);\n    const {\n      textColorClasses,\n      textColorStyles\n    } = useTextColor(toRef(props, 'color'));\n    useRender(() => _createVNode(iconData.value.component, {\n      \"tag\": props.tag,\n      \"icon\": iconData.value.icon,\n      \"class\": ['v-icon', 'notranslate', themeClasses.value, sizeClasses.value, textColorClasses.value, {\n        'v-icon--clickable': !!attrs.onClick,\n        'v-icon--start': props.start,\n        'v-icon--end': props.end\n      }],\n      \"style\": [!sizeClasses.value ? {\n        fontSize: convertToUnit(props.size),\n        height: convertToUnit(props.size),\n        width: convertToUnit(props.size)\n      } : undefined, textColorStyles.value],\n      \"role\": attrs.onClick ? 'button' : undefined,\n      \"aria-hidden\": !attrs.onClick\n    }, {\n      default: () => [slots.default?.()]\n    }));\n    return {};\n  }\n\n});","map":{"version":3,"mappings":"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","names":["IconValue","useIcon","makeSizeProps","useSize","makeTagProps","makeThemeProps","provideTheme","useTextColor","computed","Text","toRef","convertToUnit","genericComponent","propsFactory","useRender","makeVIconProps","color","String","start","Boolean","end","icon","tag","VIcon","name","props","setup","_ref","attrs","slots","slotIcon","default","slot","filter","node","type","children","themeClasses","iconData","sizeClasses","textColorClasses","textColorStyles","value","onClick","fontSize","size","height","width","undefined"],"sources":["../../../src/components/VIcon/VIcon.tsx"],"sourcesContent":["// Styles\nimport './VIcon.sass'\n\n// Composables\nimport { IconValue, useIcon } from '@/composables/icons'\nimport { makeSizeProps, useSize } from '@/composables/size'\nimport { makeTagProps } from '@/composables/tag'\nimport { makeThemeProps, provideTheme } from '@/composables/theme'\nimport { useTextColor } from '@/composables/color'\n\n// Utilities\nimport { computed, Text, toRef } from 'vue'\nimport { convertToUnit, genericComponent, propsFactory, useRender } from '@/util'\n\n// Types\nimport type { ComputedRef } from 'vue'\n\nexport const makeVIconProps = propsFactory({\n  color: String,\n  start: Boolean,\n  end: Boolean,\n  icon: IconValue,\n\n  ...makeSizeProps(),\n  ...makeTagProps({ tag: 'i' }),\n  ...makeThemeProps(),\n}, 'v-icon')\n\nexport const VIcon = genericComponent()({\n  name: 'VIcon',\n\n  props: makeVIconProps(),\n\n  setup (props, { attrs, slots }) {\n    let slotIcon: ComputedRef<string | undefined> | undefined\n    if (slots.default) {\n      slotIcon = computed(() => {\n        const slot = slots.default?.()\n        if (!slot) return\n\n        return slot.filter(node =>\n          node.type === Text && node.children && typeof node.children === 'string'\n        )[0]?.children as string\n      })\n    }\n\n    const { themeClasses } = provideTheme(props)\n    const { iconData } = useIcon(slotIcon || props)\n    const { sizeClasses } = useSize(props)\n    const { textColorClasses, textColorStyles } = useTextColor(toRef(props, 'color'))\n\n    useRender(() => (\n      <iconData.value.component\n        tag={ props.tag }\n        icon={ iconData.value.icon }\n        class={[\n          'v-icon',\n          'notranslate',\n          themeClasses.value,\n          sizeClasses.value,\n          textColorClasses.value,\n          {\n            'v-icon--clickable': !!attrs.onClick,\n            'v-icon--start': props.start,\n            'v-icon--end': props.end,\n          },\n        ]}\n        style={[\n          !sizeClasses.value ? ({\n            fontSize: convertToUnit(props.size),\n            height: convertToUnit(props.size),\n            width: convertToUnit(props.size),\n          }) : undefined,\n          textColorStyles.value,\n        ]}\n        role={ attrs.onClick ? 'button' : undefined }\n        aria-hidden={ !attrs.onClick }\n      >\n        { slots.default?.() }\n      </iconData.value.component>\n    ))\n\n    return {}\n  },\n})\n\nexport type VIcon = InstanceType<typeof VIcon>\n"]},"metadata":{},"sourceType":"module"}