{"ast":null,"code":"import { mergeProps as _mergeProps, createVNode as _createVNode } from \"vue\"; // Styles\n\nimport \"./VTab.css\"; // Components\n\nimport { VBtn } from \"../VBtn/index.mjs\"; // Composables\n\nimport { useTextColor } from \"../../composables/color.mjs\"; // Utilities\n\nimport { computed, ref } from 'vue';\nimport { animate, genericComponent, omit, standardEasing, useRender } from \"../../util/index.mjs\";\nimport { makeVBtnProps } from \"../VBtn/VBtn.mjs\"; // Types\n\nimport { VTabsSymbol } from \"./shared.mjs\";\nexport const VTab = genericComponent()({\n  name: 'VTab',\n  props: {\n    fixed: Boolean,\n    title: String,\n    sliderColor: String,\n    hideSlider: Boolean,\n    direction: {\n      type: String,\n      default: 'horizontal'\n    },\n    ...omit(makeVBtnProps({\n      selectedClass: 'v-tab--selected',\n      variant: 'text'\n    }), ['active', 'block', 'flat', 'location', 'position', 'symbol'])\n  },\n\n  setup(props, _ref) {\n    let {\n      slots,\n      attrs\n    } = _ref;\n    const {\n      textColorClasses: sliderColorClasses,\n      textColorStyles: sliderColorStyles\n    } = useTextColor(props, 'sliderColor');\n    const isHorizontal = computed(() => props.direction === 'horizontal');\n    const isSelected = ref(false);\n    const rootEl = ref();\n    const sliderEl = ref();\n\n    function updateSlider(_ref2) {\n      let {\n        value\n      } = _ref2;\n      isSelected.value = value;\n\n      if (value) {\n        const prevEl = rootEl.value?.$el.parentElement?.querySelector('.v-tab--selected .v-tab__slider');\n        const nextEl = sliderEl.value;\n        if (!prevEl || !nextEl) return;\n        const color = getComputedStyle(prevEl).color;\n        const prevBox = prevEl.getBoundingClientRect();\n        const nextBox = nextEl.getBoundingClientRect();\n        const xy = isHorizontal.value ? 'x' : 'y';\n        const XY = isHorizontal.value ? 'X' : 'Y';\n        const rightBottom = isHorizontal.value ? 'right' : 'bottom';\n        const widthHeight = isHorizontal.value ? 'width' : 'height';\n        const prevPos = prevBox[xy];\n        const nextPos = nextBox[xy];\n        const delta = prevPos > nextPos ? prevBox[rightBottom] - nextBox[rightBottom] : prevBox[xy] - nextBox[xy];\n        const origin = Math.sign(delta) > 0 ? isHorizontal.value ? 'right' : 'bottom' : Math.sign(delta) < 0 ? isHorizontal.value ? 'left' : 'top' : 'center';\n        const size = Math.abs(delta) + (Math.sign(delta) < 0 ? prevBox[widthHeight] : nextBox[widthHeight]);\n        const scale = size / Math.max(prevBox[widthHeight], nextBox[widthHeight]);\n        const initialScale = prevBox[widthHeight] / nextBox[widthHeight];\n        const sigma = 1.5;\n        animate(nextEl, {\n          backgroundColor: [color, ''],\n          transform: [`translate${XY}(${delta}px) scale${XY}(${initialScale})`, `translate${XY}(${delta / sigma}px) scale${XY}(${(scale - 1) / sigma + 1})`, ''],\n          transformOrigin: Array(3).fill(origin)\n        }, {\n          duration: 225,\n          easing: standardEasing\n        });\n      }\n    }\n\n    useRender(() => {\n      const [btnProps] = VBtn.filterProps(props);\n      return _createVNode(VBtn, _mergeProps({\n        \"_as\": \"VTab\",\n        \"symbol\": VTabsSymbol,\n        \"ref\": rootEl,\n        \"class\": ['v-tab'],\n        \"tabindex\": isSelected.value ? 0 : -1,\n        \"role\": \"tab\",\n        \"aria-selected\": String(isSelected.value),\n        \"active\": false,\n        \"block\": props.fixed,\n        \"maxWidth\": props.fixed ? 300 : undefined,\n        \"rounded\": 0\n      }, btnProps, attrs, {\n        \"onGroup:selected\": updateSlider\n      }), {\n        default: () => [slots.default ? slots.default() : props.title, !props.hideSlider && _createVNode(\"div\", {\n          \"ref\": sliderEl,\n          \"class\": ['v-tab__slider', sliderColorClasses.value],\n          \"style\": sliderColorStyles.value\n        }, null)]\n      });\n    });\n    return {};\n  }\n\n});","map":{"version":3,"mappings":"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","names":["VBtn","useTextColor","computed","ref","animate","genericComponent","omit","standardEasing","useRender","makeVBtnProps","VTabsSymbol","VTab","name","props","fixed","Boolean","title","String","sliderColor","hideSlider","direction","type","default","selectedClass","variant","setup","_ref","slots","attrs","textColorClasses","sliderColorClasses","textColorStyles","sliderColorStyles","isHorizontal","isSelected","rootEl","sliderEl","updateSlider","_ref2","value","prevEl","$el","parentElement","querySelector","nextEl","color","getComputedStyle","prevBox","getBoundingClientRect","nextBox","xy","XY","rightBottom","widthHeight","prevPos","nextPos","delta","origin","Math","sign","size","abs","scale","max","initialScale","sigma","backgroundColor","transform","transformOrigin","Array","fill","duration","easing","btnProps","filterProps","undefined","_createVNode"],"sources":["../../../src/components/VTabs/VTab.tsx"],"sourcesContent":["// Styles\nimport './VTab.sass'\n\n// Components\nimport { VBtn } from '@/components/VBtn'\n\n// Composables\nimport { useTextColor } from '@/composables/color'\n\n// Utilities\nimport { computed, ref } from 'vue'\nimport { animate, genericComponent, omit, standardEasing, useRender } from '@/util'\nimport { makeVBtnProps } from '@/components/VBtn/VBtn'\n\n// Types\nimport type { PropType } from 'vue'\nimport { VTabsSymbol } from './shared'\n\nexport const VTab = genericComponent()({\n  name: 'VTab',\n\n  props: {\n    fixed: Boolean,\n    title: String,\n\n    sliderColor: String,\n    hideSlider: Boolean,\n\n    direction: {\n      type: String as PropType<'horizontal' | 'vertical'>,\n      default: 'horizontal',\n    },\n\n    ...omit(makeVBtnProps({\n      selectedClass: 'v-tab--selected',\n      variant: 'text' as const,\n    }), [\n      'active',\n      'block',\n      'flat',\n      'location',\n      'position',\n      'symbol',\n    ]),\n  },\n\n  setup (props, { slots, attrs }) {\n    const { textColorClasses: sliderColorClasses, textColorStyles: sliderColorStyles } = useTextColor(props, 'sliderColor')\n    const isHorizontal = computed(() => props.direction === 'horizontal')\n    const isSelected = ref(false)\n\n    const rootEl = ref<VBtn>()\n    const sliderEl = ref<HTMLElement>()\n\n    function updateSlider ({ value }: { value: boolean }) {\n      isSelected.value = value\n\n      if (value) {\n        const prevEl: HTMLElement | undefined = rootEl.value?.$el.parentElement?.querySelector('.v-tab--selected .v-tab__slider')\n        const nextEl = sliderEl.value\n\n        if (!prevEl || !nextEl) return\n\n        const color = getComputedStyle(prevEl).color\n\n        const prevBox = prevEl.getBoundingClientRect()\n        const nextBox = nextEl.getBoundingClientRect()\n\n        const xy = isHorizontal.value ? 'x' : 'y'\n        const XY = isHorizontal.value ? 'X' : 'Y'\n        const rightBottom = isHorizontal.value ? 'right' : 'bottom'\n        const widthHeight = isHorizontal.value ? 'width' : 'height'\n\n        const prevPos = prevBox[xy]\n        const nextPos = nextBox[xy]\n        const delta = prevPos > nextPos\n          ? prevBox[rightBottom] - nextBox[rightBottom]\n          : prevBox[xy] - nextBox[xy]\n        const origin =\n          Math.sign(delta) > 0 ? (isHorizontal.value ? 'right' : 'bottom')\n          : Math.sign(delta) < 0 ? (isHorizontal.value ? 'left' : 'top')\n          : 'center'\n        const size = Math.abs(delta) + (Math.sign(delta) < 0 ? prevBox[widthHeight] : nextBox[widthHeight])\n        const scale = size / Math.max(prevBox[widthHeight], nextBox[widthHeight])\n        const initialScale = prevBox[widthHeight] / nextBox[widthHeight]\n\n        const sigma = 1.5\n        animate(nextEl, {\n          backgroundColor: [color, ''],\n          transform: [\n            `translate${XY}(${delta}px) scale${XY}(${initialScale})`,\n            `translate${XY}(${delta / sigma}px) scale${XY}(${(scale - 1) / sigma + 1})`,\n            '',\n          ],\n          transformOrigin: Array(3).fill(origin),\n        }, {\n          duration: 225,\n          easing: standardEasing,\n        })\n      }\n    }\n\n    useRender(() => {\n      const [btnProps] = VBtn.filterProps(props)\n\n      return (\n        <VBtn\n          _as=\"VTab\"\n          symbol={ VTabsSymbol }\n          ref={ rootEl }\n          class={[\n            'v-tab',\n          ]}\n          tabindex={ isSelected.value ? 0 : -1 }\n          role=\"tab\"\n          aria-selected={ String(isSelected.value) }\n          active={ false }\n          block={ props.fixed }\n          maxWidth={ props.fixed ? 300 : undefined }\n          rounded={ 0 }\n          { ...btnProps }\n          { ...attrs }\n          onGroup:selected={ updateSlider }\n        >\n          { slots.default ? slots.default() : props.title }\n          { !props.hideSlider && (\n            <div\n              ref={ sliderEl }\n              class={[\n                'v-tab__slider',\n                sliderColorClasses.value,\n              ]}\n              style={ sliderColorStyles.value }\n            />\n          )}\n        </VBtn>\n      )\n    })\n\n    return {}\n  },\n})\n\nexport type VTab = InstanceType<typeof VTab>\n"]},"metadata":{},"sourceType":"module"}