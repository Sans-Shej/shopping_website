{"ast":null,"code":"import { mergeProps as _mergeProps, createVNode as _createVNode, Fragment as _Fragment } from \"vue\"; // Styles\n\nimport \"../VSlider/VSlider.css\"; // Components\n\nimport { makeVInputProps, VInput } from \"../VInput/VInput.mjs\";\nimport { getOffset, makeSliderProps, useSlider } from \"../VSlider/slider.mjs\";\nimport { VLabel } from \"../VLabel/index.mjs\";\nimport { VSliderThumb } from \"../VSlider/VSliderThumb.mjs\";\nimport { VSliderTrack } from \"../VSlider/VSliderTrack.mjs\"; // Composables\n\nimport { makeFocusProps, useFocus } from \"../../composables/focus.mjs\";\nimport { useProxiedModel } from \"../../composables/proxiedModel.mjs\"; // Utilities\n\nimport { computed, ref } from 'vue';\nimport { genericComponent, useRender } from \"../../util/index.mjs\"; // Types\n\nexport const VRangeSlider = genericComponent()({\n  name: 'VRangeSlider',\n  props: { ...makeFocusProps(),\n    ...makeVInputProps(),\n    ...makeSliderProps(),\n    strict: Boolean,\n    modelValue: {\n      type: Array,\n      default: () => [0, 0]\n    }\n  },\n  emits: {\n    'update:focused': value => true,\n    'update:modelValue': value => true\n  },\n\n  setup(props, _ref) {\n    let {\n      slots\n    } = _ref;\n    const startThumbRef = ref();\n    const stopThumbRef = ref();\n    const inputRef = ref();\n\n    function getActiveThumb(e) {\n      if (!startThumbRef.value || !stopThumbRef.value) return;\n      const startOffset = getOffset(e, startThumbRef.value.$el, props.direction);\n      const stopOffset = getOffset(e, stopThumbRef.value.$el, props.direction);\n      const a = Math.abs(startOffset);\n      const b = Math.abs(stopOffset);\n      return a < b || a === b && startOffset < 0 ? startThumbRef.value.$el : stopThumbRef.value.$el;\n    }\n\n    const {\n      activeThumbRef,\n      hasLabels,\n      max,\n      min,\n      mousePressed,\n      onSliderMousedown,\n      onSliderTouchstart,\n      position,\n      roundValue,\n      trackContainerRef\n    } = useSlider({\n      /* eslint-disable @typescript-eslint/no-use-before-define */\n      props,\n      handleSliderMouseUp: newValue => {\n        model.value = activeThumbRef.value === startThumbRef.value?.$el ? [newValue, model.value[1]] : [model.value[0], newValue];\n      },\n      handleMouseMove: newValue => {\n        const [start, stop] = model.value;\n\n        if (!props.strict && start === stop && start !== min.value) {\n          activeThumbRef.value = newValue > start ? stopThumbRef.value?.$el : startThumbRef.value?.$el;\n          activeThumbRef.value?.focus();\n        }\n\n        if (activeThumbRef.value === startThumbRef.value?.$el) {\n          model.value = [Math.min(newValue, stop), stop];\n        } else {\n          model.value = [start, Math.max(start, newValue)];\n        }\n      },\n      getActiveThumb\n      /* eslint-enable @typescript-eslint/no-use-before-define */\n\n    });\n    const model = useProxiedModel(props, 'modelValue', undefined, arr => {\n      // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\n      if (!arr || !arr.length) return [0, 0];\n      return arr.map(value => roundValue(value));\n    });\n    const {\n      isFocused,\n      focus,\n      blur\n    } = useFocus(props);\n    const trackStart = computed(() => position(model.value[0]));\n    const trackStop = computed(() => position(model.value[1]));\n    useRender(() => {\n      const [inputProps, _] = VInput.filterProps(props);\n      const hasPrepend = !!(props.label || slots.label || slots.prepend);\n      return _createVNode(VInput, _mergeProps({\n        \"class\": ['v-slider', 'v-range-slider', {\n          'v-slider--has-labels': !!slots['tick-label'] || hasLabels.value,\n          'v-slider--focused': isFocused.value,\n          'v-slider--pressed': mousePressed.value,\n          'v-slider--disabled': props.disabled\n        }],\n        \"ref\": inputRef\n      }, inputProps, {\n        \"focused\": isFocused.value\n      }), { ...slots,\n        prepend: hasPrepend ? slotProps => _createVNode(_Fragment, null, [slots.label?.(slotProps) ?? props.label ? _createVNode(VLabel, {\n          \"class\": \"v-slider__label\",\n          \"text\": props.label\n        }, null) : undefined, slots.prepend?.(slotProps)]) : undefined,\n        default: _ref2 => {\n          let {\n            id,\n            messagesId\n          } = _ref2;\n          return _createVNode(\"div\", {\n            \"class\": \"v-slider__container\",\n            \"onMousedown\": onSliderMousedown,\n            \"onTouchstartPassive\": onSliderTouchstart\n          }, [_createVNode(\"input\", {\n            \"id\": `${id.value}_start`,\n            \"name\": props.name || id.value,\n            \"disabled\": props.disabled,\n            \"readonly\": props.readonly,\n            \"tabindex\": \"-1\",\n            \"value\": model.value[0]\n          }, null), _createVNode(\"input\", {\n            \"id\": `${id.value}_stop`,\n            \"name\": props.name || id.value,\n            \"disabled\": props.disabled,\n            \"readonly\": props.readonly,\n            \"tabindex\": \"-1\",\n            \"value\": model.value[1]\n          }, null), _createVNode(VSliderTrack, {\n            \"ref\": trackContainerRef,\n            \"start\": trackStart.value,\n            \"stop\": trackStop.value\n          }, {\n            'tick-label': slots['tick-label']\n          }), _createVNode(VSliderThumb, {\n            \"ref\": startThumbRef,\n            \"aria-describedby\": messagesId.value,\n            \"focused\": isFocused && activeThumbRef.value === startThumbRef.value?.$el,\n            \"modelValue\": model.value[0],\n            \"onUpdate:modelValue\": v => model.value = [v, model.value[1]],\n            \"onFocus\": e => {\n              focus();\n              activeThumbRef.value = startThumbRef.value?.$el; // Make sure second thumb is focused if\n              // the thumbs are on top of each other\n              // and they are both at minimum value\n              // but only if focused from outside.\n\n              if (model.value[0] === model.value[1] && model.value[1] === min.value && e.relatedTarget !== stopThumbRef.value?.$el) {\n                startThumbRef.value?.$el.blur();\n                stopThumbRef.value?.$el.focus();\n              }\n            },\n            \"onBlur\": () => {\n              blur();\n              activeThumbRef.value = undefined;\n            },\n            \"min\": min.value,\n            \"max\": model.value[1],\n            \"position\": trackStart.value\n          }, {\n            'thumb-label': slots['thumb-label']\n          }), _createVNode(VSliderThumb, {\n            \"ref\": stopThumbRef,\n            \"aria-describedby\": messagesId.value,\n            \"focused\": isFocused && activeThumbRef.value === stopThumbRef.value?.$el,\n            \"modelValue\": model.value[1],\n            \"onUpdate:modelValue\": v => model.value = [model.value[0], v],\n            \"onFocus\": e => {\n              focus();\n              activeThumbRef.value = stopThumbRef.value?.$el; // Make sure first thumb is focused if\n              // the thumbs are on top of each other\n              // and they are both at maximum value\n              // but only if focused from outside.\n\n              if (model.value[0] === model.value[1] && model.value[0] === max.value && e.relatedTarget !== startThumbRef.value?.$el) {\n                stopThumbRef.value?.$el.blur();\n                startThumbRef.value?.$el.focus();\n              }\n            },\n            \"onBlur\": () => {\n              blur();\n              activeThumbRef.value = undefined;\n            },\n            \"min\": model.value[0],\n            \"max\": max.value,\n            \"position\": trackStop.value\n          }, {\n            'thumb-label': slots['thumb-label']\n          })]);\n        }\n      });\n    });\n    return {};\n  }\n\n});","map":{"version":3,"mappings":"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","names":["makeVInputProps","VInput","getOffset","makeSliderProps","useSlider","VLabel","VSliderThumb","VSliderTrack","makeFocusProps","useFocus","useProxiedModel","computed","ref","genericComponent","useRender","VRangeSlider","name","props","strict","Boolean","modelValue","type","Array","default","emits","value","setup","_ref","slots","startThumbRef","stopThumbRef","inputRef","getActiveThumb","e","startOffset","$el","direction","stopOffset","a","Math","abs","b","activeThumbRef","hasLabels","max","min","mousePressed","onSliderMousedown","onSliderTouchstart","position","roundValue","trackContainerRef","handleSliderMouseUp","newValue","model","handleMouseMove","start","stop","focus","undefined","arr","length","map","isFocused","blur","trackStart","trackStop","inputProps","_","filterProps","hasPrepend","label","prepend","disabled","slotProps","_createVNode","_ref2","id","messagesId","readonly","v","relatedTarget","onBlur"],"sources":["../../../src/components/VRangeSlider/VRangeSlider.tsx"],"sourcesContent":["// Styles\nimport '../VSlider/VSlider.sass'\n\n// Components\nimport { makeVInputProps, VInput } from '@/components/VInput/VInput'\nimport { getOffset, makeSliderProps, useSlider } from '@/components/VSlider/slider'\nimport { VLabel } from '@/components/VLabel'\nimport { VSliderThumb } from '@/components/VSlider/VSliderThumb'\nimport { VSliderTrack } from '@/components/VSlider/VSliderTrack'\n\n// Composables\nimport { makeFocusProps, useFocus } from '@/composables/focus'\nimport { useProxiedModel } from '@/composables/proxiedModel'\n\n// Utilities\nimport { computed, ref } from 'vue'\nimport { genericComponent, useRender } from '@/util'\n\n// Types\nimport type { PropType, WritableComputedRef } from 'vue'\nimport type { VSliderSlots } from '../VSlider/VSlider'\n\nexport const VRangeSlider = genericComponent<VSliderSlots>()({\n  name: 'VRangeSlider',\n\n  props: {\n    ...makeFocusProps(),\n    ...makeVInputProps(),\n    ...makeSliderProps(),\n\n    strict: Boolean,\n    modelValue: {\n      type: Array as PropType<number[]>,\n      default: () => ([0, 0]),\n    },\n  },\n\n  emits: {\n    'update:focused': (value: boolean) => true,\n    'update:modelValue': (value: [number, number]) => true,\n  },\n\n  setup (props, { slots }) {\n    const startThumbRef = ref<VSliderThumb>()\n    const stopThumbRef = ref<VSliderThumb>()\n    const inputRef = ref<VInput>()\n\n    function getActiveThumb (e: MouseEvent | TouchEvent) {\n      if (!startThumbRef.value || !stopThumbRef.value) return\n\n      const startOffset = getOffset(e, startThumbRef.value.$el, props.direction)\n      const stopOffset = getOffset(e, stopThumbRef.value.$el, props.direction)\n\n      const a = Math.abs(startOffset)\n      const b = Math.abs(stopOffset)\n\n      return (a < b || (a === b && startOffset < 0)) ? startThumbRef.value.$el : stopThumbRef.value.$el\n    }\n\n    const {\n      activeThumbRef,\n      hasLabels,\n      max,\n      min,\n      mousePressed,\n      onSliderMousedown,\n      onSliderTouchstart,\n      position,\n      roundValue,\n      trackContainerRef,\n    } = useSlider({\n      /* eslint-disable @typescript-eslint/no-use-before-define */\n      props,\n      handleSliderMouseUp: newValue => {\n        model.value = activeThumbRef.value === startThumbRef.value?.$el ? [newValue, model.value[1]] : [model.value[0], newValue]\n      },\n      handleMouseMove: newValue => {\n        const [start, stop] = model.value\n\n        if (!props.strict && start === stop && start !== min.value) {\n          activeThumbRef.value = newValue > start ? stopThumbRef.value?.$el : startThumbRef.value?.$el\n          activeThumbRef.value?.focus()\n        }\n\n        if (activeThumbRef.value === startThumbRef.value?.$el) {\n          model.value = [Math.min(newValue, stop), stop]\n        } else {\n          model.value = [start, Math.max(start, newValue)]\n        }\n      },\n      getActiveThumb,\n      /* eslint-enable @typescript-eslint/no-use-before-define */\n    })\n\n    const model = useProxiedModel(\n      props,\n      'modelValue',\n      undefined,\n      arr => {\n        // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\n        if (!arr || !arr.length) return [0, 0]\n\n        return arr.map(value => roundValue(value))\n      },\n    ) as WritableComputedRef<[number, number]> & { readonly externalValue: number[] }\n\n    const { isFocused, focus, blur } = useFocus(props)\n    const trackStart = computed(() => position(model.value[0]))\n    const trackStop = computed(() => position(model.value[1]))\n\n    useRender(() => {\n      const [inputProps, _] = VInput.filterProps(props)\n      const hasPrepend = !!(props.label || slots.label || slots.prepend)\n\n      return (\n        <VInput\n          class={[\n            'v-slider',\n            'v-range-slider',\n            {\n              'v-slider--has-labels': !!slots['tick-label'] || hasLabels.value,\n              'v-slider--focused': isFocused.value,\n              'v-slider--pressed': mousePressed.value,\n              'v-slider--disabled': props.disabled,\n            },\n          ]}\n          ref={ inputRef }\n          { ...inputProps }\n          focused={ isFocused.value }\n        >\n          {{\n            ...slots,\n            prepend: hasPrepend ? slotProps => (\n              <>\n                { slots.label?.(slotProps) ?? props.label\n                  ? (\n                    <VLabel\n                      class=\"v-slider__label\"\n                      text={ props.label }\n                    />\n                  ) : undefined\n                }\n\n                { slots.prepend?.(slotProps) }\n              </>\n            ) : undefined,\n            default: ({ id, messagesId }) => (\n              <div\n                class=\"v-slider__container\"\n                onMousedown={ onSliderMousedown }\n                onTouchstartPassive={ onSliderTouchstart }\n              >\n                <input\n                  id={ `${id.value}_start` }\n                  name={ props.name || id.value }\n                  disabled={ props.disabled }\n                  readonly={ props.readonly }\n                  tabindex=\"-1\"\n                  value={ model.value[0] }\n                />\n\n                <input\n                  id={ `${id.value}_stop` }\n                  name={ props.name || id.value }\n                  disabled={ props.disabled }\n                  readonly={ props.readonly }\n                  tabindex=\"-1\"\n                  value={ model.value[1] }\n                />\n\n                <VSliderTrack\n                  ref={ trackContainerRef }\n                  start={ trackStart.value }\n                  stop={ trackStop.value }\n                >\n                  {{ 'tick-label': slots['tick-label'] }}\n                </VSliderTrack>\n\n                <VSliderThumb\n                  ref={ startThumbRef }\n                  aria-describedby={ messagesId.value }\n                  focused={ isFocused && activeThumbRef.value === startThumbRef.value?.$el }\n                  modelValue={ model.value[0] }\n                  onUpdate:modelValue={ v => (model.value = [v, model.value[1]]) }\n                  onFocus={ (e: FocusEvent) => {\n                    focus()\n                    activeThumbRef.value = startThumbRef.value?.$el\n\n                    // Make sure second thumb is focused if\n                    // the thumbs are on top of each other\n                    // and they are both at minimum value\n                    // but only if focused from outside.\n                    if (\n                      model.value[0] === model.value[1] &&\n                      model.value[1] === min.value &&\n                      e.relatedTarget !== stopThumbRef.value?.$el\n                    ) {\n                      startThumbRef.value?.$el.blur()\n                      stopThumbRef.value?.$el.focus()\n                    }\n                  }}\n                  onBlur={ () => {\n                    blur()\n                    activeThumbRef.value = undefined\n                  }}\n                  min={ min.value }\n                  max={ model.value[1] }\n                  position={ trackStart.value }\n                >\n                  {{ 'thumb-label': slots['thumb-label'] }}\n                </VSliderThumb>\n\n                <VSliderThumb\n                  ref={ stopThumbRef }\n                  aria-describedby={ messagesId.value }\n                  focused={ isFocused && activeThumbRef.value === stopThumbRef.value?.$el }\n                  modelValue={ model.value[1] }\n                  onUpdate:modelValue={ v => (model.value = [model.value[0], v]) }\n                  onFocus={ (e: FocusEvent) => {\n                    focus()\n                    activeThumbRef.value = stopThumbRef.value?.$el\n\n                    // Make sure first thumb is focused if\n                    // the thumbs are on top of each other\n                    // and they are both at maximum value\n                    // but only if focused from outside.\n                    if (\n                      model.value[0] === model.value[1] &&\n                      model.value[0] === max.value &&\n                      e.relatedTarget !== startThumbRef.value?.$el\n                    ) {\n                      stopThumbRef.value?.$el.blur()\n                      startThumbRef.value?.$el.focus()\n                    }\n                  }}\n                  onBlur={ () => {\n                    blur()\n                    activeThumbRef.value = undefined\n                  }}\n                  min={ model.value[0] }\n                  max={ max.value }\n                  position={ trackStop.value }\n                >\n                  {{ 'thumb-label': slots['thumb-label'] }}\n                </VSliderThumb>\n              </div>\n            ),\n          }}\n        </VInput>\n      )\n    })\n\n    return {}\n  },\n})\n\nexport type VRangeSlider = InstanceType<typeof VRangeSlider>\n"]},"metadata":{},"sourceType":"module"}