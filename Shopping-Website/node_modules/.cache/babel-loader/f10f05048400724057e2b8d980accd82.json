{"ast":null,"code":"import { createVNode as _createVNode } from \"vue\"; // Styles\n\nimport \"./VDivider.css\"; // Composables\n\nimport { makeThemeProps, provideTheme } from \"../../composables/theme.mjs\";\nimport { useTextColor } from \"../../composables/color.mjs\"; // Utilities\n\nimport { computed, toRef } from 'vue';\nimport { convertToUnit, genericComponent, useRender } from \"../../util/index.mjs\";\nexport const VDivider = genericComponent()({\n  name: 'VDivider',\n  props: {\n    color: String,\n    inset: Boolean,\n    length: [Number, String],\n    thickness: [Number, String],\n    vertical: Boolean,\n    ...makeThemeProps()\n  },\n\n  setup(props, _ref) {\n    let {\n      attrs\n    } = _ref;\n    const {\n      themeClasses\n    } = provideTheme(props);\n    const {\n      textColorClasses,\n      textColorStyles\n    } = useTextColor(toRef(props, 'color'));\n    const dividerStyles = computed(() => {\n      const styles = {};\n\n      if (props.length) {\n        styles[props.vertical ? 'maxHeight' : 'maxWidth'] = convertToUnit(props.length);\n      }\n\n      if (props.thickness) {\n        styles[props.vertical ? 'borderRightWidth' : 'borderTopWidth'] = convertToUnit(props.thickness);\n      }\n\n      return styles;\n    });\n    useRender(() => _createVNode(\"hr\", {\n      \"class\": [{\n        'v-divider': true,\n        'v-divider--inset': props.inset,\n        'v-divider--vertical': props.vertical\n      }, themeClasses.value, textColorClasses.value],\n      \"style\": [dividerStyles.value, textColorStyles.value],\n      \"aria-orientation\": !attrs.role || attrs.role === 'separator' ? props.vertical ? 'vertical' : 'horizontal' : undefined,\n      \"role\": `${attrs.role || 'separator'}`\n    }, null));\n    return {};\n  }\n\n});","map":{"version":3,"mappings":"mDAAA;;AACA,wB,CAEA;;AAAA,SACSA,cADT,EACyBC,YADzB,QACqC,6BADrC;AACqC,SAC5BC,YAD4B,QAChB,6BADgB,C,CAGrC;;AACA,SAASC,QAAT,EAAmBC,KAAnB,QAAgC,KAAhC;AAAqC,SAC5BC,aAD4B,EACbC,gBADa,EACKC,SADL,QACc,sBADd;AAMrC,OAAO,MAAMC,QAAQ,GAAGF,gBAAgB,GAAG;EACzCG,IAAI,EAAE,UADmC;EAGzCC,KAAK,EAAE;IACLC,KAAK,EAAEC,MADF;IAELC,KAAK,EAAEC,OAFF;IAGLC,MAAM,EAAE,CAACC,MAAD,EAASJ,MAAT,CAHH;IAILK,SAAS,EAAE,CAACD,MAAD,EAASJ,MAAT,CAJN;IAKLM,QAAQ,EAAEJ,OALL;IAOL,GAAGd,cAAc;EAPZ,CAHkC;;EAazCmB,KAAKA,CAAET,KAAFS,EAAOC,IAAPD,EAAoB;IAAA,IAAX;MAAEE;IAAF,IAASD,IAAE;IACvB,MAAM;MAAEE;IAAF,IAAmBrB,YAAY,CAACS,KAAD,CAArC;IACA,MAAM;MAAEa,gBAAF;MAAoBC;IAApB,IAAwCtB,YAAY,CAACE,KAAK,CAACM,KAAD,EAAQ,OAAR,CAAN,CAA1D;IACA,MAAMe,aAAa,GAAGtB,QAAQ,CAAC,MAAM;MACnC,MAAMuB,MAAqB,GAAG,EAA9B;;MAEA,IAAIhB,KAAK,CAACK,MAAV,EAAkB;QAChBW,MAAM,CAAChB,KAAK,CAACQ,QAANR,GAAiB,WAAjBA,GAA+B,UAAhC,CAANgB,GAAoDrB,aAAa,CAACK,KAAK,CAACK,MAAP,CAAjEW;MACF;;MAEA,IAAIhB,KAAK,CAACO,SAAV,EAAqB;QACnBS,MAAM,CAAChB,KAAK,CAACQ,QAANR,GAAiB,kBAAjBA,GAAsC,gBAAvC,CAANgB,GAAiErB,aAAa,CAACK,KAAK,CAACO,SAAP,CAA9ES;MACF;;MAEA,OAAOA,MAAP;IACD,CAZ6B,CAA9B;IAcAnB,SAAS,CAAC;MAAA,SAEC,CACL;QACE,aAAa,IADf;QAEE,oBAAoBG,KAAK,CAACG,KAF5B;QAGE,uBAAuBH,KAAK,CAACQ;MAH/B,CADK,EAMLI,YAAY,CAACK,KANR,EAOLJ,gBAAgB,CAACI,KAPZ,CAFD;MAUL,SACM,CACLF,aAAa,CAACE,KADT,EAELH,eAAe,CAACG,KAFX,CAXD;MAcL,oBAEC,CAACN,KAAK,CAACO,IAAP,IAAeP,KAAK,CAACO,IAANP,KAAe,WAA9B,GACIX,KAAK,CAACQ,QAANR,GAAiB,UAAjBA,GAA8B,YADlC,GAEImB,SAlBA;MAkBS,QAEP,GAAER,KAAK,CAACO,IAANP,IAAc,WAAY;IApB9B,GAoB+B,IApB/B,CAAD,CAATd;IAwBA,OAAO,EAAP;EACF;;AAvDyC,CAAH,CAAjC","names":["makeThemeProps","provideTheme","useTextColor","computed","toRef","convertToUnit","genericComponent","useRender","VDivider","name","props","color","String","inset","Boolean","length","Number","thickness","vertical","setup","_ref","attrs","themeClasses","textColorClasses","textColorStyles","dividerStyles","styles","value","role","undefined"],"sources":["../../../src/components/VDivider/VDivider.tsx"],"sourcesContent":["// Styles\nimport './VDivider.sass'\n\n// Composables\nimport { makeThemeProps, provideTheme } from '@/composables/theme'\nimport { useTextColor } from '@/composables/color'\n\n// Utilities\nimport { computed, toRef } from 'vue'\nimport { convertToUnit, genericComponent, useRender } from '@/util'\n\ntype DividerKey = 'borderRightWidth' | 'borderTopWidth' | 'maxHeight' | 'maxWidth'\ntype DividerStyles = Partial<Record<DividerKey, string>>\n\nexport const VDivider = genericComponent()({\n  name: 'VDivider',\n\n  props: {\n    color: String,\n    inset: Boolean,\n    length: [Number, String],\n    thickness: [Number, String],\n    vertical: Boolean,\n\n    ...makeThemeProps(),\n  },\n\n  setup (props, { attrs }) {\n    const { themeClasses } = provideTheme(props)\n    const { textColorClasses, textColorStyles } = useTextColor(toRef(props, 'color'))\n    const dividerStyles = computed(() => {\n      const styles: DividerStyles = {}\n\n      if (props.length) {\n        styles[props.vertical ? 'maxHeight' : 'maxWidth'] = convertToUnit(props.length)\n      }\n\n      if (props.thickness) {\n        styles[props.vertical ? 'borderRightWidth' : 'borderTopWidth'] = convertToUnit(props.thickness)\n      }\n\n      return styles\n    })\n\n    useRender(() => (\n      <hr\n        class={[\n          {\n            'v-divider': true,\n            'v-divider--inset': props.inset,\n            'v-divider--vertical': props.vertical,\n          },\n          themeClasses.value,\n          textColorClasses.value,\n        ]}\n        style={[\n          dividerStyles.value,\n          textColorStyles.value,\n        ]}\n        aria-orientation={\n          !attrs.role || attrs.role === 'separator'\n            ? props.vertical ? 'vertical' : 'horizontal'\n            : undefined\n        }\n        role={ `${attrs.role || 'separator'}` }\n      />\n    ))\n\n    return {}\n  },\n})\n\nexport type VDivider = InstanceType<typeof VDivider>\n"]},"metadata":{},"sourceType":"module"}