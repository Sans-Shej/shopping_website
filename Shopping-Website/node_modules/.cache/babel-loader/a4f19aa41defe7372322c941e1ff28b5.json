{"ast":null,"code":"// Utilities\nimport { consoleWarn } from \"./console.mjs\";\nimport { chunk, padEnd } from \"./helpers.mjs\";\nimport * as sRGB from \"./color/transformSRGB.mjs\";\nimport * as CIELAB from \"./color/transformCIELAB.mjs\"; // Types\n\nexport function isCssColor(color) {\n  return !!color && /^(#|var\\(--|(rgb|hsl)a?\\()/.test(color);\n}\nexport function parseColor(color) {\n  if (typeof color === 'number') {\n    if (isNaN(color) || color < 0 || color > 0xFFFFFF) {\n      // int can't have opacity\n      consoleWarn(`'${color}' is not a valid hex color`);\n    }\n\n    return {\n      r: (color & 0xFF0000) >> 16,\n      g: (color & 0xFF00) >> 8,\n      b: color & 0xFF\n    };\n  } else if (typeof color === 'string') {\n    let hex = color.startsWith('#') ? color.slice(1) : color;\n\n    if ([3, 4].includes(hex.length)) {\n      hex = hex.split('').map(char => char + char).join('');\n    } else if (![6, 8].includes(hex.length)) {\n      consoleWarn(`'${color}' is not a valid hex(a) color`);\n    }\n\n    const int = parseInt(hex, 16);\n\n    if (isNaN(int) || int < 0 || int > 0xFFFFFFFF) {\n      consoleWarn(`'${color}' is not a valid hex(a) color`);\n    }\n\n    return HexToRGB(hex);\n  } else {\n    throw new TypeError(`Colors can only be numbers or strings, recieved ${color == null ? color : color.constructor.name} instead`);\n  }\n}\nexport function RGBToInt(color) {\n  return (color.r << 16) + (color.g << 8) + color.b;\n}\nexport function classToHex(color, colors, currentTheme) {\n  const [colorName, colorModifier] = color.toString().trim().replace('-', '').split(' ', 2);\n  let hexColor = '';\n\n  if (colorName && colorName in colors) {\n    if (colorModifier && colorModifier in colors[colorName]) {\n      hexColor = colors[colorName][colorModifier];\n    } else if ('base' in colors[colorName]) {\n      hexColor = colors[colorName].base;\n    }\n  } else if (colorName && colorName in currentTheme) {\n    hexColor = currentTheme[colorName];\n  }\n\n  return hexColor;\n}\n/** Converts HSVA to RGBA. Based on formula from https://en.wikipedia.org/wiki/HSL_and_HSV */\n\nexport function HSVtoRGB(hsva) {\n  const {\n    h,\n    s,\n    v,\n    a\n  } = hsva;\n\n  const f = n => {\n    const k = (n + h / 60) % 6;\n    return v - v * s * Math.max(Math.min(k, 4 - k, 1), 0);\n  };\n\n  const rgb = [f(5), f(3), f(1)].map(v => Math.round(v * 255));\n  return {\n    r: rgb[0],\n    g: rgb[1],\n    b: rgb[2],\n    a\n  };\n}\n/** Converts RGBA to HSVA. Based on formula from https://en.wikipedia.org/wiki/HSL_and_HSV */\n\nexport function RGBtoHSV(rgba) {\n  if (!rgba) return {\n    h: 0,\n    s: 1,\n    v: 1,\n    a: 1\n  };\n  const r = rgba.r / 255;\n  const g = rgba.g / 255;\n  const b = rgba.b / 255;\n  const max = Math.max(r, g, b);\n  const min = Math.min(r, g, b);\n  let h = 0;\n\n  if (max !== min) {\n    if (max === r) {\n      h = 60 * (0 + (g - b) / (max - min));\n    } else if (max === g) {\n      h = 60 * (2 + (b - r) / (max - min));\n    } else if (max === b) {\n      h = 60 * (4 + (r - g) / (max - min));\n    }\n  }\n\n  if (h < 0) h = h + 360;\n  const s = max === 0 ? 0 : (max - min) / max;\n  const hsv = [h, s, max];\n  return {\n    h: hsv[0],\n    s: hsv[1],\n    v: hsv[2],\n    a: rgba.a\n  };\n}\nexport function HSVtoHSL(hsva) {\n  const {\n    h,\n    s,\n    v,\n    a\n  } = hsva;\n  const l = v - v * s / 2;\n  const sprime = l === 1 || l === 0 ? 0 : (v - l) / Math.min(l, 1 - l);\n  return {\n    h,\n    s: sprime,\n    l,\n    a\n  };\n}\nexport function HSLtoHSV(hsl) {\n  const {\n    h,\n    s,\n    l,\n    a\n  } = hsl;\n  const v = l + s * Math.min(l, 1 - l);\n  const sprime = v === 0 ? 0 : 2 - 2 * l / v;\n  return {\n    h,\n    s: sprime,\n    v,\n    a\n  };\n}\nexport function RGBtoCSS(_ref) {\n  let {\n    r,\n    g,\n    b,\n    a\n  } = _ref;\n  return a === undefined ? `rgb(${r}, ${g}, ${b})` : `rgba(${r}, ${g}, ${b}, ${a})`;\n}\nexport function HSVtoCSS(hsva) {\n  return RGBtoCSS(HSVtoRGB(hsva));\n}\n\nfunction toHex(v) {\n  const h = Math.round(v).toString(16);\n  return ('00'.substr(0, 2 - h.length) + h).toUpperCase();\n}\n\nexport function RGBtoHex(_ref2) {\n  let {\n    r,\n    g,\n    b,\n    a\n  } = _ref2;\n  return `#${[toHex(r), toHex(g), toHex(b), a !== undefined ? toHex(Math.round(a * 255)) : ''].join('')}`;\n}\nexport function HexToRGB(hex) {\n  hex = parseHex(hex);\n  let [r, g, b, a] = chunk(hex, 2).map(c => parseInt(c, 16));\n  a = a === undefined ? a : a / 255;\n  return {\n    r,\n    g,\n    b,\n    a\n  };\n}\nexport function HexToHSV(hex) {\n  const rgb = HexToRGB(hex);\n  return RGBtoHSV(rgb);\n}\nexport function HSVtoHex(hsva) {\n  return RGBtoHex(HSVtoRGB(hsva));\n}\nexport function parseHex(hex) {\n  if (hex.startsWith('#')) {\n    hex = hex.slice(1);\n  }\n\n  hex = hex.replace(/([^0-9a-f])/gi, 'F');\n\n  if (hex.length === 3 || hex.length === 4) {\n    hex = hex.split('').map(x => x + x).join('');\n  }\n\n  if (hex.length !== 6) {\n    hex = padEnd(padEnd(hex, 6), 8, 'F');\n  }\n\n  return hex;\n}\nexport function parseGradient(gradient, colors, currentTheme) {\n  return gradient.replace(/([a-z]+(\\s[a-z]+-[1-5])?)(?=$|,)/gi, x => {\n    return classToHex(x, colors, currentTheme) || x;\n  }).replace(/(rgba\\()#[0-9a-f]+(?=,)/gi, x => {\n    return 'rgba(' + Object.values(HexToRGB(parseHex(x.replace(/rgba\\(/, '')))).slice(0, 3).join(',');\n  });\n}\nexport function lighten(value, amount) {\n  const lab = CIELAB.fromXYZ(sRGB.toXYZ(value));\n  lab[0] = lab[0] + amount * 10;\n  return sRGB.fromXYZ(CIELAB.toXYZ(lab));\n}\nexport function darken(value, amount) {\n  const lab = CIELAB.fromXYZ(sRGB.toXYZ(value));\n  lab[0] = lab[0] - amount * 10;\n  return sRGB.fromXYZ(CIELAB.toXYZ(lab));\n}\n/**\n * Calculate the relative luminance of a given color\n * @see https://www.w3.org/TR/WCAG20/#relativeluminancedef\n */\n\nexport function getLuma(color) {\n  const rgb = parseColor(color);\n  return sRGB.toXYZ(rgb)[1];\n}\n/**\n * Returns the contrast ratio (1-21) between two colors.\n * @see https://www.w3.org/TR/WCAG20/#contrast-ratiodef\n */\n\nexport function getContrast(first, second) {\n  const l1 = getLuma(first);\n  const l2 = getLuma(second);\n  const light = Math.max(l1, l2);\n  const dark = Math.min(l1, l2);\n  return (light + 0.05) / (dark + 0.05);\n}","map":{"version":3,"mappings":"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","names":["consoleWarn","chunk","padEnd","sRGB","CIELAB","isCssColor","color","test","parseColor","isNaN","r","g","b","hex","startsWith","slice","includes","length","split","map","char","join","int","parseInt","HexToRGB","TypeError","constructor","name","RGBToInt","classToHex","colors","currentTheme","colorName","colorModifier","toString","trim","replace","hexColor","base","HSVtoRGB","hsva","h","s","v","a","f","n","k","Math","max","min","rgb","round","RGBtoHSV","rgba","hsv","HSVtoHSL","l","sprime","HSLtoHSV","hsl","RGBtoCSS","_ref","undefined","HSVtoCSS","toHex","substr","toUpperCase","RGBtoHex","_ref2","parseHex","c","HexToHSV","HSVtoHex","x","parseGradient","gradient","Object","values","lighten","value","amount","lab","fromXYZ","toXYZ","darken","getLuma","getContrast","first","second","l1","l2","light","dark"],"sources":["../../src/util/colorUtils.ts"],"sourcesContent":["// Utilities\nimport { consoleWarn } from './console'\nimport { chunk, padEnd } from './helpers'\nimport * as sRGB from '@/util/color/transformSRGB'\nimport * as CIELAB from '@/util/color/transformCIELAB'\n\n// Types\nimport type { Colors } from '@/composables/theme'\n\nexport type XYZ = [number, number, number]\nexport type LAB = [number, number, number]\nexport type HSV = { h: number, s: number, v: number, a?: number }\nexport type RGB = { r: number, g: number, b: number, a?: number }\nexport type HSL = { h: number, s: number, l: number, a?: number }\nexport type Hex = string & { __hexBrand: never }\nexport type Color = string | number | {}\n\nexport function isCssColor (color?: string | null | false): boolean {\n  return !!color && /^(#|var\\(--|(rgb|hsl)a?\\()/.test(color)\n}\n\nexport function parseColor (color: Color): RGB {\n  if (typeof color === 'number') {\n    if (isNaN(color) || color < 0 || color > 0xFFFFFF) { // int can't have opacity\n      consoleWarn(`'${color}' is not a valid hex color`)\n    }\n\n    return {\n      r: (color & 0xFF0000) >> 16,\n      g: (color & 0xFF00) >> 8,\n      b: (color & 0xFF),\n    }\n  } else if (typeof color === 'string') {\n    let hex = color.startsWith('#') ? color.slice(1) : color\n\n    if ([3, 4].includes(hex.length)) {\n      hex = hex.split('').map(char => char + char).join('')\n    } else if (![6, 8].includes(hex.length)) {\n      consoleWarn(`'${color}' is not a valid hex(a) color`)\n    }\n\n    const int = parseInt(hex, 16)\n    if (isNaN(int) || int < 0 || int > 0xFFFFFFFF) {\n      consoleWarn(`'${color}' is not a valid hex(a) color`)\n    }\n\n    return HexToRGB(hex as Hex)\n  } else {\n    throw new TypeError(`Colors can only be numbers or strings, recieved ${color == null ? color : color.constructor.name} instead`)\n  }\n}\n\nexport function RGBToInt (color: RGB) {\n  return (color.r << 16) + (color.g << 8) + color.b\n}\n\nexport function classToHex (\n  color: string,\n  colors: Record<string, Record<string, string>>,\n  currentTheme: Partial<Colors>,\n): string {\n  const [colorName, colorModifier] = color\n    .toString().trim().replace('-', '').split(' ', 2) as (string | undefined)[]\n\n  let hexColor = ''\n  if (colorName && colorName in colors) {\n    if (colorModifier && colorModifier in colors[colorName]) {\n      hexColor = colors[colorName][colorModifier]\n    } else if ('base' in colors[colorName]) {\n      hexColor = colors[colorName].base\n    }\n  } else if (colorName && colorName in currentTheme) {\n    hexColor = currentTheme[colorName] as string\n  }\n\n  return hexColor\n}\n\n/** Converts HSVA to RGBA. Based on formula from https://en.wikipedia.org/wiki/HSL_and_HSV */\nexport function HSVtoRGB (hsva: HSV): RGB {\n  const { h, s, v, a } = hsva\n  const f = (n: number) => {\n    const k = (n + (h / 60)) % 6\n    return v - v * s * Math.max(Math.min(k, 4 - k, 1), 0)\n  }\n\n  const rgb = [f(5), f(3), f(1)].map(v => Math.round(v * 255))\n\n  return { r: rgb[0], g: rgb[1], b: rgb[2], a }\n}\n\n/** Converts RGBA to HSVA. Based on formula from https://en.wikipedia.org/wiki/HSL_and_HSV */\nexport function RGBtoHSV (rgba: RGB): HSV {\n  if (!rgba) return { h: 0, s: 1, v: 1, a: 1 }\n\n  const r = rgba.r / 255\n  const g = rgba.g / 255\n  const b = rgba.b / 255\n  const max = Math.max(r, g, b)\n  const min = Math.min(r, g, b)\n\n  let h = 0\n\n  if (max !== min) {\n    if (max === r) {\n      h = 60 * (0 + ((g - b) / (max - min)))\n    } else if (max === g) {\n      h = 60 * (2 + ((b - r) / (max - min)))\n    } else if (max === b) {\n      h = 60 * (4 + ((r - g) / (max - min)))\n    }\n  }\n\n  if (h < 0) h = h + 360\n\n  const s = max === 0 ? 0 : (max - min) / max\n  const hsv = [h, s, max]\n\n  return { h: hsv[0], s: hsv[1], v: hsv[2], a: rgba.a }\n}\n\nexport function HSVtoHSL (hsva: HSV): HSL {\n  const { h, s, v, a } = hsva\n\n  const l = v - (v * s / 2)\n\n  const sprime = l === 1 || l === 0 ? 0 : (v - l) / Math.min(l, 1 - l)\n\n  return { h, s: sprime, l, a }\n}\n\nexport function HSLtoHSV (hsl: HSL): HSV {\n  const { h, s, l, a } = hsl\n\n  const v = l + s * Math.min(l, 1 - l)\n\n  const sprime = v === 0 ? 0 : 2 - (2 * l / v)\n\n  return { h, s: sprime, v, a }\n}\n\nexport function RGBtoCSS ({ r, g, b, a }: RGB): string {\n  return a === undefined ? `rgb(${r}, ${g}, ${b})` : `rgba(${r}, ${g}, ${b}, ${a})`\n}\n\nexport function HSVtoCSS (hsva: HSV): string {\n  return RGBtoCSS(HSVtoRGB(hsva))\n}\n\nfunction toHex (v: number) {\n  const h = Math.round(v).toString(16)\n  return ('00'.substr(0, 2 - h.length) + h).toUpperCase()\n}\n\nexport function RGBtoHex ({ r, g, b, a }: RGB): Hex {\n  return `#${[\n    toHex(r),\n    toHex(g),\n    toHex(b),\n    a !== undefined ? toHex(Math.round(a * 255)) : '',\n  ].join('')}` as Hex\n}\n\nexport function HexToRGB (hex: Hex): RGB {\n  hex = parseHex(hex)\n  let [r, g, b, a] = chunk(hex, 2).map((c: string) => parseInt(c, 16))\n  a = a === undefined ? a : (a / 255)\n\n  return { r, g, b, a }\n}\n\nexport function HexToHSV (hex: Hex): HSV {\n  const rgb = HexToRGB(hex)\n  return RGBtoHSV(rgb)\n}\n\nexport function HSVtoHex (hsva: HSV): Hex {\n  return RGBtoHex(HSVtoRGB(hsva))\n}\n\nexport function parseHex (hex: string): Hex {\n  if (hex.startsWith('#')) {\n    hex = hex.slice(1)\n  }\n\n  hex = hex.replace(/([^0-9a-f])/gi, 'F')\n\n  if (hex.length === 3 || hex.length === 4) {\n    hex = hex.split('').map(x => x + x).join('')\n  }\n\n  if (hex.length !== 6) {\n    hex = padEnd(padEnd(hex, 6), 8, 'F')\n  }\n\n  return hex as Hex\n}\n\nexport function parseGradient (\n  gradient: string,\n  colors: Record<string, Record<string, string>>,\n  currentTheme: Partial<Colors>,\n) {\n  return gradient.replace(/([a-z]+(\\s[a-z]+-[1-5])?)(?=$|,)/gi, x => {\n    return classToHex(x, colors, currentTheme) || x\n  }).replace(/(rgba\\()#[0-9a-f]+(?=,)/gi, x => {\n    return 'rgba(' + Object.values(HexToRGB(parseHex(x.replace(/rgba\\(/, '')))).slice(0, 3).join(',')\n  })\n}\n\nexport function lighten (value: RGB, amount: number): RGB {\n  const lab = CIELAB.fromXYZ(sRGB.toXYZ(value))\n  lab[0] = lab[0] + amount * 10\n\n  return sRGB.fromXYZ(CIELAB.toXYZ(lab))\n}\n\nexport function darken (value: RGB, amount: number): RGB {\n  const lab = CIELAB.fromXYZ(sRGB.toXYZ(value))\n  lab[0] = lab[0] - amount * 10\n\n  return sRGB.fromXYZ(CIELAB.toXYZ(lab))\n}\n\n/**\n * Calculate the relative luminance of a given color\n * @see https://www.w3.org/TR/WCAG20/#relativeluminancedef\n */\nexport function getLuma (color: Color) {\n  const rgb = parseColor(color)\n\n  return sRGB.toXYZ(rgb)[1]\n}\n\n/**\n * Returns the contrast ratio (1-21) between two colors.\n * @see https://www.w3.org/TR/WCAG20/#contrast-ratiodef\n */\nexport function getContrast (first: Color, second: Color) {\n  const l1 = getLuma(first)\n  const l2 = getLuma(second)\n\n  const light = Math.max(l1, l2)\n  const dark = Math.min(l1, l2)\n\n  return (light + 0.05) / (dark + 0.05)\n}\n"]},"metadata":{},"sourceType":"module"}