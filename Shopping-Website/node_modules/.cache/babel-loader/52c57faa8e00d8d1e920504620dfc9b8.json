{"ast":null,"code":"// Utilities\nimport { computed, inject, provide, ref, unref } from 'vue';\nimport { mergeDeep } from \"../util/index.mjs\"; // Types\n\nexport const DefaultsSymbol = Symbol.for('vuetify:defaults');\nexport function createDefaults(options) {\n  return ref(options);\n}\nexport function useDefaults() {\n  const defaults = inject(DefaultsSymbol);\n  if (!defaults) throw new Error('[Vuetify] Could not find defaults instance');\n  return defaults;\n}\nexport function provideDefaults(defaults, options) {\n  const injectedDefaults = useDefaults();\n  const providedDefaults = ref(defaults);\n  const newDefaults = computed(() => {\n    const disabled = unref(options?.disabled);\n    if (disabled) return injectedDefaults.value;\n    const scoped = unref(options?.scoped);\n    const reset = unref(options?.reset);\n    const root = unref(options?.root);\n    let properties = mergeDeep(providedDefaults.value, {\n      prev: injectedDefaults.value\n    });\n    if (scoped) return properties;\n\n    if (reset || root) {\n      const len = Number(reset || Infinity);\n\n      for (let i = 0; i <= len; i++) {\n        if (!properties || !('prev' in properties)) {\n          break;\n        }\n\n        properties = properties.prev;\n      }\n\n      return properties;\n    }\n\n    return properties.prev ? mergeDeep(properties.prev, properties) : properties;\n  });\n  provide(DefaultsSymbol, newDefaults);\n  return newDefaults;\n}","map":{"version":3,"mappings":"AAAA;AACA,SAASA,QAAT,EAAmBC,MAAnB,EAA2BC,OAA3B,EAAoCC,GAApC,EAAyCC,KAAzC,QAAsD,KAAtD;AAA2D,SAClDC,SADkD,QACzC,mBADyC,C,CAG3D;;AAWA,OAAO,MAAMC,cAAmD,GAAGC,MAAM,CAACC,GAAPD,CAAW,kBAAXA,CAA5D;AAEP,OAAO,SAASE,cAAT,CAAyBC,OAAzB,EAA4E;EACjF,OAAOP,GAAG,CAACO,OAAD,CAAV;AACF;AAEA,OAAO,SAASC,WAAT,GAAwB;EAC7B,MAAMC,QAAQ,GAAGX,MAAM,CAACK,cAAD,CAAvB;EAEA,IAAI,CAACM,QAAL,EAAe,MAAM,IAAIC,KAAJ,CAAU,4CAAV,CAAN;EAEf,OAAOD,QAAP;AACF;AAEA,OAAO,SAASE,eAAT,CACLF,QADK,EAELF,OAFK,EAQL;EACA,MAAMK,gBAAgB,GAAGJ,WAAW,EAApC;EACA,MAAMK,gBAAgB,GAAGb,GAAG,CAACS,QAAD,CAA5B;EAEA,MAAMK,WAAW,GAAGjB,QAAQ,CAAC,MAAM;IACjC,MAAMkB,QAAQ,GAAGd,KAAK,CAACM,OAAO,EAAEQ,QAAV,CAAtB;IAEA,IAAIA,QAAJ,EAAc,OAAOH,gBAAgB,CAACI,KAAxB;IAEd,MAAMC,MAAM,GAAGhB,KAAK,CAACM,OAAO,EAAEU,MAAV,CAApB;IACA,MAAMC,KAAK,GAAGjB,KAAK,CAACM,OAAO,EAAEW,KAAV,CAAnB;IACA,MAAMC,IAAI,GAAGlB,KAAK,CAACM,OAAO,EAAEY,IAAV,CAAlB;IAEA,IAAIC,UAAU,GAAGlB,SAAS,CAACW,gBAAgB,CAACG,KAAlB,EAAyB;MAAEK,IAAI,EAAET,gBAAgB,CAACI;IAAzB,CAAzB,CAA1B;IAEA,IAAIC,MAAJ,EAAY,OAAOG,UAAP;;IAEZ,IAAIF,KAAK,IAAIC,IAAb,EAAmB;MACjB,MAAMG,GAAG,GAAGC,MAAM,CAACL,KAAK,IAAIM,QAAV,CAAlB;;MAEA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIH,GAArB,EAA0BG,CAAC,EAA3B,EAA+B;QAC7B,IAAI,CAACL,UAAD,IAAe,EAAE,UAAUA,UAAZ,CAAnB,EAA4C;UAC1C;QACF;;QAEAA,UAAU,GAAGA,UAAU,CAACC,IAAxBD;MACF;;MAEA,OAAOA,UAAP;IACF;;IAEA,OAAOA,UAAU,CAACC,IAAXD,GACHlB,SAAS,CAACkB,UAAU,CAACC,IAAZ,EAAkBD,UAAlB,CADNA,GAEHA,UAFJ;EAGD,CA9B2B,CAA5B;EAgCArB,OAAO,CAACI,cAAD,EAAiBW,WAAjB,CAAPf;EAEA,OAAOe,WAAP;AACF","names":["computed","inject","provide","ref","unref","mergeDeep","DefaultsSymbol","Symbol","for","createDefaults","options","useDefaults","defaults","Error","provideDefaults","injectedDefaults","providedDefaults","newDefaults","disabled","value","scoped","reset","root","properties","prev","len","Number","Infinity","i"],"sources":["../../src/composables/defaults.ts"],"sourcesContent":["// Utilities\nimport { computed, inject, provide, ref, unref } from 'vue'\nimport { mergeDeep } from '@/util'\n\n// Types\nimport type { ComputedRef, InjectionKey, Ref } from 'vue'\nimport type { MaybeRef } from '@/util'\n\nexport type DefaultsInstance = undefined | {\n  [key: string]: undefined | Record<string, unknown>\n  global?: Record<string, unknown>\n}\n\nexport type DefaultsOptions = Partial<DefaultsInstance>\n\nexport const DefaultsSymbol: InjectionKey<Ref<DefaultsInstance>> = Symbol.for('vuetify:defaults')\n\nexport function createDefaults (options?: DefaultsInstance): Ref<DefaultsInstance> {\n  return ref(options)\n}\n\nexport function useDefaults () {\n  const defaults = inject(DefaultsSymbol)\n\n  if (!defaults) throw new Error('[Vuetify] Could not find defaults instance')\n\n  return defaults\n}\n\nexport function provideDefaults (\n  defaults?: MaybeRef<DefaultsInstance | undefined>,\n  options?: {\n    disabled?: MaybeRef<boolean | undefined>\n    reset?: MaybeRef<number | string | undefined>\n    root?: MaybeRef<boolean | undefined>\n    scoped?: MaybeRef<boolean | undefined>\n  }\n) {\n  const injectedDefaults = useDefaults()\n  const providedDefaults = ref(defaults)\n\n  const newDefaults = computed(() => {\n    const disabled = unref(options?.disabled)\n\n    if (disabled) return injectedDefaults.value\n\n    const scoped = unref(options?.scoped)\n    const reset = unref(options?.reset)\n    const root = unref(options?.root)\n\n    let properties = mergeDeep(providedDefaults.value, { prev: injectedDefaults.value })\n\n    if (scoped) return properties\n\n    if (reset || root) {\n      const len = Number(reset || Infinity)\n\n      for (let i = 0; i <= len; i++) {\n        if (!properties || !('prev' in properties)) {\n          break\n        }\n\n        properties = properties.prev\n      }\n\n      return properties\n    }\n\n    return properties.prev\n      ? mergeDeep(properties.prev, properties)\n      : properties\n  }) as ComputedRef<DefaultsInstance>\n\n  provide(DefaultsSymbol, newDefaults)\n\n  return newDefaults\n}\n"]},"metadata":{},"sourceType":"module"}