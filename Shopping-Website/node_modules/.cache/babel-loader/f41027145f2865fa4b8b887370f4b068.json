{"ast":null,"code":"import { withDirectives as _withDirectives, vShow as _vShow, createVNode as _createVNode } from \"vue\"; // Components\n\nimport { VExpandTransition } from \"../transitions/index.mjs\";\nimport { VExpansionPanelSymbol } from \"./VExpansionPanels.mjs\"; // Composables\n\nimport { makeLazyProps, useLazy } from \"../../composables/lazy.mjs\"; // Utilities\n\nimport { inject } from 'vue';\nimport { genericComponent, useRender } from \"../../util/index.mjs\";\nexport const VExpansionPanelText = genericComponent()({\n  name: 'VExpansionPanelText',\n  props: { ...makeLazyProps()\n  },\n\n  setup(props, _ref) {\n    let {\n      slots\n    } = _ref;\n    const expansionPanel = inject(VExpansionPanelSymbol);\n    if (!expansionPanel) throw new Error('[Vuetify] v-expansion-panel-text needs to be placed inside v-expansion-panel');\n    const {\n      hasContent,\n      onAfterLeave\n    } = useLazy(props, expansionPanel.isSelected);\n    useRender(() => _createVNode(VExpandTransition, {\n      \"onAfterLeave\": onAfterLeave\n    }, {\n      default: () => [_withDirectives(_createVNode(\"div\", {\n        \"class\": \"v-expansion-panel-text\"\n      }, [slots.default && hasContent.value && _createVNode(\"div\", {\n        \"class\": \"v-expansion-panel-text__wrapper\"\n      }, [slots.default?.()])]), [[_vShow, expansionPanel.isSelected.value]])]\n    }));\n    return {};\n  }\n\n});","map":{"version":3,"mappings":"uGAAA;;AAAA,SACSA,iBADT,QAC0B,0BAD1B;AAC0B,SACjBC,qBADiB,QACI,wBADJ,C,CAG1B;;AAAA,SACSC,aADT,EACwBC,OADxB,QAC+B,4BAD/B,C,CAGA;;AACA,SAASC,MAAT,QAAuB,KAAvB;AAA4B,SACnBC,gBADmB,EACDC,SADC,QACQ,sBADR;AAG5B,OAAO,MAAMC,mBAAmB,GAAGF,gBAAgB,GAAG;EACpDG,IAAI,EAAE,qBAD8C;EAGpDC,KAAK,EAAE,EACL,GAAGP,aAAa;EADX,CAH6C;;EAOpDQ,KAAKA,CAAED,KAAFC,EAAOC,IAAPD,EAAoB;IAAA,IAAX;MAAEE;IAAF,IAASD,IAAE;IACvB,MAAME,cAAc,GAAGT,MAAM,CAACH,qBAAD,CAA7B;IAEA,IAAI,CAACY,cAAL,EAAqB,MAAM,IAAIC,KAAJ,CAAU,8EAAV,CAAN;IAErB,MAAM;MAAEC,UAAF;MAAcC;IAAd,IAA+Bb,OAAO,CAACM,KAAD,EAAQI,cAAc,CAACI,UAAvB,CAA5C;IAEAX,SAAS,CAAC;MAAA,gBAC0BU;IAD1B,GACsC;MAAAE;QAAA,SAEpC;MAFoC,GAEZ,CAG5BN,KAAK,CAACM,OAANN,IAAiBG,UAAU,CAACI,KAA5BP,IAAiCQ;QAAA,SACtB;MADsB,GACW,CACxCR,KAAK,CAACM,OAANN,IADwC,CADX,CAHL,CAFY,GASzC,UANQC,cAAc,CAACI,UAAfJ,CAA0BM,KAMlC,EATyC;IAAA,CADtC,CAAD,CAATb;IAeA,OAAO,EAAP;EACF;;AA9BoD,CAAH,CAA5C","names":["VExpandTransition","VExpansionPanelSymbol","makeLazyProps","useLazy","inject","genericComponent","useRender","VExpansionPanelText","name","props","setup","_ref","slots","expansionPanel","Error","hasContent","onAfterLeave","isSelected","default","value","_createVNode"],"sources":["../../../src/components/VExpansionPanel/VExpansionPanelText.tsx"],"sourcesContent":["// Components\nimport { VExpandTransition } from '@/components/transitions'\nimport { VExpansionPanelSymbol } from './VExpansionPanels'\n\n// Composables\nimport { makeLazyProps, useLazy } from '@/composables/lazy'\n\n// Utilities\nimport { inject } from 'vue'\nimport { genericComponent, useRender } from '@/util'\n\nexport const VExpansionPanelText = genericComponent()({\n  name: 'VExpansionPanelText',\n\n  props: {\n    ...makeLazyProps(),\n  },\n\n  setup (props, { slots }) {\n    const expansionPanel = inject(VExpansionPanelSymbol)\n\n    if (!expansionPanel) throw new Error('[Vuetify] v-expansion-panel-text needs to be placed inside v-expansion-panel')\n\n    const { hasContent, onAfterLeave } = useLazy(props, expansionPanel.isSelected)\n\n    useRender(() => (\n      <VExpandTransition onAfterLeave={ onAfterLeave }>\n        <div\n          class=\"v-expansion-panel-text\"\n          v-show={ expansionPanel.isSelected.value }\n        >\n          { slots.default && hasContent.value && (\n            <div class=\"v-expansion-panel-text__wrapper\">\n              { slots.default?.() }\n            </div>\n          )}\n        </div>\n      </VExpandTransition>\n    ))\n\n    return {}\n  },\n})\n\nexport type VExpansionPanelText = InstanceType<typeof VExpansionPanelText>\n"]},"metadata":{},"sourceType":"module"}