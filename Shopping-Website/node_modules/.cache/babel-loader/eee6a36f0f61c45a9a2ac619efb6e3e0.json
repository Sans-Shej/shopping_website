{"ast":null,"code":"import { mergeProps as _mergeProps, createVNode as _createVNode } from \"vue\"; // Styles\n\nimport \"./VColorPicker.css\"; // Components\n\nimport { makeVSheetProps, VSheet } from \"../VSheet/VSheet.mjs\";\nimport { VColorPickerCanvas } from \"./VColorPickerCanvas.mjs\";\nimport { VColorPickerEdit } from \"./VColorPickerEdit.mjs\";\nimport { VColorPickerPreview } from \"./VColorPickerPreview.mjs\";\nimport { VColorPickerSwatches } from \"./VColorPickerSwatches.mjs\"; // Composables\n\nimport { useProxiedModel } from \"../../composables/proxiedModel.mjs\";\nimport { provideDefaults } from \"../../composables/defaults.mjs\"; // Utilities\n\nimport { defineComponent, HSVtoCSS, omit, useRender } from \"../../util/index.mjs\";\nimport { extractColor, modes, nullColor, parseColor } from \"./util/index.mjs\";\nimport { onMounted, ref } from 'vue'; // Types\n\nexport const VColorPicker = defineComponent({\n  name: 'VColorPicker',\n  props: {\n    canvasHeight: {\n      type: [String, Number],\n      default: 150\n    },\n    disabled: Boolean,\n    dotSize: {\n      type: [Number, String],\n      default: 10\n    },\n    hideCanvas: Boolean,\n    hideSliders: Boolean,\n    hideInputs: Boolean,\n    mode: {\n      type: String,\n      default: 'rgba',\n      validator: v => Object.keys(modes).includes(v)\n    },\n    modes: {\n      type: Array,\n      default: () => Object.keys(modes),\n      validator: v => Array.isArray(v) && v.every(m => Object.keys(modes).includes(m))\n    },\n    showSwatches: Boolean,\n    swatches: Array,\n    swatchesMaxHeight: {\n      type: [Number, String],\n      default: 150\n    },\n    modelValue: {\n      type: [Object, String]\n    },\n    ...omit(makeVSheetProps({\n      width: 300\n    }), ['height', 'location', 'minHeight', 'maxHeight', 'minWidth', 'maxWidth'])\n  },\n  emits: {\n    'update:modelValue': color => true,\n    'update:mode': mode => true\n  },\n\n  setup(props) {\n    const mode = useProxiedModel(props, 'mode');\n    const lastPickedColor = ref(null);\n    const currentColor = useProxiedModel(props, 'modelValue', undefined, v => {\n      let c = parseColor(v);\n      if (!c) return null;\n\n      if (lastPickedColor.value) {\n        c = { ...c,\n          h: lastPickedColor.value.h\n        };\n        lastPickedColor.value = null;\n      }\n\n      return c;\n    }, v => {\n      if (!v) return null;\n      return extractColor(v, props.modelValue);\n    });\n\n    const updateColor = hsva => {\n      currentColor.value = hsva;\n      lastPickedColor.value = hsva;\n    };\n\n    onMounted(() => {\n      if (!props.modes.includes(mode.value)) mode.value = props.modes[0];\n    });\n    provideDefaults({\n      VSlider: {\n        color: undefined,\n        trackColor: undefined,\n        trackFillColor: undefined\n      }\n    });\n    useRender(() => {\n      const [sheetProps] = VSheet.filterProps(props);\n      return _createVNode(VSheet, _mergeProps({\n        \"rounded\": props.rounded,\n        \"elevation\": props.elevation,\n        \"theme\": props.theme,\n        \"class\": ['v-color-picker'],\n        \"style\": {\n          '--v-color-picker-color-hsv': HSVtoCSS({ ...(currentColor.value ?? nullColor),\n            a: 1\n          })\n        }\n      }, sheetProps, {\n        \"maxWidth\": props.width\n      }), {\n        default: () => [!props.hideCanvas && _createVNode(VColorPickerCanvas, {\n          \"key\": \"canvas\",\n          \"color\": currentColor.value,\n          \"onUpdate:color\": updateColor,\n          \"disabled\": props.disabled,\n          \"dotSize\": props.dotSize,\n          \"width\": props.width,\n          \"height\": props.canvasHeight\n        }, null), (!props.hideSliders || !props.hideInputs) && _createVNode(\"div\", {\n          \"key\": \"controls\",\n          \"class\": \"v-color-picker__controls\"\n        }, [!props.hideSliders && _createVNode(VColorPickerPreview, {\n          \"key\": \"preview\",\n          \"color\": currentColor.value,\n          \"onUpdate:color\": updateColor,\n          \"hideAlpha\": !mode.value.endsWith('a'),\n          \"disabled\": props.disabled\n        }, null), !props.hideInputs && _createVNode(VColorPickerEdit, {\n          \"key\": \"edit\",\n          \"modes\": props.modes,\n          \"mode\": mode.value,\n          \"onUpdate:mode\": m => mode.value = m,\n          \"color\": currentColor.value,\n          \"onUpdate:color\": updateColor,\n          \"disabled\": props.disabled\n        }, null)]), props.showSwatches && _createVNode(VColorPickerSwatches, {\n          \"key\": \"swatches\",\n          \"color\": currentColor.value,\n          \"onUpdate:color\": updateColor,\n          \"maxHeight\": props.swatchesMaxHeight,\n          \"swatches\": props.swatches,\n          \"disabled\": props.disabled\n        }, null)]\n      });\n    });\n    return {};\n  }\n\n});","map":{"version":3,"mappings":"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","names":["makeVSheetProps","VSheet","VColorPickerCanvas","VColorPickerEdit","VColorPickerPreview","VColorPickerSwatches","useProxiedModel","provideDefaults","defineComponent","HSVtoCSS","omit","useRender","extractColor","modes","nullColor","parseColor","onMounted","ref","VColorPicker","name","props","canvasHeight","type","String","Number","default","disabled","Boolean","dotSize","hideCanvas","hideSliders","hideInputs","mode","validator","v","Object","keys","includes","Array","isArray","every","m","showSwatches","swatches","swatchesMaxHeight","modelValue","width","emits","color","setup","lastPickedColor","currentColor","undefined","c","value","h","updateColor","hsva","VSlider","trackColor","trackFillColor","sheetProps","filterProps","rounded","elevation","theme","a","_createVNode","endsWith"],"sources":["../../../src/components/VColorPicker/VColorPicker.tsx"],"sourcesContent":["// Styles\nimport './VColorPicker.sass'\n\n// Components\nimport { makeVSheetProps, VSheet } from '@/components/VSheet/VSheet'\nimport { VColorPickerCanvas } from './VColorPickerCanvas'\nimport { VColorPickerEdit } from './VColorPickerEdit'\nimport { VColorPickerPreview } from './VColorPickerPreview'\nimport { VColorPickerSwatches } from './VColorPickerSwatches'\n\n// Composables\nimport { useProxiedModel } from '@/composables/proxiedModel'\nimport { provideDefaults } from '@/composables/defaults'\n\n// Utilities\nimport { defineComponent, HSVtoCSS, omit, useRender } from '@/util'\nimport { extractColor, modes, nullColor, parseColor } from './util'\nimport { onMounted, ref } from 'vue'\n\n// Types\nimport type { PropType } from 'vue'\nimport type { HSV } from '@/util'\n\nexport const VColorPicker = defineComponent({\n  name: 'VColorPicker',\n\n  props: {\n    canvasHeight: {\n      type: [String, Number],\n      default: 150,\n    },\n    disabled: Boolean,\n    dotSize: {\n      type: [Number, String],\n      default: 10,\n    },\n    hideCanvas: Boolean,\n    hideSliders: Boolean,\n    hideInputs: Boolean,\n    mode: {\n      type: String,\n      default: 'rgba',\n      validator: (v: string) => Object.keys(modes).includes(v),\n    },\n    modes: {\n      type: Array as PropType<string[]>,\n      default: () => Object.keys(modes),\n      validator: (v: any) => Array.isArray(v) && v.every(m => Object.keys(modes).includes(m)),\n    },\n    showSwatches: Boolean,\n    swatches: Array as PropType<string[][]>,\n    swatchesMaxHeight: {\n      type: [Number, String],\n      default: 150,\n    },\n    modelValue: {\n      type: [Object, String] as PropType<Record<string, unknown> | string | undefined | null>,\n    },\n\n    ...omit(makeVSheetProps({ width: 300 }), [\n      'height',\n      'location',\n      'minHeight',\n      'maxHeight',\n      'minWidth',\n      'maxWidth',\n    ]),\n  },\n\n  emits: {\n    'update:modelValue': (color: any) => true,\n    'update:mode': (mode: string) => true,\n  },\n\n  setup (props) {\n    const mode = useProxiedModel(props, 'mode')\n    const lastPickedColor = ref<HSV | null>(null)\n    const currentColor = useProxiedModel(\n      props,\n      'modelValue',\n      undefined,\n      v => {\n        let c = parseColor(v)\n\n        if (!c) return null\n\n        if (lastPickedColor.value) {\n          c = { ...c, h: lastPickedColor.value.h }\n          lastPickedColor.value = null\n        }\n\n        return c\n      },\n      v => {\n        if (!v) return null\n\n        return extractColor(v, props.modelValue)\n      }\n    )\n\n    const updateColor = (hsva: HSV) => {\n      currentColor.value = hsva\n      lastPickedColor.value = hsva\n    }\n\n    onMounted(() => {\n      if (!props.modes.includes(mode.value)) mode.value = props.modes[0]\n    })\n\n    provideDefaults({\n      VSlider: {\n        color: undefined,\n        trackColor: undefined,\n        trackFillColor: undefined,\n      },\n    })\n\n    useRender(() => {\n      const [sheetProps] = VSheet.filterProps(props)\n\n      return (\n        <VSheet\n          rounded={ props.rounded }\n          elevation={ props.elevation }\n          theme={ props.theme }\n          class={[\n            'v-color-picker',\n          ]}\n          style={{\n            '--v-color-picker-color-hsv': HSVtoCSS({ ...(currentColor.value ?? nullColor), a: 1 }),\n          }}\n          { ...sheetProps }\n          maxWidth={ props.width }\n        >\n          { !props.hideCanvas && (\n            <VColorPickerCanvas\n              key=\"canvas\"\n              color={ currentColor.value }\n              onUpdate:color={ updateColor }\n              disabled={ props.disabled }\n              dotSize={ props.dotSize }\n              width={ props.width }\n              height={ props.canvasHeight }\n            />\n          )}\n\n          { (!props.hideSliders || !props.hideInputs) && (\n            <div key=\"controls\" class=\"v-color-picker__controls\">\n              { !props.hideSliders && (\n                <VColorPickerPreview\n                  key=\"preview\"\n                  color={ currentColor.value }\n                  onUpdate:color={ updateColor }\n                  hideAlpha={ !mode.value.endsWith('a') }\n                  disabled={ props.disabled }\n                />\n              )}\n\n              { !props.hideInputs && (\n                <VColorPickerEdit\n                  key=\"edit\"\n                  modes={ props.modes }\n                  mode={ mode.value }\n                  onUpdate:mode={ m => mode.value = m }\n                  color={ currentColor.value }\n                  onUpdate:color={ updateColor }\n                  disabled={ props.disabled }\n                />\n              )}\n            </div>\n          )}\n\n          { props.showSwatches && (\n            <VColorPickerSwatches\n              key=\"swatches\"\n              color={ currentColor.value }\n              onUpdate:color={ updateColor }\n              maxHeight={ props.swatchesMaxHeight }\n              swatches={ props.swatches }\n              disabled={ props.disabled }\n            />\n          )}\n        </VSheet>\n      )\n    })\n\n    return {}\n  },\n})\n\nexport type VColorPicker = InstanceType<typeof VColorPicker>\n"]},"metadata":{},"sourceType":"module"}