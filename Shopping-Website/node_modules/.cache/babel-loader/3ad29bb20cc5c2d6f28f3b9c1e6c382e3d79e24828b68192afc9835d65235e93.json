{"ast":null,"code":"import { ref } from 'vue';\nimport { useField, useForm } from 'vee-validate';\nimport axios from 'axios';\nexport default {\n  setup() {\n    const {\n      handleSubmit,\n      handleReset\n    } = useForm({\n      validationSchema: {\n        name(value) {\n          if (value?.length >= 2) return true;\n          return 'Name needs to be at least 2 characters.';\n        },\n        phone(value) {\n          if (value?.length >= 2) return true;\n          return 'Phone number needs to be at least 2 Characters.';\n        },\n        email(value) {\n          if (/^[a-z.-]+@[a-z.-]+\\.[a-z]+$/i.test(value)) return true;\n          return 'Must be a valid e-mail.';\n        },\n        password(value) {\n          if (value?.length >= 8) return true;\n          return 'Must be a valid password.';\n        },\n        confirmpassword(value) {\n          if (password.value.value === value) return true;\n          return \"Passwords don't match.\";\n        },\n        select(value) {\n          if (value) return true;\n          return 'Select an item.';\n        },\n        checkbox(value) {\n          if (value === '1') return true;\n          return 'Must be checked.';\n        }\n      }\n    });\n    const name = useField('name');\n    const username = useField('name');\n    const phone = useField('phone');\n    const email = useField('email');\n    const password = useField('password');\n    const confirmpassword = useField('confirmpassword');\n    const select = useField('select');\n    const checkbox = useField('checkbox');\n    const submit = handleSubmit(values => {\n      alert(JSON.stringify(values, null, 2));\n    });\n    return {\n      name,\n      phone,\n      confirmpassword,\n      password,\n      username,\n      email,\n      select,\n      checkbox,\n      submit,\n      handleReset\n    };\n  },\n  methods: {\n    async init() {\n      this.signup = await axios.get('http://localhost:5000/api/users/register');\n    },\n    submit() {\n      router.post('/register', (req, res) => {\n        let {\n          name,\n          username,\n          email,\n          password,\n          confirm_password\n        } = req.body;\n        if (password !== confirm_password) {\n          return res.status(400).json({\n            msg: \"Passwords do not match.\"\n          });\n        }\n\n        // Check for unique username\n        User.findOne({\n          username: username\n        }).then(user => {\n          if (user) {\n            return res.status(400).json({\n              msg: \"Username is already taken.\"\n            });\n          }\n        });\n\n        // Check for unique email\n        User.findOne({\n          email: email\n        }).then(user => {\n          if (user) {\n            return res.status(400).json({\n              msg: \"Email is already registered. Did you forget your password?\"\n            });\n          }\n        });\n\n        // If no error, then data is valid and we can register the user\n        let newUser = new User({\n          name,\n          username,\n          password,\n          email\n        });\n\n        // Hash the password\n        bcrypt.genSalt(10, (err, salt) => {\n          bcrypt.hash(newUser.password, salt, (err, hash) => {\n            if (err) throw err;\n            newUser.password = hash;\n            newUser.save().then(user => {\n              return res.status(201).json({\n                msg: \"User is now registered!!!\"\n              });\n            });\n          });\n        });\n      });\n    }\n  }\n};","map":{"version":3,"names":["ref","useField","useForm","axios","setup","handleSubmit","handleReset","validationSchema","name","value","length","phone","email","test","password","confirmpassword","select","checkbox","username","submit","values","alert","JSON","stringify","methods","init","signup","get","router","post","req","res","confirm_password","body","status","json","msg","User","findOne","then","user","newUser","bcrypt","genSalt","err","salt","hash","save"],"sources":["C:\\Users\\Sans\\Downloads\\Shopping-Website\\Shopping-Website\\src\\views\\Signup.vue"],"sourcesContent":["<template>\r\n  <v-app>\r\n      <section>\r\n          <v-container class=\"center-screen\">\r\n              <v-card class=\"container-class\">\r\n\r\n                  <form @submit.prevent=\"submit\">\r\n                      <h2> Signup </h2>\r\n                      <v-text-field v-model=\"name.value.value\" :counter=\"30\" :error-messages=\"name.errorMessage.value\"\r\n                          label=\"Name\" class=\"textfield\"></v-text-field>\r\n\r\n                      <v-text-field v-model=\"phone.value.value\" :counter=\"10\" :error-messages=\"phone.errorMessage.value\"\r\n                          label=\"Username\"></v-text-field>\r\n\r\n                      <v-text-field v-model=\"email.value.value\" :error-messages=\"email.errorMessage.value\"\r\n                          label=\"E-mail\" class=\"form-control\"></v-text-field>\r\n\r\n                      <v-text-field type=\"password\" v-model=\"password.value.value\" :counter=\"32\"\r\n                          :error-messages=\"password.errorMessage.value\" label=\"Password\"></v-text-field>\r\n\r\n                      <v-text-field type=\"password\" v-model=\"confirmpassword.value.value\"\r\n                          :error-messages=\"confirmpassword.errorMessage.value\" label=\"Confirm Password\"></v-text-field>\r\n\r\n\r\n                      <v-btn class=\"me-4\" type=\"submit\">\r\n                          submit\r\n                      </v-btn>\r\n\r\n                      <v-btn @click=\"handleReset\">\r\n                          clear\r\n                      </v-btn>\r\n\r\n                  </form>\r\n              </v-card>\r\n          </v-container>\r\n      </section>\r\n  </v-app>\r\n</template>\r\n\r\n<script>\r\n\r\nimport { ref } from 'vue'\r\nimport { useField, useForm } from 'vee-validate'\r\nimport axios from 'axios'\r\n\r\nexport default {\r\n  setup() {\r\n      const { handleSubmit, handleReset } = useForm({\r\n          validationSchema: {\r\n              name(value) {\r\n                  if (value?.length >= 2) return true\r\n\r\n                  return 'Name needs to be at least 2 characters.'\r\n              },\r\n\r\n\r\n              phone(value) {\r\n                  if (value?.length >= 2) return true\r\n\r\n                  return 'Phone number needs to be at least 2 Characters.'\r\n              },\r\n              email(value) {\r\n                  if (/^[a-z.-]+@[a-z.-]+\\.[a-z]+$/i.test(value)) return true\r\n\r\n                  return 'Must be a valid e-mail.'\r\n              },\r\n              password(value) {\r\n                  if (value?.length >= 8) return true\r\n\r\n                  return 'Must be a valid password.'\r\n              },\r\n\r\n              confirmpassword(value) {\r\n                  if (password.value.value === value) return true\r\n                  return \"Passwords don't match.\"\r\n              },\r\n\r\n              select(value) {\r\n                  if (value) return true\r\n\r\n                  return 'Select an item.'\r\n              },\r\n              checkbox(value) {\r\n                  if (value === '1') return true\r\n\r\n                  return 'Must be checked.'\r\n              },\r\n          },\r\n      })\r\n      const name = useField('name')\r\n      const username = useField('name')\r\n      const phone = useField('phone')\r\n      const email = useField('email')\r\n      const password = useField('password')\r\n      const confirmpassword = useField('confirmpassword')\r\n      const select = useField('select')\r\n      const checkbox = useField('checkbox')\r\n\r\n\r\n\r\n      const submit = handleSubmit(values => {\r\n          alert(JSON.stringify(values, null, 2))\r\n      })\r\n\r\n\r\n      return { name, phone, confirmpassword, password, username, email, select, checkbox, submit, handleReset }\r\n  },\r\n  methods: {\r\n      async init() {\r\n          this.signup = await axios.get('http://localhost:5000/api/users/register')\r\n      },\r\n\r\n      submit() {\r\n          router.post('/register', (req, res) => {\r\n              let {\r\n                  name,\r\n                  username,\r\n                  email,\r\n                  password,\r\n                  confirm_password\r\n              } = req.body\r\n              if (password !== confirm_password) {\r\n                  return res.status(400).json({\r\n                      msg: \"Passwords do not match.\"\r\n                  });\r\n              }\r\n\r\n              // Check for unique username\r\n              User.findOne({\r\n                  username: username\r\n              }).then(user => {\r\n                  if (user) {\r\n                      return res.status(400).json({\r\n                          msg: \"Username is already taken.\"\r\n                      });\r\n                  }\r\n              })\r\n\r\n              // Check for unique email\r\n              User.findOne({ email: email }).then(user => {\r\n                  if (user) {\r\n                      return res.status(400).json({\r\n                          msg: \"Email is already registered. Did you forget your password?\"\r\n                      });\r\n                  }\r\n              });\r\n\r\n              // If no error, then data is valid and we can register the user\r\n              let newUser = new User({\r\n                  name,\r\n                  username,\r\n                  password,\r\n                  email\r\n              });\r\n\r\n              // Hash the password\r\n              bcrypt.genSalt(10, (err, salt) => {\r\n                  bcrypt.hash(newUser.password, salt, (err, hash) => {\r\n                      if (err) throw err;\r\n                      newUser.password = hash;\r\n                      newUser.save().then(user => {\r\n                          return res.status(201).json({\r\n                              msg: \"User is now registered!!!\"\r\n                          });\r\n                      });\r\n                  });\r\n              });\r\n          });\r\n      }\r\n  }\r\n\r\n\r\n}\r\n\r\n</script>\r\n\r\n<style scoped>\r\n.center-screen {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  text-align: center;\r\n  min-height: 100vh;\r\n}\r\n\r\nsection {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  padding-top: 30px;\r\n  min-height: 100vh;\r\n  width: 100%;\r\n  background-image: url(\"./public/background-image@2x.png\");\r\n  background-position: center;\r\n  background-size: cover;\r\n\r\n}\r\n\r\n.container-class {\r\n  position: relative;\r\n  width: 500px;\r\n  height: 500px;\r\n  background: transparent;\r\n  border: 2px solid rgba(255, 255, 255, 0.5);\r\n  border-radius: 20px;\r\n  backdrop-filter: blur(60px);\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\nh2 {\r\n  font-size: 2em;\r\n  color: #ffffff;\r\n  text-align: center;\r\n}\r\n\r\nform {\r\n  color: white;\r\n\r\n}\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}