{"ast":null,"code":"import { withDirectives as _withDirectives, mergeProps as _mergeProps, vShow as _vShow, createVNode as _createVNode } from \"vue\"; // Styles\n\nimport \"./VBadge.css\"; // Components\n\nimport { VIcon } from \"../VIcon/index.mjs\"; // Composables\n\nimport { IconValue } from \"../../composables/icons.mjs\";\nimport { makeLocationProps, useLocation } from \"../../composables/location.mjs\";\nimport { makeRoundedProps, useRounded } from \"../../composables/rounded.mjs\";\nimport { makeTagProps } from \"../../composables/tag.mjs\";\nimport { makeThemeProps, useTheme } from \"../../composables/theme.mjs\";\nimport { makeTransitionProps, MaybeTransition } from \"../../composables/transition.mjs\";\nimport { useBackgroundColor, useTextColor } from \"../../composables/color.mjs\";\nimport { useLocale } from \"../../composables/locale.mjs\"; // Utilities\n\nimport { genericComponent, pick, useRender } from \"../../util/index.mjs\";\nimport { toRef } from 'vue'; // Types\n\nexport const VBadge = genericComponent()({\n  name: 'VBadge',\n  inheritAttrs: false,\n  props: {\n    bordered: Boolean,\n    color: String,\n    content: [Number, String],\n    dot: Boolean,\n    floating: Boolean,\n    icon: IconValue,\n    inline: Boolean,\n    label: {\n      type: String,\n      default: '$vuetify.badge'\n    },\n    max: [Number, String],\n    modelValue: {\n      type: Boolean,\n      default: true\n    },\n    offsetX: [Number, String],\n    offsetY: [Number, String],\n    textColor: String,\n    ...makeLocationProps({\n      location: 'top end'\n    }),\n    ...makeRoundedProps(),\n    ...makeTagProps(),\n    ...makeThemeProps(),\n    ...makeTransitionProps({\n      transition: 'scale-rotate-transition'\n    })\n  },\n\n  setup(props, ctx) {\n    const {\n      backgroundColorClasses,\n      backgroundColorStyles\n    } = useBackgroundColor(toRef(props, 'color'));\n    const {\n      roundedClasses\n    } = useRounded(props);\n    const {\n      t\n    } = useLocale();\n    const {\n      textColorClasses,\n      textColorStyles\n    } = useTextColor(toRef(props, 'textColor'));\n    const {\n      themeClasses\n    } = useTheme();\n    const {\n      locationStyles\n    } = useLocation(props, true, side => {\n      const base = props.floating ? props.dot ? 2 : 4 : props.dot ? 8 : 12;\n      return base + (['top', 'bottom'].includes(side) ? +(props.offsetY ?? 0) : ['left', 'right'].includes(side) ? +(props.offsetX ?? 0) : 0);\n    });\n    useRender(() => {\n      const value = Number(props.content);\n      const content = !props.max || isNaN(value) ? props.content : value <= +props.max ? value : `${props.max}+`;\n      const [badgeAttrs, attrs] = pick(ctx.attrs, ['aria-atomic', 'aria-label', 'aria-live', 'role', 'title']);\n      return _createVNode(props.tag, _mergeProps({\n        \"class\": ['v-badge', {\n          'v-badge--bordered': props.bordered,\n          'v-badge--dot': props.dot,\n          'v-badge--floating': props.floating,\n          'v-badge--inline': props.inline\n        }]\n      }, attrs), {\n        default: () => [_createVNode(\"div\", {\n          \"class\": \"v-badge__wrapper\"\n        }, [ctx.slots.default?.(), _createVNode(MaybeTransition, {\n          \"transition\": props.transition\n        }, {\n          default: () => [_withDirectives(_createVNode(\"span\", _mergeProps({\n            \"class\": ['v-badge__badge', themeClasses.value, backgroundColorClasses.value, roundedClasses.value, textColorClasses.value],\n            \"style\": [backgroundColorStyles.value, textColorStyles.value, props.inline ? {} : locationStyles.value],\n            \"aria-atomic\": \"true\",\n            \"aria-label\": t(props.label, value),\n            \"aria-live\": \"polite\",\n            \"role\": \"status\"\n          }, badgeAttrs), [props.dot ? undefined : ctx.slots.badge ? ctx.slots.badge?.() : props.icon ? _createVNode(VIcon, {\n            \"icon\": props.icon\n          }, null) : content]), [[_vShow, props.modelValue]])]\n        })])]\n      });\n    });\n    return {};\n  }\n\n});","map":{"version":3,"mappings":"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","names":["VIcon","IconValue","makeLocationProps","useLocation","makeRoundedProps","useRounded","makeTagProps","makeThemeProps","useTheme","makeTransitionProps","MaybeTransition","useBackgroundColor","useTextColor","useLocale","genericComponent","pick","useRender","toRef","VBadge","name","inheritAttrs","props","bordered","Boolean","color","String","content","Number","dot","floating","icon","inline","label","type","default","max","modelValue","offsetX","offsetY","textColor","location","transition","setup","ctx","backgroundColorClasses","backgroundColorStyles","roundedClasses","t","textColorClasses","textColorStyles","themeClasses","locationStyles","side","base","includes","value","isNaN","badgeAttrs","attrs","slots","_createVNode","undefined","badge"],"sources":["../../../src/components/VBadge/VBadge.tsx"],"sourcesContent":["// Styles\nimport './VBadge.sass'\n\n// Components\nimport { VIcon } from '@/components/VIcon'\n\n// Composables\nimport { IconValue } from '@/composables/icons'\nimport { makeLocationProps, useLocation } from '@/composables/location'\nimport { makeRoundedProps, useRounded } from '@/composables/rounded'\nimport { makeTagProps } from '@/composables/tag'\nimport { makeThemeProps, useTheme } from '@/composables/theme'\nimport { makeTransitionProps, MaybeTransition } from '@/composables/transition'\nimport { useBackgroundColor, useTextColor } from '@/composables/color'\nimport { useLocale } from '@/composables/locale'\n\n// Utilities\nimport { genericComponent, pick, useRender } from '@/util'\nimport { toRef } from 'vue'\n\n// Types\nimport type { MakeSlots } from '@/util'\n\nexport type VBadgeSlots = MakeSlots<{\n  default: []\n  badge: []\n}>\n\nexport const VBadge = genericComponent<VBadgeSlots>()({\n  name: 'VBadge',\n\n  inheritAttrs: false,\n\n  props: {\n    bordered: Boolean,\n    color: String,\n    content: [Number, String],\n    dot: Boolean,\n    floating: Boolean,\n    icon: IconValue,\n    inline: Boolean,\n    label: {\n      type: String,\n      default: '$vuetify.badge',\n    },\n    max: [Number, String],\n    modelValue: {\n      type: Boolean,\n      default: true,\n    },\n    offsetX: [Number, String],\n    offsetY: [Number, String],\n    textColor: String,\n\n    ...makeLocationProps({ location: 'top end' } as const),\n    ...makeRoundedProps(),\n    ...makeTagProps(),\n    ...makeThemeProps(),\n    ...makeTransitionProps({ transition: 'scale-rotate-transition' }),\n  },\n\n  setup (props, ctx) {\n    const { backgroundColorClasses, backgroundColorStyles } = useBackgroundColor(toRef(props, 'color'))\n    const { roundedClasses } = useRounded(props)\n    const { t } = useLocale()\n    const { textColorClasses, textColorStyles } = useTextColor(toRef(props, 'textColor'))\n    const { themeClasses } = useTheme()\n\n    const { locationStyles } = useLocation(props, true, side => {\n      const base = props.floating\n        ? (props.dot ? 2 : 4)\n        : (props.dot ? 8 : 12)\n\n      return base + (\n        ['top', 'bottom'].includes(side) ? +(props.offsetY ?? 0)\n        : ['left', 'right'].includes(side) ? +(props.offsetX ?? 0)\n        : 0\n      )\n    })\n\n    useRender(() => {\n      const value = Number(props.content)\n      const content = (!props.max || isNaN(value)) ? props.content\n        : value <= +props.max ? value\n        : `${props.max}+`\n\n      const [badgeAttrs, attrs] = pick(ctx.attrs as Record<string, any>, [\n        'aria-atomic',\n        'aria-label',\n        'aria-live',\n        'role',\n        'title',\n      ])\n\n      return (\n        <props.tag\n          class={[\n            'v-badge',\n            {\n              'v-badge--bordered': props.bordered,\n              'v-badge--dot': props.dot,\n              'v-badge--floating': props.floating,\n              'v-badge--inline': props.inline,\n            },\n          ]}\n          { ...attrs }\n        >\n          <div class=\"v-badge__wrapper\">\n            { ctx.slots.default?.() }\n\n            <MaybeTransition transition={ props.transition }>\n              <span\n                v-show={ props.modelValue }\n                class={[\n                  'v-badge__badge',\n                  themeClasses.value,\n                  backgroundColorClasses.value,\n                  roundedClasses.value,\n                  textColorClasses.value,\n                ]}\n                style={[\n                  backgroundColorStyles.value,\n                  textColorStyles.value,\n                  props.inline ? {} : locationStyles.value,\n                ]}\n                aria-atomic=\"true\"\n                aria-label={ t(props.label, value) }\n                aria-live=\"polite\"\n                role=\"status\"\n                { ...badgeAttrs }\n              >\n                {\n                  props.dot ? undefined\n                  : ctx.slots.badge ? ctx.slots.badge?.()\n                  : props.icon ? <VIcon icon={ props.icon } />\n                  : content\n                }\n              </span>\n            </MaybeTransition>\n          </div>\n        </props.tag>\n      )\n    })\n\n    return {}\n  },\n})\n\nexport type VBadge = InstanceType<typeof VBadge>\n"]},"metadata":{},"sourceType":"module"}