{"ast":null,"code":"/* eslint-disable sonarjs/no-identical-functions */\nimport { toRaw } from 'vue';\nexport const independentSelectStrategy = mandatory => {\n  const strategy = {\n    select: _ref => {\n      let {\n        id,\n        value,\n        selected\n      } = _ref;\n      id = toRaw(id); // When mandatory and we're trying to deselect when id\n      // is the only currently selected item then do nothing\n\n      if (mandatory && !value) {\n        const on = Array.from(selected.entries()).reduce((arr, _ref2) => {\n          let [key, value] = _ref2;\n          return value === 'on' ? [...arr, key] : arr;\n        }, []);\n        if (on.length === 1 && on[0] === id) return selected;\n      }\n\n      selected.set(id, value ? 'on' : 'off');\n      return selected;\n    },\n    in: (v, children, parents) => {\n      let map = new Map();\n\n      for (const id of v || []) {\n        map = strategy.select({\n          id,\n          value: true,\n          selected: new Map(map),\n          children,\n          parents\n        });\n      }\n\n      return map;\n    },\n    out: v => {\n      const arr = [];\n\n      for (const [key, value] of v.entries()) {\n        if (value === 'on') arr.push(key);\n      }\n\n      return arr;\n    }\n  };\n  return strategy;\n};\nexport const independentSingleSelectStrategy = mandatory => {\n  const parentStrategy = independentSelectStrategy(mandatory);\n  const strategy = {\n    select: _ref3 => {\n      let {\n        selected,\n        id,\n        ...rest\n      } = _ref3;\n      id = toRaw(id);\n      const singleSelected = selected.has(id) ? new Map([[id, selected.get(id)]]) : new Map();\n      return parentStrategy.select({ ...rest,\n        id,\n        selected: singleSelected\n      });\n    },\n    in: (v, children, parents) => {\n      let map = new Map();\n\n      if (v?.length) {\n        map = parentStrategy.in(v.slice(0, 1), children, parents);\n      }\n\n      return map;\n    },\n    out: (v, children, parents) => {\n      return parentStrategy.out(v, children, parents);\n    }\n  };\n  return strategy;\n};\nexport const leafSelectStrategy = mandatory => {\n  const parentStrategy = independentSelectStrategy(mandatory);\n  const strategy = {\n    select: _ref4 => {\n      let {\n        id,\n        selected,\n        children,\n        ...rest\n      } = _ref4;\n      id = toRaw(id);\n      if (children.has(id)) return selected;\n      return parentStrategy.select({\n        id,\n        selected,\n        children,\n        ...rest\n      });\n    },\n    in: parentStrategy.in,\n    out: parentStrategy.out\n  };\n  return strategy;\n};\nexport const leafSingleSelectStrategy = mandatory => {\n  const parentStrategy = independentSingleSelectStrategy(mandatory);\n  const strategy = {\n    select: _ref5 => {\n      let {\n        id,\n        selected,\n        children,\n        ...rest\n      } = _ref5;\n      id = toRaw(id);\n      if (children.has(id)) return selected;\n      return parentStrategy.select({\n        id,\n        selected,\n        children,\n        ...rest\n      });\n    },\n    in: parentStrategy.in,\n    out: parentStrategy.out\n  };\n  return strategy;\n};\nexport const classicSelectStrategy = mandatory => {\n  const strategy = {\n    select: _ref6 => {\n      let {\n        id,\n        value,\n        selected,\n        children,\n        parents\n      } = _ref6;\n      id = toRaw(id);\n      const original = new Map(selected);\n      const items = [id];\n\n      while (items.length) {\n        const item = items.shift();\n        selected.set(item, value ? 'on' : 'off');\n\n        if (children.has(item)) {\n          items.push(...children.get(item));\n        }\n      }\n\n      let parent = parents.get(id);\n\n      while (parent) {\n        const childrenIds = children.get(parent);\n        const everySelected = childrenIds.every(cid => selected.get(cid) === 'on');\n        const noneSelected = childrenIds.every(cid => !selected.has(cid) || selected.get(cid) === 'off');\n        selected.set(parent, everySelected ? 'on' : noneSelected ? 'off' : 'indeterminate');\n        parent = parents.get(parent);\n      } // If mandatory and planned deselect results in no selected\n      // items then we can't do it, so return original state\n\n\n      if (mandatory && !value) {\n        const on = Array.from(selected.entries()).reduce((arr, _ref7) => {\n          let [key, value] = _ref7;\n          return value === 'on' ? [...arr, key] : arr;\n        }, []);\n        if (on.length === 0) return original;\n      }\n\n      return selected;\n    },\n    in: (v, children, parents) => {\n      let map = new Map();\n\n      for (const id of v || []) {\n        map = strategy.select({\n          id,\n          value: true,\n          selected: new Map(map),\n          children,\n          parents\n        });\n      }\n\n      return map;\n    },\n    out: (v, children) => {\n      const arr = [];\n\n      for (const [key, value] of v.entries()) {\n        if (value === 'on' && !children.has(key)) arr.push(key);\n      }\n\n      return arr;\n    }\n  };\n  return strategy;\n};","map":{"version":3,"mappings":"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","names":["toRaw","independentSelectStrategy","mandatory","strategy","select","_ref","id","value","selected","on","Array","from","entries","reduce","arr","_ref2","key","length","set","in","v","children","parents","map","Map","out","push","independentSingleSelectStrategy","parentStrategy","_ref3","rest","singleSelected","has","get","slice","leafSelectStrategy","_ref4","leafSingleSelectStrategy","_ref5","classicSelectStrategy","_ref6","original","items","item","shift","parent","childrenIds","everySelected","every","cid","noneSelected","_ref7"],"sources":["../../../src/composables/nested/selectStrategies.ts"],"sourcesContent":["/* eslint-disable sonarjs/no-identical-functions */\nimport { toRaw } from 'vue'\n\nexport type SelectStrategyFn = (data: {\n  id: unknown\n  value: boolean\n  selected: Map<unknown, 'on' | 'off' | 'indeterminate'>\n  children: Map<unknown, unknown[]>\n  parents: Map<unknown, unknown>\n  event?: Event\n}) => Map<unknown, 'on' | 'off' | 'indeterminate'>\n\nexport type SelectStrategyTransformInFn = (\n  v: unknown[] | undefined,\n  children: Map<unknown, unknown[]>,\n  parents: Map<unknown, unknown>,\n) => Map<unknown, 'on' | 'off' | 'indeterminate'>\n\nexport type SelectStrategyTransformOutFn = (\n  v: Map<unknown, 'on' | 'off' | 'indeterminate'>,\n  children: Map<unknown, unknown[]>,\n  parents: Map<unknown, unknown>,\n) => unknown[]\n\nexport type SelectStrategy = {\n  select: SelectStrategyFn\n  in: SelectStrategyTransformInFn\n  out: SelectStrategyTransformOutFn\n}\n\nexport const independentSelectStrategy = (mandatory?: boolean): SelectStrategy => {\n  const strategy: SelectStrategy = {\n    select: ({ id, value, selected }) => {\n      id = toRaw(id)\n\n      // When mandatory and we're trying to deselect when id\n      // is the only currently selected item then do nothing\n      if (mandatory && !value) {\n        const on = Array.from(selected.entries()).reduce((arr, [key, value]) => value === 'on' ? [...arr, key] : arr, [] as unknown[])\n        if (on.length === 1 && on[0] === id) return selected\n      }\n\n      selected.set(id, value ? 'on' : 'off')\n\n      return selected\n    },\n    in: (v, children, parents) => {\n      let map = new Map()\n\n      for (const id of (v || [])) {\n        map = strategy.select({\n          id,\n          value: true,\n          selected: new Map(map),\n          children,\n          parents,\n        })\n      }\n\n      return map\n    },\n    out: v => {\n      const arr = []\n\n      for (const [key, value] of v.entries()) {\n        if (value === 'on') arr.push(key)\n      }\n\n      return arr\n    },\n  }\n\n  return strategy\n}\n\nexport const independentSingleSelectStrategy = (mandatory?: boolean): SelectStrategy => {\n  const parentStrategy = independentSelectStrategy(mandatory)\n\n  const strategy: SelectStrategy = {\n    select: ({ selected, id, ...rest }) => {\n      id = toRaw(id)\n      const singleSelected = selected.has(id) ? new Map([[id, selected.get(id)!]]) : new Map()\n      return parentStrategy.select({ ...rest, id, selected: singleSelected })\n    },\n    in: (v, children, parents) => {\n      let map = new Map()\n\n      if (v?.length) {\n        map = parentStrategy.in(v.slice(0, 1), children, parents)\n      }\n\n      return map\n    },\n    out: (v, children, parents) => {\n      return parentStrategy.out(v, children, parents)\n    },\n  }\n\n  return strategy\n}\n\nexport const leafSelectStrategy = (mandatory?: boolean): SelectStrategy => {\n  const parentStrategy = independentSelectStrategy(mandatory)\n\n  const strategy: SelectStrategy = {\n    select: ({ id, selected, children, ...rest }) => {\n      id = toRaw(id)\n      if (children.has(id)) return selected\n\n      return parentStrategy.select({ id, selected, children, ...rest })\n    },\n    in: parentStrategy.in,\n    out: parentStrategy.out,\n  }\n\n  return strategy\n}\n\nexport const leafSingleSelectStrategy = (mandatory?: boolean): SelectStrategy => {\n  const parentStrategy = independentSingleSelectStrategy(mandatory)\n\n  const strategy: SelectStrategy = {\n    select: ({ id, selected, children, ...rest }) => {\n      id = toRaw(id)\n      if (children.has(id)) return selected\n\n      return parentStrategy.select({ id, selected, children, ...rest })\n    },\n    in: parentStrategy.in,\n    out: parentStrategy.out,\n  }\n\n  return strategy\n}\n\nexport const classicSelectStrategy = (mandatory?: boolean): SelectStrategy => {\n  const strategy: SelectStrategy = {\n    select: ({ id, value, selected, children, parents }) => {\n      id = toRaw(id)\n      const original = new Map(selected)\n\n      const items = [id]\n\n      while (items.length) {\n        const item = items.shift()!\n\n        selected.set(item, value ? 'on' : 'off')\n\n        if (children.has(item)) {\n          items.push(...children.get(item)!)\n        }\n      }\n\n      let parent = parents.get(id)\n\n      while (parent) {\n        const childrenIds = children.get(parent)!\n        const everySelected = childrenIds.every(cid => selected.get(cid) === 'on')\n        const noneSelected = childrenIds.every(cid => !selected.has(cid) || selected.get(cid) === 'off')\n\n        selected.set(parent, everySelected ? 'on' : noneSelected ? 'off' : 'indeterminate')\n\n        parent = parents.get(parent)\n      }\n\n      // If mandatory and planned deselect results in no selected\n      // items then we can't do it, so return original state\n      if (mandatory && !value) {\n        const on = Array.from(selected.entries()).reduce((arr, [key, value]) => value === 'on' ? [...arr, key] : arr, [] as unknown[])\n        if (on.length === 0) return original\n      }\n\n      return selected\n    },\n    in: (v, children, parents) => {\n      let map = new Map()\n\n      for (const id of (v || [])) {\n        map = strategy.select({\n          id,\n          value: true,\n          selected: new Map(map),\n          children,\n          parents,\n        })\n      }\n\n      return map\n    },\n    out: (v, children) => {\n      const arr = []\n\n      for (const [key, value] of v.entries()) {\n        if (value === 'on' && !children.has(key)) arr.push(key)\n      }\n\n      return arr\n    },\n  }\n\n  return strategy\n}\n"]},"metadata":{},"sourceType":"module"}