{"ast":null,"code":"import { createTextVNode as _createTextVNode, mergeProps as _mergeProps, createVNode as _createVNode, Fragment as _Fragment } from \"vue\"; // Styles\n\nimport \"./VSelect.css\"; // Components\n\nimport { makeVTextFieldProps } from \"../VTextField/VTextField.mjs\";\nimport { VCheckboxBtn } from \"../VCheckbox/index.mjs\";\nimport { VChip } from \"../VChip/index.mjs\";\nimport { VDefaultsProvider } from \"../VDefaultsProvider/index.mjs\";\nimport { VDialogTransition } from \"../transitions/index.mjs\";\nimport { VList, VListItem } from \"../VList/index.mjs\";\nimport { VMenu } from \"../VMenu/index.mjs\";\nimport { VTextField } from \"../VTextField/index.mjs\"; // Composables\n\nimport { forwardRefs } from \"../../composables/forwardRefs.mjs\";\nimport { IconValue } from \"../../composables/icons.mjs\";\nimport { makeItemsProps, useItems } from \"../../composables/items.mjs\";\nimport { makeTransitionProps } from \"../../composables/transition.mjs\";\nimport { useForm } from \"../../composables/form.mjs\";\nimport { useLocale } from \"../../composables/locale.mjs\";\nimport { useProxiedModel } from \"../../composables/proxiedModel.mjs\"; // Utility\n\nimport { computed, mergeProps, ref } from 'vue';\nimport { deepEqual, genericComponent, omit, propsFactory, useRender, wrapInArray } from \"../../util/index.mjs\"; // Types\n\nexport const makeSelectProps = propsFactory({\n  chips: Boolean,\n  closableChips: Boolean,\n  eager: Boolean,\n  hideNoData: Boolean,\n  hideSelected: Boolean,\n  menu: Boolean,\n  menuIcon: {\n    type: IconValue,\n    default: '$dropdown'\n  },\n  menuProps: {\n    type: Object\n  },\n  multiple: Boolean,\n  noDataText: {\n    type: String,\n    default: '$vuetify.noDataText'\n  },\n  openOnClear: Boolean,\n  valueComparator: {\n    type: Function,\n    default: deepEqual\n  },\n  ...makeItemsProps({\n    itemChildren: false\n  })\n}, 'v-select');\nexport const VSelect = genericComponent()({\n  name: 'VSelect',\n  props: { ...makeSelectProps(),\n    ...omit(makeVTextFieldProps({\n      modelValue: null\n    }), ['validationValue', 'dirty', 'appendInnerIcon']),\n    ...makeTransitionProps({\n      transition: {\n        component: VDialogTransition\n      }\n    })\n  },\n  emits: {\n    'update:focused': focused => true,\n    'update:modelValue': val => true,\n    'update:menu': val => true\n  },\n\n  setup(props, _ref) {\n    let {\n      slots\n    } = _ref;\n    const {\n      t\n    } = useLocale();\n    const vTextFieldRef = ref();\n    const vMenuRef = ref();\n\n    const _menu = useProxiedModel(props, 'menu');\n\n    const menu = computed({\n      get: () => _menu.value,\n      set: v => {\n        if (_menu.value && !v && vMenuRef.value?.Î¨openChildren) return;\n        _menu.value = v;\n      }\n    });\n    const {\n      items,\n      transformIn,\n      transformOut\n    } = useItems(props);\n    const model = useProxiedModel(props, 'modelValue', [], v => transformIn(wrapInArray(v)), v => {\n      const transformed = transformOut(v);\n      return props.multiple ? transformed : transformed[0] ?? null;\n    });\n    const form = useForm();\n    const selections = computed(() => {\n      return model.value.map(v => {\n        return items.value.find(item => props.valueComparator(item.value, v.value)) || v;\n      });\n    });\n    const selected = computed(() => selections.value.map(selection => selection.props.value));\n    const isFocused = ref(false);\n    let keyboardLookupPrefix = '';\n    let keyboardLookupLastTime;\n    const displayItems = computed(() => {\n      if (props.hideSelected) {\n        return items.value.filter(item => !selections.value.some(s => s === item));\n      }\n\n      return items.value;\n    });\n    const listRef = ref();\n\n    function onClear(e) {\n      if (props.openOnClear) {\n        menu.value = true;\n      }\n    }\n\n    function onMousedownControl() {\n      if (props.hideNoData && !items.value.length || props.readonly || form?.isReadonly.value) return;\n      menu.value = !menu.value;\n    }\n\n    function onKeydown(e) {\n      if (props.readonly || form?.isReadonly.value) return;\n\n      if (['Enter', ' ', 'ArrowDown', 'ArrowUp', 'Home', 'End'].includes(e.key)) {\n        e.preventDefault();\n      }\n\n      if (['Enter', 'ArrowDown', ' '].includes(e.key)) {\n        menu.value = true;\n      }\n\n      if (['Escape', 'Tab'].includes(e.key)) {\n        menu.value = false;\n      }\n\n      if (e.key === 'ArrowDown') {\n        listRef.value?.focus('next');\n      } else if (e.key === 'ArrowUp') {\n        listRef.value?.focus('prev');\n      } else if (e.key === 'Home') {\n        listRef.value?.focus('first');\n      } else if (e.key === 'End') {\n        listRef.value?.focus('last');\n      } // html select hotkeys\n\n\n      const KEYBOARD_LOOKUP_THRESHOLD = 1000; // milliseconds\n\n      function checkPrintable(e) {\n        const isPrintableChar = e.key.length === 1;\n        const noModifier = !e.ctrlKey && !e.metaKey && !e.altKey;\n        return isPrintableChar && noModifier;\n      }\n\n      if (props.multiple || !checkPrintable(e)) return;\n      const now = performance.now();\n\n      if (now - keyboardLookupLastTime > KEYBOARD_LOOKUP_THRESHOLD) {\n        keyboardLookupPrefix = '';\n      }\n\n      keyboardLookupPrefix += e.key.toLowerCase();\n      keyboardLookupLastTime = now;\n      const item = items.value.find(item => item.title.toLowerCase().startsWith(keyboardLookupPrefix));\n\n      if (item !== undefined) {\n        model.value = [item];\n      }\n    }\n\n    function select(item) {\n      if (props.multiple) {\n        const index = selected.value.findIndex(selection => props.valueComparator(selection, item.value));\n\n        if (index === -1) {\n          model.value = [...model.value, item];\n        } else {\n          const value = [...model.value];\n          value.splice(index, 1);\n          model.value = value;\n        }\n      } else {\n        model.value = [item];\n        menu.value = false;\n      }\n    }\n\n    function onBlur(e) {\n      if (!listRef.value?.$el.contains(e.relatedTarget)) {\n        menu.value = false;\n      }\n    }\n\n    function onFocusin(e) {\n      isFocused.value = true;\n    }\n\n    function onFocusout(e) {\n      if (e.relatedTarget == null) {\n        vTextFieldRef.value?.focus();\n      }\n    }\n\n    useRender(() => {\n      const hasChips = !!(props.chips || slots.chip);\n      const hasList = !!(!props.hideNoData || displayItems.value.length || slots.prepend || slots.append || slots['no-data']);\n      const isDirty = model.value.length > 0;\n      const [textFieldProps] = VTextField.filterProps(props);\n      const placeholder = isDirty || !isFocused.value && props.label && !props.persistentPlaceholder ? undefined : props.placeholder;\n      return _createVNode(VTextField, _mergeProps({\n        \"ref\": vTextFieldRef\n      }, textFieldProps, {\n        \"modelValue\": model.value.map(v => v.props.value).join(', '),\n        \"onUpdate:modelValue\": v => {\n          if (v == null) model.value = [];\n        },\n        \"focused\": isFocused.value,\n        \"onUpdate:focused\": $event => isFocused.value = $event,\n        \"validationValue\": model.externalValue,\n        \"dirty\": isDirty,\n        \"class\": ['v-select', {\n          'v-select--active-menu': menu.value,\n          'v-select--chips': !!props.chips,\n          [`v-select--${props.multiple ? 'multiple' : 'single'}`]: true,\n          'v-select--selected': model.value.length\n        }],\n        \"appendInnerIcon\": props.menuIcon,\n        \"readonly\": true,\n        \"placeholder\": placeholder,\n        \"onClick:clear\": onClear,\n        \"onMousedown:control\": onMousedownControl,\n        \"onBlur\": onBlur,\n        \"onKeydown\": onKeydown\n      }), { ...slots,\n        default: () => _createVNode(_Fragment, null, [_createVNode(VMenu, _mergeProps({\n          \"ref\": vMenuRef,\n          \"modelValue\": menu.value,\n          \"onUpdate:modelValue\": $event => menu.value = $event,\n          \"activator\": \"parent\",\n          \"contentClass\": \"v-select__content\",\n          \"eager\": props.eager,\n          \"maxHeight\": 310,\n          \"openOnClick\": false,\n          \"closeOnContentClick\": false,\n          \"transition\": props.transition\n        }, props.menuProps), {\n          default: () => [hasList && _createVNode(VList, {\n            \"ref\": listRef,\n            \"selected\": selected.value,\n            \"selectStrategy\": props.multiple ? 'independent' : 'single-independent',\n            \"onMousedown\": e => e.preventDefault(),\n            \"onFocusin\": onFocusin,\n            \"onFocusout\": onFocusout\n          }, {\n            default: () => [!displayItems.value.length && !props.hideNoData && (slots['no-data']?.() ?? _createVNode(VListItem, {\n              \"title\": t(props.noDataText)\n            }, null)), slots['prepend-item']?.(), displayItems.value.map((item, index) => {\n              if (slots.item) {\n                return slots.item?.({\n                  item,\n                  index,\n                  props: mergeProps(item.props, {\n                    onClick: () => select(item)\n                  })\n                });\n              }\n\n              return _createVNode(VListItem, _mergeProps({\n                \"key\": index\n              }, item.props, {\n                \"onClick\": () => select(item)\n              }), {\n                prepend: _ref2 => {\n                  let {\n                    isSelected\n                  } = _ref2;\n                  return props.multiple && !props.hideSelected ? _createVNode(VCheckboxBtn, {\n                    \"modelValue\": isSelected,\n                    \"ripple\": false,\n                    \"tabindex\": \"-1\"\n                  }, null) : undefined;\n                }\n              });\n            }), slots['append-item']?.()]\n          })]\n        }), selections.value.map((item, index) => {\n          function onChipClose(e) {\n            e.stopPropagation();\n            e.preventDefault();\n            select(item);\n          }\n\n          const slotProps = {\n            'onClick:close': onChipClose,\n            modelValue: true,\n            'onUpdate:modelValue': undefined\n          };\n          return _createVNode(\"div\", {\n            \"key\": item.value,\n            \"class\": \"v-select__selection\"\n          }, [hasChips ? !slots.chip ? _createVNode(VChip, _mergeProps({\n            \"key\": \"chip\",\n            \"closable\": props.closableChips,\n            \"size\": \"small\",\n            \"text\": item.title\n          }, slotProps), null) : _createVNode(VDefaultsProvider, {\n            \"key\": \"chip-defaults\",\n            \"defaults\": {\n              VChip: {\n                closable: props.closableChips,\n                size: 'small',\n                text: item.title\n              }\n            }\n          }, {\n            default: () => [slots.chip?.({\n              item,\n              index,\n              props: slotProps\n            })]\n          }) : slots.selection?.({\n            item,\n            index\n          }) ?? _createVNode(\"span\", {\n            \"class\": \"v-select__selection-text\"\n          }, [item.title, props.multiple && index < selections.value.length - 1 && _createVNode(\"span\", {\n            \"class\": \"v-select__selection-comma\"\n          }, [_createTextVNode(\",\")])])]);\n        })])\n      });\n    });\n    return forwardRefs({\n      isFocused,\n      menu,\n      select\n    }, vTextFieldRef);\n  }\n\n});","map":{"version":3,"mappings":"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","names":["makeVTextFieldProps","VCheckboxBtn","VChip","VDefaultsProvider","VDialogTransition","VList","VListItem","VMenu","VTextField","forwardRefs","IconValue","makeItemsProps","useItems","makeTransitionProps","useForm","useLocale","useProxiedModel","computed","mergeProps","ref","deepEqual","genericComponent","omit","propsFactory","useRender","wrapInArray","makeSelectProps","chips","Boolean","closableChips","eager","hideNoData","hideSelected","menu","menuIcon","type","default","menuProps","Object","multiple","noDataText","String","openOnClear","valueComparator","Function","itemChildren","VSelect","name","props","modelValue","transition","component","emits","focused","val","setup","_ref","slots","t","vTextFieldRef","vMenuRef","_menu","get","value","set","v","Î¨openChildren","items","transformIn","transformOut","model","transformed","form","selections","map","find","item","selected","selection","isFocused","keyboardLookupPrefix","keyboardLookupLastTime","displayItems","filter","some","s","listRef","onClear","e","onMousedownControl","length","readonly","isReadonly","onKeydown","includes","key","preventDefault","focus","KEYBOARD_LOOKUP_THRESHOLD","checkPrintable","isPrintableChar","noModifier","ctrlKey","metaKey","altKey","now","performance","toLowerCase","title","startsWith","undefined","select","index","findIndex","splice","onBlur","$el","contains","relatedTarget","onFocusin","onFocusout","hasChips","chip","hasList","prepend","append","isDirty","textFieldProps","filterProps","placeholder","label","persistentPlaceholder","join","$event","externalValue","_createVNode","onClick","_ref2","isSelected","onChipClose","stopPropagation","slotProps","closable","size","text"],"sources":["../../../src/components/VSelect/VSelect.tsx"],"sourcesContent":["// Styles\nimport './VSelect.sass'\n\n// Components\nimport { makeVTextFieldProps } from '@/components/VTextField/VTextField'\nimport { VCheckboxBtn } from '@/components/VCheckbox'\nimport { VChip } from '@/components/VChip'\nimport { VDefaultsProvider } from '@/components/VDefaultsProvider'\nimport { VDialogTransition } from '@/components/transitions'\nimport { VList, VListItem } from '@/components/VList'\nimport { VMenu } from '@/components/VMenu'\nimport { VTextField } from '@/components/VTextField'\n\n// Composables\nimport { forwardRefs } from '@/composables/forwardRefs'\nimport { IconValue } from '@/composables/icons'\nimport { makeItemsProps, useItems } from '@/composables/items'\nimport { makeTransitionProps } from '@/composables/transition'\nimport { useForm } from '@/composables/form'\nimport { useLocale } from '@/composables/locale'\nimport { useProxiedModel } from '@/composables/proxiedModel'\n\n// Utility\nimport { computed, mergeProps, ref } from 'vue'\nimport { deepEqual, genericComponent, omit, propsFactory, useRender, wrapInArray } from '@/util'\n\n// Types\nimport type { VInputSlots } from '@/components/VInput/VInput'\nimport type { VFieldSlots } from '@/components/VField/VField'\nimport type { InternalItem } from '@/composables/items'\nimport type { MakeSlots, SlotsToProps } from '@/util'\nimport type { PropType } from 'vue'\n\nexport const makeSelectProps = propsFactory({\n  chips: Boolean,\n  closableChips: Boolean,\n  eager: Boolean,\n  hideNoData: Boolean,\n  hideSelected: Boolean,\n  menu: Boolean,\n  menuIcon: {\n    type: IconValue,\n    default: '$dropdown',\n  },\n  menuProps: {\n    type: Object as PropType<VMenu['$props']>,\n  },\n  multiple: Boolean,\n  noDataText: {\n    type: String,\n    default: '$vuetify.noDataText',\n  },\n  openOnClear: Boolean,\n  valueComparator: {\n    type: Function as PropType<typeof deepEqual>,\n    default: deepEqual,\n  },\n\n  ...makeItemsProps({ itemChildren: false }),\n}, 'v-select')\n\ntype Primitive = string | number | boolean | symbol\n\ntype Val <T, ReturnObject extends boolean> = T extends Primitive\n  ? T\n  : (ReturnObject extends true ? T : any)\n\ntype Value <T, ReturnObject extends boolean, Multiple extends boolean> =\n  Multiple extends true\n    ? readonly Val<T, ReturnObject>[]\n    : Val<T, ReturnObject>\n\nexport const VSelect = genericComponent<new <\n  T,\n  ReturnObject extends boolean = false,\n  Multiple extends boolean = false,\n  V extends Value<T, ReturnObject, Multiple> = Value<T, ReturnObject, Multiple>\n>() => {\n  $props: {\n    items?: readonly T[]\n    returnObject?: ReturnObject\n    multiple?: Multiple\n    modelValue?: V\n    'onUpdate:modelValue'?: (val: V) => void\n  } & SlotsToProps<\n    Omit<VInputSlots & VFieldSlots, 'default'> & MakeSlots<{\n      item: [{ item: InternalItem<T>, index: number, props: Record<string, unknown> }]\n      chip: [{ item: InternalItem<T>, index: number, props: Record<string, unknown> }]\n      selection: [{ item: InternalItem<T>, index: number }]\n      'prepend-item': []\n      'append-item': []\n      'no-data': []\n    }>\n  >\n}>()({\n  name: 'VSelect',\n\n  props: {\n    ...makeSelectProps(),\n    ...omit(makeVTextFieldProps({\n      modelValue: null,\n    }), ['validationValue', 'dirty', 'appendInnerIcon']),\n    ...makeTransitionProps({ transition: { component: VDialogTransition } }),\n  },\n\n  emits: {\n    'update:focused': (focused: boolean) => true,\n    'update:modelValue': (val: any) => true,\n    'update:menu': (val: boolean) => true,\n  },\n\n  setup (props, { slots }) {\n    const { t } = useLocale()\n    const vTextFieldRef = ref()\n    const vMenuRef = ref<VMenu>()\n    const _menu = useProxiedModel(props, 'menu')\n    const menu = computed({\n      get: () => _menu.value,\n      set: v => {\n        if (_menu.value && !v && vMenuRef.value?.Î¨openChildren) return\n        _menu.value = v\n      },\n    })\n    const { items, transformIn, transformOut } = useItems(props)\n    const model = useProxiedModel(\n      props,\n      'modelValue',\n      [],\n      v => transformIn(wrapInArray(v)),\n      v => {\n        const transformed = transformOut(v)\n        return props.multiple ? transformed : (transformed[0] ?? null)\n      }\n    )\n    const form = useForm()\n    const selections = computed(() => {\n      return model.value.map(v => {\n        return items.value.find(item => props.valueComparator(item.value, v.value)) || v\n      })\n    })\n    const selected = computed(() => selections.value.map(selection => selection.props.value))\n    const isFocused = ref(false)\n\n    let keyboardLookupPrefix = ''\n    let keyboardLookupLastTime: number\n\n    const displayItems = computed(() => {\n      if (props.hideSelected) {\n        return items.value.filter(item => !selections.value.some(s => s === item))\n      }\n      return items.value\n    })\n\n    const listRef = ref<VList>()\n\n    function onClear (e: MouseEvent) {\n      if (props.openOnClear) {\n        menu.value = true\n      }\n    }\n    function onMousedownControl () {\n      if (\n        (props.hideNoData && !items.value.length) ||\n        props.readonly || form?.isReadonly.value\n      ) return\n\n      menu.value = !menu.value\n    }\n    function onKeydown (e: KeyboardEvent) {\n      if (props.readonly || form?.isReadonly.value) return\n\n      if (['Enter', ' ', 'ArrowDown', 'ArrowUp', 'Home', 'End'].includes(e.key)) {\n        e.preventDefault()\n      }\n\n      if (['Enter', 'ArrowDown', ' '].includes(e.key)) {\n        menu.value = true\n      }\n\n      if (['Escape', 'Tab'].includes(e.key)) {\n        menu.value = false\n      }\n\n      if (e.key === 'ArrowDown') {\n        listRef.value?.focus('next')\n      } else if (e.key === 'ArrowUp') {\n        listRef.value?.focus('prev')\n      } else if (e.key === 'Home') {\n        listRef.value?.focus('first')\n      } else if (e.key === 'End') {\n        listRef.value?.focus('last')\n      }\n\n      // html select hotkeys\n      const KEYBOARD_LOOKUP_THRESHOLD = 1000 // milliseconds\n\n      function checkPrintable (e: KeyboardEvent) {\n        const isPrintableChar = e.key.length === 1\n        const noModifier = !e.ctrlKey && !e.metaKey && !e.altKey\n        return isPrintableChar && noModifier\n      }\n\n      if (props.multiple || !checkPrintable(e)) return\n\n      const now = performance.now()\n      if (now - keyboardLookupLastTime > KEYBOARD_LOOKUP_THRESHOLD) {\n        keyboardLookupPrefix = ''\n      }\n      keyboardLookupPrefix += e.key.toLowerCase()\n      keyboardLookupLastTime = now\n\n      const item = items.value.find(item => item.title.toLowerCase().startsWith(keyboardLookupPrefix))\n      if (item !== undefined) {\n        model.value = [item]\n      }\n    }\n    function select (item: InternalItem) {\n      if (props.multiple) {\n        const index = selected.value.findIndex(selection => props.valueComparator(selection, item.value))\n\n        if (index === -1) {\n          model.value = [...model.value, item]\n        } else {\n          const value = [...model.value]\n          value.splice(index, 1)\n          model.value = value\n        }\n      } else {\n        model.value = [item]\n        menu.value = false\n      }\n    }\n    function onBlur (e: FocusEvent) {\n      if (!listRef.value?.$el.contains(e.relatedTarget as HTMLElement)) {\n        menu.value = false\n      }\n    }\n    function onFocusin (e: FocusEvent) {\n      isFocused.value = true\n    }\n    function onFocusout (e: FocusEvent) {\n      if (e.relatedTarget == null) {\n        vTextFieldRef.value?.focus()\n      }\n    }\n\n    useRender(() => {\n      const hasChips = !!(props.chips || slots.chip)\n      const hasList = !!((!props.hideNoData || displayItems.value.length) || slots.prepend || slots.append || slots['no-data'])\n      const isDirty = model.value.length > 0\n      const [textFieldProps] = VTextField.filterProps(props)\n\n      const placeholder = isDirty || (\n        !isFocused.value &&\n        props.label &&\n        !props.persistentPlaceholder\n      ) ? undefined : props.placeholder\n\n      return (\n        <VTextField\n          ref={ vTextFieldRef }\n          { ...textFieldProps }\n          modelValue={ model.value.map(v => v.props.value).join(', ') }\n          onUpdate:modelValue={ v => { if (v == null) model.value = [] } }\n          v-model:focused={ isFocused.value }\n          validationValue={ model.externalValue }\n          dirty={ isDirty }\n          class={[\n            'v-select',\n            {\n              'v-select--active-menu': menu.value,\n              'v-select--chips': !!props.chips,\n              [`v-select--${props.multiple ? 'multiple' : 'single'}`]: true,\n              'v-select--selected': model.value.length,\n            },\n          ]}\n          appendInnerIcon={ props.menuIcon }\n          readonly\n          placeholder={ placeholder }\n          onClick:clear={ onClear }\n          onMousedown:control={ onMousedownControl }\n          onBlur={ onBlur }\n          onKeydown={ onKeydown }\n        >\n          {{\n            ...slots,\n            default: () => (\n              <>\n                <VMenu\n                  ref={ vMenuRef }\n                  v-model={ menu.value }\n                  activator=\"parent\"\n                  contentClass=\"v-select__content\"\n                  eager={ props.eager }\n                  maxHeight={ 310 }\n                  openOnClick={ false }\n                  closeOnContentClick={ false }\n                  transition={ props.transition }\n                  { ...props.menuProps }\n                >\n                  { hasList && (\n                    <VList\n                      ref={ listRef }\n                      selected={ selected.value }\n                      selectStrategy={ props.multiple ? 'independent' : 'single-independent' }\n                      onMousedown={ (e: MouseEvent) => e.preventDefault() }\n                      onFocusin={ onFocusin }\n                      onFocusout={ onFocusout }\n                    >\n                      { !displayItems.value.length && !props.hideNoData && (slots['no-data']?.() ?? (\n                        <VListItem title={ t(props.noDataText) } />\n                      ))}\n\n                      { slots['prepend-item']?.() }\n\n                      { displayItems.value.map((item, index) => {\n                        if (slots.item) {\n                          return slots.item?.({\n                            item,\n                            index,\n                            props: mergeProps(item.props, { onClick: () => select(item) }),\n                          })\n                        }\n\n                        return (\n                          <VListItem\n                            key={ index }\n                            { ...item.props }\n                            onClick={ () => select(item) }\n                          >\n                            {{\n                              prepend: ({ isSelected }) => props.multiple && !props.hideSelected ? (\n                                <VCheckboxBtn\n                                  modelValue={ isSelected }\n                                  ripple={ false }\n                                  tabindex=\"-1\"\n                                />\n                              ) : undefined,\n                            }}\n                          </VListItem>\n                        )\n                      })}\n\n                      { slots['append-item']?.() }\n                    </VList>\n                  )}\n                </VMenu>\n\n                { selections.value.map((item, index) => {\n                  function onChipClose (e: Event) {\n                    e.stopPropagation()\n                    e.preventDefault()\n\n                    select(item)\n                  }\n\n                  const slotProps = {\n                    'onClick:close': onChipClose,\n                    modelValue: true,\n                    'onUpdate:modelValue': undefined,\n                  }\n\n                  return (\n                    <div key={ item.value } class=\"v-select__selection\">\n                      { hasChips ? (\n                        !slots.chip ? (\n                          <VChip\n                            key=\"chip\"\n                            closable={ props.closableChips }\n                            size=\"small\"\n                            text={ item.title }\n                            { ...slotProps }\n                          />\n                        ) : (\n                          <VDefaultsProvider\n                            key=\"chip-defaults\"\n                            defaults={{\n                              VChip: {\n                                closable: props.closableChips,\n                                size: 'small',\n                                text: item.title,\n                              },\n                            }}\n                          >\n                            { slots.chip?.({ item, index, props: slotProps }) }\n                          </VDefaultsProvider>\n                        )\n                      ) : (\n                        slots.selection?.({ item, index }) ?? (\n                          <span class=\"v-select__selection-text\">\n                            { item.title }\n                            { props.multiple && (index < selections.value.length - 1) && (\n                              <span class=\"v-select__selection-comma\">,</span>\n                            )}\n                          </span>\n                        )\n                      )}\n                    </div>\n                  )\n                })}\n              </>\n            ),\n          }}\n        </VTextField>\n      )\n    })\n\n    return forwardRefs({\n      isFocused,\n      menu,\n      select,\n    }, vTextFieldRef)\n  },\n})\n\nexport type VSelect = InstanceType<typeof VSelect>\n"]},"metadata":{},"sourceType":"module"}