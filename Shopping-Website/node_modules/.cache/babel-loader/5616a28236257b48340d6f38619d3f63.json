{"ast":null,"code":"// Types\nfunction mounted(el, binding) {\n  const modifiers = binding.modifiers || {};\n  const value = binding.value;\n  const {\n    once,\n    immediate,\n    ...modifierKeys\n  } = modifiers;\n  const defaultValue = !Object.keys(modifierKeys).length;\n  const {\n    handler,\n    options\n  } = typeof value === 'object' ? value : {\n    handler: value,\n    options: {\n      attributes: modifierKeys?.attr ?? defaultValue,\n      characterData: modifierKeys?.char ?? defaultValue,\n      childList: modifierKeys?.child ?? defaultValue,\n      subtree: modifierKeys?.sub ?? defaultValue\n    }\n  };\n  const observer = new MutationObserver(function () {\n    let mutations = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let observer = arguments.length > 1 ? arguments[1] : undefined;\n    handler?.(mutations, observer);\n    if (once) unmounted(el, binding);\n  });\n  if (immediate) handler?.([], observer);\n  el._mutate = Object(el._mutate);\n  el._mutate[binding.instance.$.uid] = {\n    observer\n  };\n  observer.observe(el, options);\n}\n\nfunction unmounted(el, binding) {\n  if (!el._mutate?.[binding.instance.$.uid]) return;\n\n  el._mutate[binding.instance.$.uid].observer.disconnect();\n\n  delete el._mutate[binding.instance.$.uid];\n}\n\nexport const Mutate = {\n  mounted,\n  unmounted\n};\nexport default Mutate;","map":{"version":3,"mappings":"AAAA;AASA,SAASA,OAAT,CAAkBC,EAAlB,EAAmCC,OAAnC,EAAsE;EACpE,MAAMC,SAAS,GAAGD,OAAO,CAACC,SAARD,IAAqB,EAAvC;EACA,MAAME,KAAK,GAAGF,OAAO,CAACE,KAAtB;EACA,MAAM;IAAEC,IAAF;IAAQC,SAAR;IAAmB,GAAGC;EAAtB,IAAuCJ,SAA7C;EACA,MAAMK,YAAY,GAAG,CAACC,MAAM,CAACC,IAAPD,CAAYF,YAAZE,EAA0BE,MAAhD;EAEA,MAAM;IAAEC,OAAF;IAAWC;EAAX,IAAuB,OAAOT,KAAP,KAAiB,QAAjB,GACzBA,KADyB,GAEzB;IACAQ,OAAO,EAAER,KADT;IAEAS,OAAO,EAAE;MACPC,UAAU,EAAEP,YAAY,EAAEQ,IAAdR,IAAsBC,YAD3B;MAEPQ,aAAa,EAAET,YAAY,EAAEU,IAAdV,IAAsBC,YAF9B;MAGPU,SAAS,EAAEX,YAAY,EAAEY,KAAdZ,IAAuBC,YAH3B;MAIPY,OAAO,EAAEb,YAAY,EAAEc,GAAdd,IAAqBC;IAJvB;EAFT,CAFJ;EAYA,MAAMc,QAAQ,GAAG,IAAIC,gBAAJ,CAAqB,YAGjC;IAAA,IAFHC,SAA2B,uEAAG,EAE3B;IAF6B,IAChCF,QAA0B,kDADM;IAGhCV,OAAO,GAAGY,SAAH,EAAcF,QAAd,CAAPV;IAEA,IAAIP,IAAJ,EAAUoB,SAAS,CAACxB,EAAD,EAAKC,OAAL,CAATuB;EACX,CAPgB,CAAjB;EASA,IAAInB,SAAJ,EAAeM,OAAO,GAAG,EAAH,EAAOU,QAAP,CAAPV;EAEfX,EAAE,CAACyB,OAAHzB,GAAaQ,MAAM,CAACR,EAAE,CAACyB,OAAJ,CAAnBzB;EACAA,EAAE,CAACyB,OAAHzB,CAAYC,OAAO,CAACyB,QAARzB,CAAkB0B,CAAlB1B,CAAoB2B,GAAhC5B,IAAuC;IAAEqB;EAAF,CAAvCrB;EAEAqB,QAAQ,CAACQ,OAATR,CAAiBrB,EAAjBqB,EAAqBT,OAArBS;AACF;;AAEA,SAASG,SAAT,CAAoBxB,EAApB,EAAqCC,OAArC,EAAwE;EACtE,IAAI,CAACD,EAAE,CAACyB,OAAHzB,GAAaC,OAAO,CAACyB,QAARzB,CAAkB0B,CAAlB1B,CAAoB2B,GAAjC5B,CAAL,EAA4C;;EAE5CA,EAAE,CAACyB,OAAHzB,CAAWC,OAAO,CAACyB,QAARzB,CAAkB0B,CAAlB1B,CAAoB2B,GAA/B5B,EAAqCqB,QAArCrB,CAA8C8B,UAA9C9B;;EACA,OAAOA,EAAE,CAACyB,OAAHzB,CAAWC,OAAO,CAACyB,QAARzB,CAAkB0B,CAAlB1B,CAAoB2B,GAA/B5B,CAAP;AACF;;AAEA,OAAO,MAAM+B,MAAM,GAAG;EACpBhC,OADoB;EAEpByB;AAFoB,CAAf;AAKP,eAAeO,MAAf","names":["mounted","el","binding","modifiers","value","once","immediate","modifierKeys","defaultValue","Object","keys","length","handler","options","attributes","attr","characterData","char","childList","child","subtree","sub","observer","MutationObserver","mutations","unmounted","_mutate","instance","$","uid","observe","disconnect","Mutate"],"sources":["../../../src/directives/mutate/index.ts"],"sourcesContent":["// Types\nimport type { DirectiveBinding } from 'vue'\nimport type { MutationOptions } from '@/composables/mutationObserver'\n\nexport interface MutationDirectiveBinding extends Omit<DirectiveBinding, 'modifiers' | 'value'> {\n  value: MutationCallback | { handler: MutationCallback, options?: MutationObserverInit }\n  modifiers: MutationOptions\n}\n\nfunction mounted (el: HTMLElement, binding: MutationDirectiveBinding) {\n  const modifiers = binding.modifiers || {}\n  const value = binding.value\n  const { once, immediate, ...modifierKeys } = modifiers\n  const defaultValue = !Object.keys(modifierKeys).length\n\n  const { handler, options } = typeof value === 'object'\n    ? value\n    : {\n      handler: value,\n      options: {\n        attributes: modifierKeys?.attr ?? defaultValue,\n        characterData: modifierKeys?.char ?? defaultValue,\n        childList: modifierKeys?.child ?? defaultValue,\n        subtree: modifierKeys?.sub ?? defaultValue,\n      },\n    }\n\n  const observer = new MutationObserver((\n    mutations: MutationRecord[] = [],\n    observer: MutationObserver\n  ) => {\n    handler?.(mutations, observer)\n\n    if (once) unmounted(el, binding)\n  })\n\n  if (immediate) handler?.([], observer)\n\n  el._mutate = Object(el._mutate)\n  el._mutate![binding.instance!.$.uid] = { observer }\n\n  observer.observe(el, options)\n}\n\nfunction unmounted (el: HTMLElement, binding: MutationDirectiveBinding) {\n  if (!el._mutate?.[binding.instance!.$.uid]) return\n\n  el._mutate[binding.instance!.$.uid]!.observer.disconnect()\n  delete el._mutate[binding.instance!.$.uid]\n}\n\nexport const Mutate = {\n  mounted,\n  unmounted,\n}\n\nexport default Mutate\n"]},"metadata":{},"sourceType":"module"}