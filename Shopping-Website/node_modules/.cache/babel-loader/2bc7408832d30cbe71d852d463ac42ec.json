{"ast":null,"code":"import { Fragment as _Fragment, withDirectives as _withDirectives, createVNode as _createVNode, mergeProps as _mergeProps, resolveDirective as _resolveDirective } from \"vue\"; // Styles\n\nimport \"./VTextField.css\"; // Components\n\nimport { filterFieldProps, makeVFieldProps, VField } from \"../VField/VField.mjs\";\nimport { makeVInputProps, VInput } from \"../VInput/VInput.mjs\";\nimport { VCounter } from \"../VCounter/index.mjs\"; // Directives\n\nimport Intersect from \"../../directives/intersect/index.mjs\"; // Composables\n\nimport { forwardRefs } from \"../../composables/forwardRefs.mjs\";\nimport { useFocus } from \"../../composables/focus.mjs\";\nimport { useProxiedModel } from \"../../composables/proxiedModel.mjs\"; // Utilities\n\nimport { cloneVNode, computed, nextTick, ref } from 'vue';\nimport { callEvent, filterInputAttrs, genericComponent, propsFactory, useRender } from \"../../util/index.mjs\"; // Types\n\nconst activeTypes = ['color', 'file', 'time', 'date', 'datetime-local', 'week', 'month'];\nexport const makeVTextFieldProps = propsFactory({\n  autofocus: Boolean,\n  counter: [Boolean, Number, String],\n  counterValue: Function,\n  prefix: String,\n  placeholder: String,\n  persistentPlaceholder: Boolean,\n  persistentCounter: Boolean,\n  suffix: String,\n  type: {\n    type: String,\n    default: 'text'\n  },\n  modelModifiers: Object,\n  ...makeVInputProps(),\n  ...makeVFieldProps()\n}, 'v-text-field');\nexport const VTextField = genericComponent()({\n  name: 'VTextField',\n  directives: {\n    Intersect\n  },\n  inheritAttrs: false,\n  props: makeVTextFieldProps(),\n  emits: {\n    'click:control': e => true,\n    'mousedown:control': e => true,\n    'update:focused': focused => true,\n    'update:modelValue': val => true\n  },\n\n  setup(props, _ref) {\n    let {\n      attrs,\n      emit,\n      slots\n    } = _ref;\n    const model = useProxiedModel(props, 'modelValue');\n    const {\n      isFocused,\n      focus,\n      blur\n    } = useFocus(props);\n    const counterValue = computed(() => {\n      return typeof props.counterValue === 'function' ? props.counterValue(model.value) : (model.value ?? '').toString().length;\n    });\n    const max = computed(() => {\n      if (attrs.maxlength) return attrs.maxlength;\n      if (!props.counter || typeof props.counter !== 'number' && typeof props.counter !== 'string') return undefined;\n      return props.counter;\n    });\n\n    function onIntersect(isIntersecting, entries) {\n      if (!props.autofocus || !isIntersecting) return;\n      entries[0].target?.focus?.();\n    }\n\n    const vInputRef = ref();\n    const vFieldRef = ref();\n    const inputRef = ref();\n    const isActive = computed(() => activeTypes.includes(props.type) || props.persistentPlaceholder || isFocused.value);\n\n    function onFocus() {\n      if (inputRef.value !== document.activeElement) {\n        inputRef.value?.focus();\n      }\n\n      if (!isFocused.value) focus();\n    }\n\n    function onControlMousedown(e) {\n      emit('mousedown:control', e);\n      if (e.target === inputRef.value) return;\n      onFocus();\n      e.preventDefault();\n    }\n\n    function onControlClick(e) {\n      onFocus();\n      emit('click:control', e);\n    }\n\n    function onClear(e) {\n      e.stopPropagation();\n      onFocus();\n      nextTick(() => {\n        model.value = null;\n        callEvent(props['onClick:clear'], e);\n      });\n    }\n\n    function onInput(e) {\n      const el = e.target;\n      model.value = el.value;\n\n      if (props.modelModifiers?.trim && ['text', 'search', 'password', 'tel', 'url'].includes(props.type)) {\n        const caretPosition = [el.selectionStart, el.selectionEnd];\n        nextTick(() => {\n          el.selectionStart = caretPosition[0];\n          el.selectionEnd = caretPosition[1];\n        });\n      }\n    }\n\n    useRender(() => {\n      const hasCounter = !!(slots.counter || props.counter || props.counterValue);\n      const hasDetails = !!(hasCounter || slots.details);\n      const [rootAttrs, inputAttrs] = filterInputAttrs(attrs);\n      const [{\n        modelValue: _,\n        ...inputProps\n      }] = VInput.filterProps(props);\n      const [fieldProps] = filterFieldProps(props);\n      return _createVNode(VInput, _mergeProps({\n        \"ref\": vInputRef,\n        \"modelValue\": model.value,\n        \"onUpdate:modelValue\": $event => model.value = $event,\n        \"class\": ['v-text-field', {\n          'v-text-field--prefixed': props.prefix,\n          'v-text-field--suffixed': props.suffix,\n          'v-text-field--flush-details': ['plain', 'underlined'].includes(props.variant)\n        }]\n      }, rootAttrs, inputProps, {\n        \"focused\": isFocused.value\n      }), { ...slots,\n        default: _ref2 => {\n          let {\n            id,\n            isDisabled,\n            isDirty,\n            isReadonly,\n            isValid\n          } = _ref2;\n          return _createVNode(VField, _mergeProps({\n            \"ref\": vFieldRef,\n            \"onMousedown\": onControlMousedown,\n            \"onClick\": onControlClick,\n            \"onClick:clear\": onClear,\n            \"onClick:prependInner\": props['onClick:prependInner'],\n            \"onClick:appendInner\": props['onClick:appendInner'],\n            \"role\": \"textbox\"\n          }, fieldProps, {\n            \"id\": id.value,\n            \"active\": isActive.value || isDirty.value,\n            \"dirty\": isDirty.value || props.dirty,\n            \"disabled\": isDisabled.value,\n            \"focused\": isFocused.value,\n            \"error\": isValid.value === false\n          }), { ...slots,\n            default: _ref3 => {\n              let {\n                props: {\n                  class: fieldClass,\n                  ...slotProps\n                }\n              } = _ref3;\n\n              const inputNode = _withDirectives(_createVNode(\"input\", _mergeProps({\n                \"ref\": inputRef,\n                \"value\": model.value,\n                \"onInput\": onInput,\n                \"autofocus\": props.autofocus,\n                \"readonly\": isReadonly.value,\n                \"disabled\": isDisabled.value,\n                \"name\": props.name,\n                \"placeholder\": props.placeholder,\n                \"size\": 1,\n                \"type\": props.type,\n                \"onFocus\": onFocus,\n                \"onBlur\": blur\n              }, slotProps, inputAttrs), null), [[_resolveDirective(\"intersect\"), {\n                handler: onIntersect\n              }, null, {\n                once: true\n              }]]);\n\n              return _createVNode(_Fragment, null, [props.prefix && _createVNode(\"span\", {\n                \"class\": \"v-text-field__prefix\"\n              }, [props.prefix]), slots.default ? _createVNode(\"div\", {\n                \"class\": fieldClass,\n                \"data-no-activator\": \"\"\n              }, [slots.default(), inputNode]) : cloneVNode(inputNode, {\n                class: fieldClass\n              }), props.suffix && _createVNode(\"span\", {\n                \"class\": \"v-text-field__suffix\"\n              }, [props.suffix])]);\n            }\n          });\n        },\n        details: hasDetails ? slotProps => _createVNode(_Fragment, null, [slots.details?.(slotProps), hasCounter && _createVNode(_Fragment, null, [_createVNode(\"span\", null, null), _createVNode(VCounter, {\n          \"active\": props.persistentCounter || isFocused.value,\n          \"value\": counterValue.value,\n          \"max\": max.value\n        }, slots.counter)])]) : undefined\n      });\n    });\n    return forwardRefs({}, vInputRef, vFieldRef, inputRef);\n  }\n\n});","map":{"version":3,"mappings":"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","names":["filterFieldProps","makeVFieldProps","VField","makeVInputProps","VInput","VCounter","Intersect","forwardRefs","useFocus","useProxiedModel","cloneVNode","computed","nextTick","ref","callEvent","filterInputAttrs","genericComponent","propsFactory","useRender","activeTypes","makeVTextFieldProps","autofocus","Boolean","counter","Number","String","counterValue","Function","prefix","placeholder","persistentPlaceholder","persistentCounter","suffix","type","default","modelModifiers","Object","VTextField","name","directives","inheritAttrs","props","emits","e","focused","val","setup","_ref","attrs","emit","slots","model","isFocused","focus","blur","value","toString","length","max","maxlength","undefined","onIntersect","isIntersecting","entries","target","vInputRef","vFieldRef","inputRef","isActive","includes","onFocus","document","activeElement","onControlMousedown","preventDefault","onControlClick","onClear","stopPropagation","onInput","el","trim","caretPosition","selectionStart","selectionEnd","hasCounter","hasDetails","details","rootAttrs","inputAttrs","modelValue","_","inputProps","filterProps","fieldProps","$event","variant","_ref2","id","isDisabled","isDirty","isReadonly","isValid","dirty","_ref3","class","fieldClass","slotProps","inputNode","handler","once","_createVNode"],"sources":["../../../src/components/VTextField/VTextField.tsx"],"sourcesContent":["// Styles\nimport './VTextField.sass'\n\n// Components\nimport { filterFieldProps, makeVFieldProps, VField } from '@/components/VField/VField'\nimport { makeVInputProps, VInput } from '@/components/VInput/VInput'\nimport { VCounter } from '@/components/VCounter'\n\n// Directives\nimport Intersect from '@/directives/intersect'\n\n// Composables\nimport { forwardRefs } from '@/composables/forwardRefs'\nimport { useFocus } from '@/composables/focus'\nimport { useProxiedModel } from '@/composables/proxiedModel'\n\n// Utilities\nimport { cloneVNode, computed, nextTick, ref } from 'vue'\nimport { callEvent, filterInputAttrs, genericComponent, propsFactory, useRender } from '@/util'\n\n// Types\nimport type { PropType } from 'vue'\nimport type { MakeSlots } from '@/util'\nimport type { VFieldSlots } from '@/components/VField/VField'\nimport type { VInputSlots } from '@/components/VInput/VInput'\n\nconst activeTypes = ['color', 'file', 'time', 'date', 'datetime-local', 'week', 'month']\n\nexport const makeVTextFieldProps = propsFactory({\n  autofocus: Boolean,\n  counter: [Boolean, Number, String] as PropType<true | number | string>,\n  counterValue: Function as PropType<(value: any) => number>,\n  prefix: String,\n  placeholder: String,\n  persistentPlaceholder: Boolean,\n  persistentCounter: Boolean,\n  suffix: String,\n  type: {\n    type: String,\n    default: 'text',\n  },\n  modelModifiers: Object as PropType<Record<string, boolean>>,\n\n  ...makeVInputProps(),\n  ...makeVFieldProps(),\n}, 'v-text-field')\n\nexport const VTextField = genericComponent<Omit<VInputSlots & VFieldSlots, 'default'> & MakeSlots<{\n  default: []\n}>>()({\n  name: 'VTextField',\n\n  directives: { Intersect },\n\n  inheritAttrs: false,\n\n  props: makeVTextFieldProps(),\n\n  emits: {\n    'click:control': (e: MouseEvent) => true,\n    'mousedown:control': (e: MouseEvent) => true,\n    'update:focused': (focused: boolean) => true,\n    'update:modelValue': (val: string) => true,\n  },\n\n  setup (props, { attrs, emit, slots }) {\n    const model = useProxiedModel(props, 'modelValue')\n    const { isFocused, focus, blur } = useFocus(props)\n    const counterValue = computed(() => {\n      return typeof props.counterValue === 'function'\n        ? props.counterValue(model.value)\n        : (model.value ?? '').toString().length\n    })\n    const max = computed(() => {\n      if (attrs.maxlength) return attrs.maxlength as unknown as undefined\n\n      if (\n        !props.counter ||\n        (typeof props.counter !== 'number' &&\n        typeof props.counter !== 'string')\n      ) return undefined\n\n      return props.counter\n    })\n\n    function onIntersect (\n      isIntersecting: boolean,\n      entries: IntersectionObserverEntry[]\n    ) {\n      if (!props.autofocus || !isIntersecting) return\n\n      (entries[0].target as HTMLInputElement)?.focus?.()\n    }\n\n    const vInputRef = ref<VInput>()\n    const vFieldRef = ref<VField>()\n    const inputRef = ref<HTMLInputElement>()\n    const isActive = computed(() => (\n      activeTypes.includes(props.type) ||\n      props.persistentPlaceholder ||\n      isFocused.value\n    ))\n    function onFocus () {\n      if (inputRef.value !== document.activeElement) {\n        inputRef.value?.focus()\n      }\n\n      if (!isFocused.value) focus()\n    }\n    function onControlMousedown (e: MouseEvent) {\n      emit('mousedown:control', e)\n\n      if (e.target === inputRef.value) return\n\n      onFocus()\n      e.preventDefault()\n    }\n    function onControlClick (e: MouseEvent) {\n      onFocus()\n\n      emit('click:control', e)\n    }\n    function onClear (e: MouseEvent) {\n      e.stopPropagation()\n\n      onFocus()\n\n      nextTick(() => {\n        model.value = null\n\n        callEvent(props['onClick:clear'], e)\n      })\n    }\n    function onInput (e: Event) {\n      const el = e.target as HTMLInputElement\n      model.value = el.value\n      if (\n        props.modelModifiers?.trim &&\n        ['text', 'search', 'password', 'tel', 'url'].includes(props.type)\n      ) {\n        const caretPosition = [el.selectionStart, el.selectionEnd]\n        nextTick(() => {\n          el.selectionStart = caretPosition[0]\n          el.selectionEnd = caretPosition[1]\n        })\n      }\n    }\n\n    useRender(() => {\n      const hasCounter = !!(slots.counter || props.counter || props.counterValue)\n      const hasDetails = !!(hasCounter || slots.details)\n      const [rootAttrs, inputAttrs] = filterInputAttrs(attrs)\n      const [{ modelValue: _, ...inputProps }] = VInput.filterProps(props)\n      const [fieldProps] = filterFieldProps(props)\n\n      return (\n        <VInput\n          ref={ vInputRef }\n          v-model={ model.value }\n          class={[\n            'v-text-field',\n            {\n              'v-text-field--prefixed': props.prefix,\n              'v-text-field--suffixed': props.suffix,\n              'v-text-field--flush-details': ['plain', 'underlined'].includes(props.variant),\n            },\n          ]}\n          { ...rootAttrs }\n          { ...inputProps }\n          focused={ isFocused.value }\n        >\n          {{\n            ...slots,\n            default: ({\n              id,\n              isDisabled,\n              isDirty,\n              isReadonly,\n              isValid,\n            }) => (\n              <VField\n                ref={ vFieldRef }\n                onMousedown={ onControlMousedown }\n                onClick={ onControlClick }\n                onClick:clear={ onClear }\n                onClick:prependInner={ props['onClick:prependInner'] }\n                onClick:appendInner={ props['onClick:appendInner'] }\n                role=\"textbox\"\n                { ...fieldProps }\n                id={ id.value }\n                active={ isActive.value || isDirty.value }\n                dirty={ isDirty.value || props.dirty }\n                disabled={ isDisabled.value }\n                focused={ isFocused.value }\n                error={ isValid.value === false }\n              >\n                {{\n                  ...slots,\n                  default: ({\n                    props: { class: fieldClass, ...slotProps },\n                  }) => {\n                    const inputNode = (\n                      <input\n                        ref={ inputRef }\n                        value={ model.value }\n                        onInput={ onInput }\n                        v-intersect={[{\n                          handler: onIntersect,\n                        }, null, ['once']]}\n                        autofocus={ props.autofocus }\n                        readonly={ isReadonly.value }\n                        disabled={ isDisabled.value }\n                        name={ props.name }\n                        placeholder={ props.placeholder }\n                        size={ 1 }\n                        type={ props.type }\n                        onFocus={ onFocus }\n                        onBlur={ blur }\n                        { ...slotProps }\n                        { ...inputAttrs }\n                      />\n                    )\n\n                    return (\n                      <>\n                        { props.prefix && (\n                          <span class=\"v-text-field__prefix\">\n                            { props.prefix }\n                          </span>\n                        )}\n\n                        { slots.default ? (\n                          <div\n                            class={ fieldClass }\n                            data-no-activator=\"\"\n                          >\n                            { slots.default() }\n                            { inputNode }\n                          </div>\n                        ) : cloneVNode(inputNode, { class: fieldClass })}\n\n                        { props.suffix && (\n                          <span class=\"v-text-field__suffix\">\n                            { props.suffix }\n                          </span>\n                        )}\n                      </>\n                    )\n                  },\n                }}\n              </VField>\n            ),\n            details: hasDetails ? slotProps => (\n              <>\n                { slots.details?.(slotProps) }\n\n                { hasCounter && (\n                  <>\n                    <span />\n\n                    <VCounter\n                      active={ props.persistentCounter || isFocused.value }\n                      value={ counterValue.value }\n                      max={ max.value }\n                      v-slots:default={ slots.counter }\n                    />\n                  </>\n                )}\n              </>\n            ) : undefined,\n          }}\n        </VInput>\n      )\n    })\n\n    return forwardRefs({}, vInputRef, vFieldRef, inputRef)\n  },\n})\n\nexport type VTextField = InstanceType<typeof VTextField>\n"]},"metadata":{},"sourceType":"module"}