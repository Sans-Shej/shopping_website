{"ast":null,"code":"import { createVNode as _createVNode } from \"vue\"; // Components\n\nimport { makeVExpansionPanelTitleProps, VExpansionPanelTitle } from \"./VExpansionPanelTitle.mjs\";\nimport { VExpansionPanelSymbol } from \"./VExpansionPanels.mjs\";\nimport { VExpansionPanelText } from \"./VExpansionPanelText.mjs\"; // Composables\n\nimport { makeElevationProps, useElevation } from \"../../composables/elevation.mjs\";\nimport { makeGroupItemProps, useGroupItem } from \"../../composables/group.mjs\";\nimport { makeLazyProps } from \"../../composables/lazy.mjs\";\nimport { makeRoundedProps, useRounded } from \"../../composables/rounded.mjs\";\nimport { makeTagProps } from \"../../composables/tag.mjs\";\nimport { useBackgroundColor } from \"../../composables/color.mjs\"; // Utilities\n\nimport { computed, provide } from 'vue';\nimport { genericComponent, useRender } from \"../../util/index.mjs\";\nexport const VExpansionPanel = genericComponent()({\n  name: 'VExpansionPanel',\n  props: {\n    title: String,\n    text: String,\n    bgColor: String,\n    ...makeElevationProps(),\n    ...makeGroupItemProps(),\n    ...makeLazyProps(),\n    ...makeRoundedProps(),\n    ...makeTagProps(),\n    ...makeVExpansionPanelTitleProps()\n  },\n  emits: {\n    'group:selected': val => true\n  },\n\n  setup(props, _ref) {\n    let {\n      slots\n    } = _ref;\n    const groupItem = useGroupItem(props, VExpansionPanelSymbol);\n    const {\n      backgroundColorClasses,\n      backgroundColorStyles\n    } = useBackgroundColor(props, 'bgColor');\n    const {\n      elevationClasses\n    } = useElevation(props);\n    const {\n      roundedClasses\n    } = useRounded(props);\n    const isDisabled = computed(() => groupItem?.disabled.value || props.disabled);\n    const selectedIndices = computed(() => groupItem.group.items.value.reduce((arr, item, index) => {\n      if (groupItem.group.selected.value.includes(item.id)) arr.push(index);\n      return arr;\n    }, []));\n    const isBeforeSelected = computed(() => {\n      const index = groupItem.group.items.value.findIndex(item => item.id === groupItem.id);\n      return !groupItem.isSelected.value && selectedIndices.value.some(selectedIndex => selectedIndex - index === 1);\n    });\n    const isAfterSelected = computed(() => {\n      const index = groupItem.group.items.value.findIndex(item => item.id === groupItem.id);\n      return !groupItem.isSelected.value && selectedIndices.value.some(selectedIndex => selectedIndex - index === -1);\n    });\n    provide(VExpansionPanelSymbol, groupItem);\n    useRender(() => {\n      const hasText = !!(slots.text || props.text);\n      const hasTitle = !!(slots.title || props.title);\n      return _createVNode(props.tag, {\n        \"class\": ['v-expansion-panel', {\n          'v-expansion-panel--active': groupItem.isSelected.value,\n          'v-expansion-panel--before-active': isBeforeSelected.value,\n          'v-expansion-panel--after-active': isAfterSelected.value,\n          'v-expansion-panel--disabled': isDisabled.value\n        }, roundedClasses.value, backgroundColorClasses.value],\n        \"style\": backgroundColorStyles.value,\n        \"aria-expanded\": groupItem.isSelected.value\n      }, {\n        default: () => [_createVNode(\"div\", {\n          \"class\": ['v-expansion-panel__shadow', ...elevationClasses.value]\n        }, null), hasTitle && _createVNode(VExpansionPanelTitle, {\n          \"key\": \"title\",\n          \"collapseIcon\": props.collapseIcon,\n          \"color\": props.color,\n          \"expandIcon\": props.expandIcon,\n          \"hideActions\": props.hideActions,\n          \"ripple\": props.ripple\n        }, {\n          default: () => [slots.title ? slots.title() : props.title]\n        }), hasText && _createVNode(VExpansionPanelText, {\n          \"key\": \"text\",\n          \"eager\": props.eager\n        }, {\n          default: () => [slots.text ? slots.text() : props.text]\n        }), slots.default?.()]\n      });\n    });\n    return {};\n  }\n\n});","map":{"version":3,"mappings":"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","names":["makeVExpansionPanelTitleProps","VExpansionPanelTitle","VExpansionPanelSymbol","VExpansionPanelText","makeElevationProps","useElevation","makeGroupItemProps","useGroupItem","makeLazyProps","makeRoundedProps","useRounded","makeTagProps","useBackgroundColor","computed","provide","genericComponent","useRender","VExpansionPanel","name","props","title","String","text","bgColor","emits","val","setup","_ref","slots","groupItem","backgroundColorClasses","backgroundColorStyles","elevationClasses","roundedClasses","isDisabled","disabled","value","selectedIndices","group","items","reduce","arr","item","index","selected","includes","id","push","isBeforeSelected","findIndex","isSelected","some","selectedIndex","isAfterSelected","hasText","hasTitle","default","collapseIcon","color","expandIcon","hideActions","ripple","eager"],"sources":["../../../src/components/VExpansionPanel/VExpansionPanel.tsx"],"sourcesContent":["// Components\nimport { makeVExpansionPanelTitleProps, VExpansionPanelTitle } from './VExpansionPanelTitle'\nimport { VExpansionPanelSymbol } from './VExpansionPanels'\nimport { VExpansionPanelText } from './VExpansionPanelText'\n\n// Composables\nimport { makeElevationProps, useElevation } from '@/composables/elevation'\nimport { makeGroupItemProps, useGroupItem } from '@/composables/group'\nimport { makeLazyProps } from '@/composables/lazy'\nimport { makeRoundedProps, useRounded } from '@/composables/rounded'\nimport { makeTagProps } from '@/composables/tag'\nimport { useBackgroundColor } from '@/composables/color'\n\n// Utilities\nimport { computed, provide } from 'vue'\nimport { genericComponent, useRender } from '@/util'\n\nexport type VExpansionPanelSlots = {\n  default: []\n  title: []\n  text: []\n}\n\nexport const VExpansionPanel = genericComponent<VExpansionPanelSlots>()({\n  name: 'VExpansionPanel',\n\n  props: {\n    title: String,\n    text: String,\n    bgColor: String,\n\n    ...makeElevationProps(),\n    ...makeGroupItemProps(),\n    ...makeLazyProps(),\n    ...makeRoundedProps(),\n    ...makeTagProps(),\n    ...makeVExpansionPanelTitleProps(),\n  },\n\n  emits: {\n    'group:selected': (val: { value: boolean }) => true,\n  },\n\n  setup (props, { slots }) {\n    const groupItem = useGroupItem(props, VExpansionPanelSymbol)\n    const { backgroundColorClasses, backgroundColorStyles } = useBackgroundColor(props, 'bgColor')\n    const { elevationClasses } = useElevation(props)\n    const { roundedClasses } = useRounded(props)\n    const isDisabled = computed(() => groupItem?.disabled.value || props.disabled)\n\n    const selectedIndices = computed(() => groupItem.group.items.value.reduce<number[]>((arr, item, index) => {\n      if (groupItem.group.selected.value.includes(item.id)) arr.push(index)\n      return arr\n    }, []))\n\n    const isBeforeSelected = computed(() => {\n      const index = groupItem.group.items.value.findIndex(item => item.id === groupItem.id)\n      return !groupItem.isSelected.value &&\n        selectedIndices.value.some(selectedIndex => selectedIndex - index === 1)\n    })\n\n    const isAfterSelected = computed(() => {\n      const index = groupItem.group.items.value.findIndex(item => item.id === groupItem.id)\n      return !groupItem.isSelected.value &&\n        selectedIndices.value.some(selectedIndex => selectedIndex - index === -1)\n    })\n\n    provide(VExpansionPanelSymbol, groupItem)\n\n    useRender(() => {\n      const hasText = !!(slots.text || props.text)\n      const hasTitle = !!(slots.title || props.title)\n\n      return (\n        <props.tag\n          class={[\n            'v-expansion-panel',\n            {\n              'v-expansion-panel--active': groupItem.isSelected.value,\n              'v-expansion-panel--before-active': isBeforeSelected.value,\n              'v-expansion-panel--after-active': isAfterSelected.value,\n              'v-expansion-panel--disabled': isDisabled.value,\n            },\n            roundedClasses.value,\n            backgroundColorClasses.value,\n          ]}\n          style={ backgroundColorStyles.value }\n          aria-expanded={ groupItem.isSelected.value }\n        >\n          <div\n            class={[\n              'v-expansion-panel__shadow',\n              ...elevationClasses.value,\n            ]}\n          />\n\n          { hasTitle && (\n            <VExpansionPanelTitle\n              key=\"title\"\n              collapseIcon={ props.collapseIcon }\n              color={ props.color }\n              expandIcon={ props.expandIcon }\n              hideActions={ props.hideActions }\n              ripple={ props.ripple }\n            >\n              { slots.title ? slots.title() : props.title }\n            </VExpansionPanelTitle>\n          )}\n\n          { hasText && (\n            <VExpansionPanelText key=\"text\" eager={ props.eager }>\n              { slots.text ? slots.text() : props.text }\n            </VExpansionPanelText>\n          )}\n\n          { slots.default?.() }\n        </props.tag>\n      )\n    })\n\n    return {}\n  },\n})\n\nexport type VExpansionPanel = InstanceType<typeof VExpansionPanel>\n"]},"metadata":{},"sourceType":"module"}