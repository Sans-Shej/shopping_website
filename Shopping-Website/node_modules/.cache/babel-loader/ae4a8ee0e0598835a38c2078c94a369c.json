{"ast":null,"code":"import { mergeProps as _mergeProps, resolveDirective as _resolveDirective, createVNode as _createVNode } from \"vue\"; // Styles\n\nimport \"./VSnackbar.css\"; // Components\n\nimport { VDefaultsProvider } from \"../VDefaultsProvider/index.mjs\";\nimport { VOverlay } from \"../VOverlay/index.mjs\"; // Composables\n\nimport { genOverlays, makeVariantProps, useVariant } from \"../../composables/variant.mjs\";\nimport { makeLocationProps, useLocation } from \"../../composables/location.mjs\";\nimport { makePositionProps, usePosition } from \"../../composables/position.mjs\";\nimport { makeRoundedProps, useRounded } from \"../../composables/rounded.mjs\";\nimport { makeThemeProps, provideTheme } from \"../../composables/theme.mjs\";\nimport { useProxiedModel } from \"../../composables/proxiedModel.mjs\";\nimport { useScopeId } from \"../../composables/scopeId.mjs\";\nimport { forwardRefs } from \"../../composables/forwardRefs.mjs\"; // Utilities\n\nimport { mergeProps, onMounted, ref, watch } from 'vue';\nimport { genericComponent, omit, useRender } from \"../../util/index.mjs\";\nimport { makeVOverlayProps } from \"../VOverlay/VOverlay.mjs\";\nexport const VSnackbar = genericComponent()({\n  name: 'VSnackbar',\n  props: {\n    multiLine: Boolean,\n    timeout: {\n      type: [Number, String],\n      default: 5000\n    },\n    vertical: Boolean,\n    ...makeLocationProps({\n      location: 'bottom'\n    }),\n    ...makePositionProps(),\n    ...makeRoundedProps(),\n    ...makeVariantProps(),\n    ...makeThemeProps(),\n    ...omit(makeVOverlayProps({\n      transition: 'v-snackbar-transition'\n    }), ['persistent', 'noClickAnimation', 'scrim', 'scrollStrategy'])\n  },\n  emits: {\n    'update:modelValue': v => true\n  },\n\n  setup(props, _ref) {\n    let {\n      slots\n    } = _ref;\n    const isActive = useProxiedModel(props, 'modelValue');\n    const {\n      locationStyles\n    } = useLocation(props);\n    const {\n      positionClasses\n    } = usePosition(props);\n    const {\n      scopeId\n    } = useScopeId();\n    const {\n      themeClasses\n    } = provideTheme(props);\n    const {\n      colorClasses,\n      colorStyles,\n      variantClasses\n    } = useVariant(props);\n    const {\n      roundedClasses\n    } = useRounded(props);\n    const overlay = ref();\n    watch(isActive, startTimeout);\n    watch(() => props.timeout, startTimeout);\n    onMounted(() => {\n      if (isActive.value) startTimeout();\n    });\n    let activeTimeout = -1;\n\n    function startTimeout() {\n      window.clearTimeout(activeTimeout);\n      const timeout = Number(props.timeout);\n      if (!isActive.value || timeout === -1) return;\n      activeTimeout = window.setTimeout(() => {\n        isActive.value = false;\n      }, timeout);\n    }\n\n    function onPointerenter() {\n      window.clearTimeout(activeTimeout);\n    }\n\n    useRender(() => {\n      const [overlayProps] = VOverlay.filterProps(props);\n      return _createVNode(VOverlay, _mergeProps({\n        \"ref\": overlay,\n        \"class\": ['v-snackbar', {\n          'v-snackbar--active': isActive.value,\n          'v-snackbar--multi-line': props.multiLine && !props.vertical,\n          'v-snackbar--vertical': props.vertical\n        }, positionClasses.value]\n      }, overlayProps, {\n        \"modelValue\": isActive.value,\n        \"onUpdate:modelValue\": $event => isActive.value = $event,\n        \"contentProps\": mergeProps({\n          class: ['v-snackbar__wrapper', themeClasses.value, colorClasses.value, roundedClasses.value, variantClasses.value],\n          style: [locationStyles.value, colorStyles.value],\n          onPointerenter,\n          onPointerleave: startTimeout\n        }, overlayProps.contentProps),\n        \"persistent\": true,\n        \"noClickAnimation\": true,\n        \"scrim\": false,\n        \"scrollStrategy\": \"none\",\n        \"_disableGlobalStack\": true\n      }, scopeId), {\n        default: () => [genOverlays(false, 'v-snackbar'), slots.default && _createVNode(\"div\", {\n          \"class\": \"v-snackbar__content\",\n          \"role\": \"status\",\n          \"aria-live\": \"polite\"\n        }, [slots.default()]), slots.actions && _createVNode(VDefaultsProvider, {\n          \"defaults\": {\n            VBtn: {\n              variant: 'text',\n              ripple: false\n            }\n          }\n        }, {\n          default: () => [_createVNode(\"div\", {\n            \"class\": \"v-snackbar__actions\"\n          }, [slots.actions()])]\n        })],\n        activator: slots.activator\n      });\n    });\n    return forwardRefs({}, overlay);\n  }\n\n});","map":{"version":3,"mappings":"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","names":["VDefaultsProvider","VOverlay","genOverlays","makeVariantProps","useVariant","makeLocationProps","useLocation","makePositionProps","usePosition","makeRoundedProps","useRounded","makeThemeProps","provideTheme","useProxiedModel","useScopeId","forwardRefs","mergeProps","onMounted","ref","watch","genericComponent","omit","useRender","makeVOverlayProps","VSnackbar","name","props","multiLine","Boolean","timeout","type","Number","String","default","vertical","location","transition","emits","v","setup","_ref","slots","isActive","locationStyles","positionClasses","scopeId","themeClasses","colorClasses","colorStyles","variantClasses","roundedClasses","overlay","startTimeout","value","activeTimeout","window","clearTimeout","setTimeout","onPointerenter","overlayProps","filterProps","$event","class","style","onPointerleave","contentProps","_createVNode","actions","VBtn","variant","ripple","activator"],"sources":["../../../src/components/VSnackbar/VSnackbar.tsx"],"sourcesContent":["// Styles\nimport './VSnackbar.sass'\n\n// Components\nimport { VDefaultsProvider } from '@/components/VDefaultsProvider'\nimport { VOverlay } from '@/components/VOverlay'\n\n// Composables\nimport { genOverlays, makeVariantProps, useVariant } from '@/composables/variant'\nimport { makeLocationProps, useLocation } from '@/composables/location'\nimport { makePositionProps, usePosition } from '@/composables/position'\nimport { makeRoundedProps, useRounded } from '@/composables/rounded'\nimport { makeThemeProps, provideTheme } from '@/composables/theme'\nimport { useProxiedModel } from '@/composables/proxiedModel'\nimport { useScopeId } from '@/composables/scopeId'\nimport { forwardRefs } from '@/composables/forwardRefs'\n\n// Utilities\nimport { mergeProps, onMounted, ref, watch } from 'vue'\nimport { genericComponent, omit, useRender } from '@/util'\nimport { makeVOverlayProps } from '@/components/VOverlay/VOverlay'\n\ntype VSnackbarSlots = {\n  activator: [{ isActive: boolean, props: Record<string, any> }]\n  default: []\n  actions: []\n}\n\nexport const VSnackbar = genericComponent<VSnackbarSlots>()({\n  name: 'VSnackbar',\n\n  props: {\n    multiLine: Boolean,\n    timeout: {\n      type: [Number, String],\n      default: 5000,\n    },\n    vertical: Boolean,\n\n    ...makeLocationProps({ location: 'bottom' } as const),\n    ...makePositionProps(),\n    ...makeRoundedProps(),\n    ...makeVariantProps(),\n    ...makeThemeProps(),\n    ...omit(makeVOverlayProps({\n      transition: 'v-snackbar-transition',\n    }), ['persistent', 'noClickAnimation', 'scrim', 'scrollStrategy']),\n  },\n\n  emits: {\n    'update:modelValue': (v: boolean) => true,\n  },\n\n  setup (props, { slots }) {\n    const isActive = useProxiedModel(props, 'modelValue')\n    const { locationStyles } = useLocation(props)\n    const { positionClasses } = usePosition(props)\n    const { scopeId } = useScopeId()\n    const { themeClasses } = provideTheme(props)\n    const { colorClasses, colorStyles, variantClasses } = useVariant(props)\n    const { roundedClasses } = useRounded(props)\n\n    const overlay = ref<VOverlay>()\n\n    watch(isActive, startTimeout)\n    watch(() => props.timeout, startTimeout)\n\n    onMounted(() => {\n      if (isActive.value) startTimeout()\n    })\n\n    let activeTimeout = -1\n    function startTimeout () {\n      window.clearTimeout(activeTimeout)\n      const timeout = Number(props.timeout)\n\n      if (!isActive.value || timeout === -1) return\n\n      activeTimeout = window.setTimeout(() => {\n        isActive.value = false\n      }, timeout)\n    }\n\n    function onPointerenter () {\n      window.clearTimeout(activeTimeout)\n    }\n\n    useRender(() => {\n      const [overlayProps] = VOverlay.filterProps(props)\n\n      return (\n        <VOverlay\n          ref={ overlay }\n          class={[\n            'v-snackbar',\n            {\n              'v-snackbar--active': isActive.value,\n              'v-snackbar--multi-line': props.multiLine && !props.vertical,\n              'v-snackbar--vertical': props.vertical,\n            },\n            positionClasses.value,\n          ]}\n          { ...overlayProps }\n          v-model={ isActive.value }\n          contentProps={ mergeProps({\n            class: [\n              'v-snackbar__wrapper',\n              themeClasses.value,\n              colorClasses.value,\n              roundedClasses.value,\n              variantClasses.value,\n            ],\n            style: [\n              locationStyles.value,\n              colorStyles.value,\n            ],\n            onPointerenter,\n            onPointerleave: startTimeout,\n          }, overlayProps.contentProps)}\n          persistent\n          noClickAnimation\n          scrim={ false }\n          scrollStrategy=\"none\"\n          _disableGlobalStack\n          { ...scopeId }\n          v-slots={{ activator: slots.activator }}\n        >\n          { genOverlays(false, 'v-snackbar') }\n\n          { slots.default && (\n            <div\n              class=\"v-snackbar__content\"\n              role=\"status\"\n              aria-live=\"polite\"\n            >\n              { slots.default() }\n            </div>\n          )}\n\n          { slots.actions && (\n            <VDefaultsProvider\n              defaults={{\n                VBtn: {\n                  variant: 'text',\n                  ripple: false,\n                },\n              }}\n            >\n              <div class=\"v-snackbar__actions\">\n                { slots.actions() }\n              </div>\n            </VDefaultsProvider>\n          )}\n        </VOverlay>\n      )\n    })\n\n    return forwardRefs({}, overlay)\n  },\n})\n\nexport type VSnackbar = InstanceType<typeof VSnackbar>\n"]},"metadata":{},"sourceType":"module"}