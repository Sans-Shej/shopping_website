{"ast":null,"code":"import { createVNode as _createVNode, resolveDirective as _resolveDirective } from \"vue\"; // Styles\n\nimport \"./VExpansionPanel.css\"; // Composables\n\nimport { makeGroupProps, useGroup } from \"../../composables/group.mjs\";\nimport { makeTagProps } from \"../../composables/tag.mjs\";\nimport { makeThemeProps, provideTheme } from \"../../composables/theme.mjs\";\nimport { provideDefaults } from \"../../composables/defaults.mjs\"; // Utilities\n\nimport { computed, toRef } from 'vue';\nimport { genericComponent, useRender } from \"../../util/index.mjs\"; // Types\n\nexport const VExpansionPanelSymbol = Symbol.for('vuetify:v-expansion-panel');\nconst allowedVariants = ['default', 'accordion', 'inset', 'popout'];\nexport const VExpansionPanels = genericComponent()({\n  name: 'VExpansionPanels',\n  props: {\n    color: String,\n    variant: {\n      type: String,\n      default: 'default',\n      validator: v => allowedVariants.includes(v)\n    },\n    readonly: Boolean,\n    ...makeGroupProps(),\n    ...makeTagProps(),\n    ...makeThemeProps()\n  },\n  emits: {\n    'update:modelValue': val => true\n  },\n\n  setup(props, _ref) {\n    let {\n      slots\n    } = _ref;\n    useGroup(props, VExpansionPanelSymbol);\n    const {\n      themeClasses\n    } = provideTheme(props);\n    const variantClass = computed(() => props.variant && `v-expansion-panels--variant-${props.variant}`);\n    provideDefaults({\n      VExpansionPanel: {\n        color: toRef(props, 'color')\n      },\n      VExpansionPanelTitle: {\n        readonly: toRef(props, 'readonly')\n      }\n    });\n    useRender(() => _createVNode(props.tag, {\n      \"class\": ['v-expansion-panels', themeClasses.value, variantClass.value]\n    }, slots));\n    return {};\n  }\n\n});","map":{"version":3,"mappings":"0FAAA;;AACA,+B,CAEA;;AAAA,SACSA,cADT,EACyBC,QADzB,QACiC,6BADjC;AACiC,SACxBC,YADwB,QACZ,2BADY;AACZ,SACZC,cADY,EACIC,YADJ,QACgB,6BADhB;AACgB,SAC5BC,eAD4B,QACb,gCADa,C,CAGrC;;AACA,SAASC,QAAT,EAAmBC,KAAnB,QAAgC,KAAhC;AAAqC,SAC5BC,gBAD4B,EACVC,SADU,QACD,sBADC,C,CAGrC;;AAIA,OAAO,MAAMC,qBAAqD,GAAGC,MAAM,CAACC,GAAPD,CAAW,2BAAXA,CAA9D;AAEP,MAAME,eAAe,GAAG,CAAC,SAAD,EAAY,WAAZ,EAAyB,OAAzB,EAAkC,QAAlC,CAAxB;AAIA,OAAO,MAAMC,gBAAgB,GAAGN,gBAAgB,GAAG;EACjDO,IAAI,EAAE,kBAD2C;EAGjDC,KAAK,EAAE;IACLC,KAAK,EAAEC,MADF;IAELC,OAAO,EAAE;MACPC,IAAI,EAAEF,MADC;MAEPG,OAAO,EAAE,SAFF;MAGPC,SAAS,EAAGC,CAAM,IAAKV,eAAe,CAACW,QAAhBX,CAAyBU,CAAzBV;IAHhB,CAFJ;IAOLY,QAAQ,EAAEC,OAPL;IASL,GAAG1B,cAAc,EATZ;IAUL,GAAGE,YAAY,EAVV;IAWL,GAAGC,cAAc;EAXZ,CAH0C;EAiBjDwB,KAAK,EAAE;IACL,qBAAsBC,GAAY,IAAK;EADlC,CAjB0C;;EAqBjDC,KAAKA,CAAEb,KAAFa,EAAOC,IAAPD,EAAoB;IAAA,IAAX;MAAEE;IAAF,IAASD,IAAE;IACvB7B,QAAQ,CAACe,KAAD,EAAQN,qBAAR,CAART;IAEA,MAAM;MAAE+B;IAAF,IAAmB5B,YAAY,CAACY,KAAD,CAArC;IAEA,MAAMiB,YAAY,GAAG3B,QAAQ,CAAC,MAAMU,KAAK,CAACG,OAANH,IAAkB,+BAA8BA,KAAK,CAACG,OAAQ,EAArE,CAA7B;IAEAd,eAAe,CAAC;MACd6B,eAAe,EAAE;QACfjB,KAAK,EAAEV,KAAK,CAACS,KAAD,EAAQ,OAAR;MADG,CADH;MAIdmB,oBAAoB,EAAE;QACpBV,QAAQ,EAAElB,KAAK,CAACS,KAAD,EAAQ,UAAR;MADK;IAJR,CAAD,CAAfX;IASAI,SAAS,CAAC;MAAA,SAEC,CACL,oBADK,EAELuB,YAAY,CAACI,KAFR,EAGLH,YAAY,CAACG,KAHR;IAFD,GAOIL,KAPJ,CAAD,CAATtB;IAWA,OAAO,EAAP;EACF;;AAjDiD,CAAH,CAAzC","names":["makeGroupProps","useGroup","makeTagProps","makeThemeProps","provideTheme","provideDefaults","computed","toRef","genericComponent","useRender","VExpansionPanelSymbol","Symbol","for","allowedVariants","VExpansionPanels","name","props","color","String","variant","type","default","validator","v","includes","readonly","Boolean","emits","val","setup","_ref","slots","themeClasses","variantClass","VExpansionPanel","VExpansionPanelTitle","value"],"sources":["../../../src/components/VExpansionPanel/VExpansionPanels.tsx"],"sourcesContent":["// Styles\nimport './VExpansionPanel.sass'\n\n// Composables\nimport { makeGroupProps, useGroup } from '@/composables/group'\nimport { makeTagProps } from '@/composables/tag'\nimport { makeThemeProps, provideTheme } from '@/composables/theme'\nimport { provideDefaults } from '@/composables/defaults'\n\n// Utilities\nimport { computed, toRef } from 'vue'\nimport { genericComponent, useRender } from '@/util'\n\n// Types\nimport type { InjectionKey, PropType } from 'vue'\nimport type { GroupItemProvide } from '@/composables/group'\n\nexport const VExpansionPanelSymbol: InjectionKey<GroupItemProvide> = Symbol.for('vuetify:v-expansion-panel')\n\nconst allowedVariants = ['default', 'accordion', 'inset', 'popout'] as const\n\ntype Variant = typeof allowedVariants[number]\n\nexport const VExpansionPanels = genericComponent()({\n  name: 'VExpansionPanels',\n\n  props: {\n    color: String,\n    variant: {\n      type: String as PropType<Variant>,\n      default: 'default',\n      validator: (v: any) => allowedVariants.includes(v),\n    },\n    readonly: Boolean,\n\n    ...makeGroupProps(),\n    ...makeTagProps(),\n    ...makeThemeProps(),\n  },\n\n  emits: {\n    'update:modelValue': (val: unknown) => true,\n  },\n\n  setup (props, { slots }) {\n    useGroup(props, VExpansionPanelSymbol)\n\n    const { themeClasses } = provideTheme(props)\n\n    const variantClass = computed(() => props.variant && `v-expansion-panels--variant-${props.variant}`)\n\n    provideDefaults({\n      VExpansionPanel: {\n        color: toRef(props, 'color'),\n      },\n      VExpansionPanelTitle: {\n        readonly: toRef(props, 'readonly'),\n      },\n    })\n\n    useRender(() => (\n      <props.tag\n        class={[\n          'v-expansion-panels',\n          themeClasses.value,\n          variantClass.value,\n        ]}\n        v-slots={ slots }\n      />\n    ))\n\n    return {}\n  },\n})\n\nexport type VExpansionPanels = InstanceType<typeof VExpansionPanels>\n"]},"metadata":{},"sourceType":"module"}