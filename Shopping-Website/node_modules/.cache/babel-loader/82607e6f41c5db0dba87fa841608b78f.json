{"ast":null,"code":"import { CircularBuffer } from \"../util/index.mjs\";\nconst HORIZON = 100; // ms\n\nconst HISTORY = 20; // number of samples to keep\n\n/** @see https://android.googlesource.com/platform/frameworks/native/+/master/libs/input/VelocityTracker.cpp */\n\nfunction kineticEnergyToVelocity(work) {\n  const sqrt2 = 1.41421356237;\n  return (work < 0 ? -1.0 : 1.0) * Math.sqrt(Math.abs(work)) * sqrt2;\n}\n/**\n * Returns pointer velocity in px/s\n */\n\n\nexport function calculateImpulseVelocity(samples) {\n  // The input should be in reversed time order (most recent sample at index i=0)\n  if (samples.length < 2) {\n    // if 0 or 1 points, velocity is zero\n    return 0;\n  } // if (samples[1].t > samples[0].t) {\n  //   // Algorithm will still work, but not perfectly\n  //   consoleWarn('Samples provided to calculateImpulseVelocity in the wrong order')\n  // }\n\n\n  if (samples.length === 2) {\n    // if 2 points, basic linear calculation\n    if (samples[1].t === samples[0].t) {\n      // consoleWarn(`Events have identical time stamps t=${samples[0].t}, setting velocity = 0`)\n      return 0;\n    }\n\n    return (samples[1].d - samples[0].d) / (samples[1].t - samples[0].t);\n  } // Guaranteed to have at least 3 points here\n  // start with the oldest sample and go forward in time\n\n\n  let work = 0;\n\n  for (let i = samples.length - 1; i > 0; i--) {\n    if (samples[i].t === samples[i - 1].t) {\n      // consoleWarn(`Events have identical time stamps t=${samples[i].t}, skipping sample`)\n      continue;\n    }\n\n    const vprev = kineticEnergyToVelocity(work); // v[i-1]\n\n    const vcurr = (samples[i].d - samples[i - 1].d) / (samples[i].t - samples[i - 1].t); // v[i]\n\n    work += (vcurr - vprev) * Math.abs(vcurr);\n\n    if (i === samples.length - 1) {\n      work *= 0.5;\n    }\n  }\n\n  return kineticEnergyToVelocity(work) * 1000;\n}\nexport function useVelocity() {\n  const touches = {};\n\n  function addMovement(e) {\n    Array.from(e.changedTouches).forEach(touch => {\n      const samples = touches[touch.identifier] ?? (touches[touch.identifier] = new CircularBuffer(HISTORY));\n      samples.push([e.timeStamp, touch]);\n    });\n  }\n\n  function endTouch(e) {\n    Array.from(e.changedTouches).forEach(touch => {\n      delete touches[touch.identifier];\n    });\n  }\n\n  function getVelocity(id) {\n    const samples = touches[id]?.values().reverse();\n\n    if (!samples) {\n      throw new Error(`No samples for touch id ${id}`);\n    }\n\n    const newest = samples[0];\n    const x = [];\n    const y = [];\n\n    for (const val of samples) {\n      if (newest[0] - val[0] > HORIZON) break;\n      x.push({\n        t: val[0],\n        d: val[1].clientX\n      });\n      y.push({\n        t: val[0],\n        d: val[1].clientY\n      });\n    }\n\n    return {\n      x: calculateImpulseVelocity(x),\n      y: calculateImpulseVelocity(y),\n\n      get direction() {\n        const {\n          x,\n          y\n        } = this;\n        const [absX, absY] = [Math.abs(x), Math.abs(y)];\n        return absX > absY && x >= 0 ? 'right' : absX > absY && x <= 0 ? 'left' : absY > absX && y >= 0 ? 'down' : absY > absX && y <= 0 ? 'up' : oops();\n      }\n\n    };\n  }\n\n  return {\n    addMovement,\n    endTouch,\n    getVelocity\n  };\n}\n\nfunction oops() {\n  throw new Error();\n}","map":{"version":3,"mappings":"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","names":["CircularBuffer","HORIZON","HISTORY","kineticEnergyToVelocity","work","sqrt2","Math","sqrt","abs","calculateImpulseVelocity","samples","length","t","d","i","vprev","vcurr","useVelocity","touches","addMovement","e","Array","from","changedTouches","forEach","touch","identifier","push","timeStamp","endTouch","getVelocity","id","values","reverse","Error","newest","x","y","val","clientX","clientY","direction","absX","absY","oops"],"sources":["../../src/composables/touch.ts"],"sourcesContent":["import { CircularBuffer } from '@/util'\n\nconst HORIZON = 100 // ms\nconst HISTORY = 20 // number of samples to keep\n\nexport interface Sample {\n  t: number\n  d: number\n}\n\n/** @see https://android.googlesource.com/platform/frameworks/native/+/master/libs/input/VelocityTracker.cpp */\nfunction kineticEnergyToVelocity (work: number) {\n  const sqrt2 = 1.41421356237\n  return (work < 0 ? -1.0 : 1.0) * Math.sqrt(Math.abs(work)) * sqrt2\n}\n\n/**\n * Returns pointer velocity in px/s\n */\nexport function calculateImpulseVelocity (samples: Sample[]) {\n  // The input should be in reversed time order (most recent sample at index i=0)\n  if (samples.length < 2) {\n    // if 0 or 1 points, velocity is zero\n    return 0\n  }\n  // if (samples[1].t > samples[0].t) {\n  //   // Algorithm will still work, but not perfectly\n  //   consoleWarn('Samples provided to calculateImpulseVelocity in the wrong order')\n  // }\n  if (samples.length === 2) {\n    // if 2 points, basic linear calculation\n    if (samples[1].t === samples[0].t) {\n      // consoleWarn(`Events have identical time stamps t=${samples[0].t}, setting velocity = 0`)\n      return 0\n    }\n    return (samples[1].d - samples[0].d) / (samples[1].t - samples[0].t)\n  }\n  // Guaranteed to have at least 3 points here\n  // start with the oldest sample and go forward in time\n  let work = 0\n  for (let i = samples.length - 1; i > 0; i--) {\n    if (samples[i].t === samples[i - 1].t) {\n      // consoleWarn(`Events have identical time stamps t=${samples[i].t}, skipping sample`)\n      continue\n    }\n    const vprev = kineticEnergyToVelocity(work) // v[i-1]\n    const vcurr = (samples[i].d - samples[i - 1].d) / (samples[i].t - samples[i - 1].t) // v[i]\n    work += (vcurr - vprev) * Math.abs(vcurr)\n    if (i === samples.length - 1) {\n      work *= 0.5\n    }\n  }\n  return kineticEnergyToVelocity(work) * 1000\n}\n\nexport function useVelocity () {\n  const touches: Record<number, CircularBuffer<[number, Touch]> | undefined> = {}\n\n  function addMovement (e: TouchEvent) {\n    Array.from(e.changedTouches).forEach(touch => {\n      const samples = touches[touch.identifier] ?? (touches[touch.identifier] = new CircularBuffer(HISTORY))\n      samples.push([e.timeStamp, touch])\n    })\n  }\n\n  function endTouch (e: TouchEvent) {\n    Array.from(e.changedTouches).forEach(touch => {\n      delete touches[touch.identifier]\n    })\n  }\n\n  function getVelocity (id: number) {\n    const samples = touches[id]?.values().reverse()\n\n    if (!samples) {\n      throw new Error(`No samples for touch id ${id}`)\n    }\n\n    const newest = samples[0]\n    const x: Sample[] = []\n    const y: Sample[] = []\n    for (const val of samples) {\n      if (newest[0] - val[0] > HORIZON) break\n\n      x.push({ t: val[0], d: val[1].clientX })\n      y.push({ t: val[0], d: val[1].clientY })\n    }\n\n    return {\n      x: calculateImpulseVelocity(x),\n      y: calculateImpulseVelocity(y),\n      get direction () {\n        const { x, y } = this\n        const [absX, absY] = [Math.abs(x), Math.abs(y)]\n\n        return absX > absY && x >= 0 ? 'right'\n          : absX > absY && x <= 0 ? 'left'\n          : absY > absX && y >= 0 ? 'down'\n          : absY > absX && y <= 0 ? 'up'\n          : oops()\n      },\n    }\n  }\n\n  return { addMovement, endTouch, getVelocity }\n}\n\nfunction oops (): never {\n  throw new Error()\n}\n"]},"metadata":{},"sourceType":"module"}