{"ast":null,"code":"import { createVNode as _createVNode, mergeProps as _mergeProps } from \"vue\"; // Styles\n\nimport \"./VTooltip.css\"; // Components\n\nimport { VOverlay } from \"../VOverlay/index.mjs\"; // Composables\n\nimport { useProxiedModel } from \"../../composables/proxiedModel.mjs\";\nimport { useScopeId } from \"../../composables/scopeId.mjs\";\nimport { forwardRefs } from \"../../composables/forwardRefs.mjs\"; // Utilities\n\nimport { computed, mergeProps, ref } from 'vue';\nimport { genericComponent, getUid, omit, useRender } from \"../../util/index.mjs\";\nimport { makeVOverlayProps } from \"../VOverlay/VOverlay.mjs\"; // Types\n\nexport const VTooltip = genericComponent()({\n  name: 'VTooltip',\n  props: {\n    id: String,\n    text: String,\n    ...omit(makeVOverlayProps({\n      closeOnBack: false,\n      location: 'end',\n      locationStrategy: 'connected',\n      minWidth: 0,\n      offset: 10,\n      openOnClick: false,\n      openOnHover: true,\n      origin: 'auto',\n      scrim: false,\n      scrollStrategy: 'reposition',\n      transition: false\n    }), ['absolute', 'persistent', 'eager'])\n  },\n  emits: {\n    'update:modelValue': value => true\n  },\n\n  setup(props, _ref) {\n    let {\n      slots\n    } = _ref;\n    const isActive = useProxiedModel(props, 'modelValue');\n    const {\n      scopeId\n    } = useScopeId();\n    const uid = getUid();\n    const id = computed(() => props.id || `v-tooltip-${uid}`);\n    const overlay = ref();\n    const location = computed(() => {\n      return props.location.split(' ').length > 1 ? props.location : props.location + ' center';\n    });\n    const origin = computed(() => {\n      return props.origin === 'auto' || props.origin === 'overlap' || props.origin.split(' ').length > 1 || props.location.split(' ').length > 1 ? props.origin : props.origin + ' center';\n    });\n    const transition = computed(() => {\n      if (props.transition) return props.transition;\n      return isActive.value ? 'scale-transition' : 'fade-transition';\n    });\n    const activatorProps = computed(() => mergeProps({\n      'aria-describedby': id.value\n    }, props.activatorProps));\n    useRender(() => {\n      const [overlayProps] = VOverlay.filterProps(props);\n      return _createVNode(VOverlay, _mergeProps({\n        \"ref\": overlay,\n        \"class\": ['v-tooltip'],\n        \"id\": id.value\n      }, overlayProps, {\n        \"modelValue\": isActive.value,\n        \"onUpdate:modelValue\": $event => isActive.value = $event,\n        \"transition\": transition.value,\n        \"absolute\": true,\n        \"location\": location.value,\n        \"origin\": origin.value,\n        \"persistent\": true,\n        \"role\": \"tooltip\",\n        \"eager\": true,\n        \"activatorProps\": activatorProps.value,\n        \"_disableGlobalStack\": true\n      }, scopeId), {\n        activator: slots.activator,\n        default: function () {\n          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n          }\n\n          return slots.default?.(...args) ?? props.text;\n        }\n      });\n    });\n    return forwardRefs({}, overlay);\n  }\n\n});","map":{"version":3,"mappings":"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","names":["VOverlay","useProxiedModel","useScopeId","forwardRefs","computed","mergeProps","ref","genericComponent","getUid","omit","useRender","makeVOverlayProps","VTooltip","name","props","id","String","text","closeOnBack","location","locationStrategy","minWidth","offset","openOnClick","openOnHover","origin","scrim","scrollStrategy","transition","emits","value","setup","_ref","slots","isActive","scopeId","uid","overlay","split","length","activatorProps","overlayProps","filterProps","$event","activator","default","args","_key","arguments"],"sources":["../../../src/components/VTooltip/VTooltip.tsx"],"sourcesContent":["// Styles\nimport './VTooltip.sass'\n\n// Components\nimport { VOverlay } from '@/components/VOverlay'\n\n// Composables\nimport { useProxiedModel } from '@/composables/proxiedModel'\nimport { useScopeId } from '@/composables/scopeId'\nimport { forwardRefs } from '@/composables/forwardRefs'\n\n// Utilities\nimport { computed, mergeProps, ref } from 'vue'\nimport { genericComponent, getUid, omit, useRender } from '@/util'\nimport { makeVOverlayProps } from '@/components/VOverlay/VOverlay'\n\n// Types\nimport type { OverlaySlots } from '@/components/VOverlay/VOverlay'\nimport type { StrategyProps } from '@/components/VOverlay/locationStrategies'\n\nexport const VTooltip = genericComponent<OverlaySlots>()({\n  name: 'VTooltip',\n\n  props: {\n    id: String,\n    text: String,\n\n    ...omit(makeVOverlayProps({\n      closeOnBack: false,\n      location: 'end' as const,\n      locationStrategy: 'connected' as const,\n      minWidth: 0,\n      offset: 10,\n      openOnClick: false,\n      openOnHover: true,\n      origin: 'auto' as const,\n      scrim: false,\n      scrollStrategy: 'reposition' as const,\n      transition: false,\n    }), [\n      'absolute',\n      'persistent',\n      'eager',\n    ]),\n  },\n\n  emits: {\n    'update:modelValue': (value: boolean) => true,\n  },\n\n  setup (props, { slots }) {\n    const isActive = useProxiedModel(props, 'modelValue')\n    const { scopeId } = useScopeId()\n\n    const uid = getUid()\n    const id = computed(() => props.id || `v-tooltip-${uid}`)\n\n    const overlay = ref<VOverlay>()\n\n    const location = computed(() => {\n      return props.location.split(' ').length > 1\n        ? props.location\n        : props.location + ' center' as StrategyProps['location']\n    })\n\n    const origin = computed(() => {\n      return (\n        props.origin === 'auto' ||\n        props.origin === 'overlap' ||\n        props.origin.split(' ').length > 1 ||\n        props.location.split(' ').length > 1\n      ) ? props.origin\n        : props.origin + ' center' as StrategyProps['origin']\n    })\n\n    const transition = computed(() => {\n      if (props.transition) return props.transition\n      return isActive.value ? 'scale-transition' : 'fade-transition'\n    })\n\n    const activatorProps = computed(() =>\n      mergeProps({\n        'aria-describedby': id.value,\n      }, props.activatorProps)\n    )\n\n    useRender(() => {\n      const [overlayProps] = VOverlay.filterProps(props)\n\n      return (\n        <VOverlay\n          ref={ overlay }\n          class={[\n            'v-tooltip',\n          ]}\n          id={ id.value }\n          { ...overlayProps }\n          v-model={ isActive.value }\n          transition={ transition.value }\n          absolute\n          location={ location.value }\n          origin={ origin.value }\n          persistent\n          role=\"tooltip\"\n          eager\n          activatorProps={ activatorProps.value }\n          _disableGlobalStack\n          { ...scopeId }\n        >\n          {{\n            activator: slots.activator,\n            default: (...args) => slots.default?.(...args) ?? props.text,\n          }}\n        </VOverlay>\n      )\n    })\n\n    return forwardRefs({}, overlay)\n  },\n})\n\nexport type VTooltip = InstanceType<typeof VTooltip>\n"]},"metadata":{},"sourceType":"module"}