{"ast":null,"code":"export function bias(val) {\n  const c = 0.501;\n  const x = Math.abs(val);\n  return Math.sign(val) * (x / ((1 / c - 2) * (1 - x) + 1));\n}\nexport function calculateUpdatedOffset(_ref) {\n  let {\n    selectedElement,\n    containerSize,\n    contentSize,\n    isRtl,\n    currentScrollOffset,\n    isHorizontal\n  } = _ref;\n  const clientSize = isHorizontal ? selectedElement.clientWidth : selectedElement.clientHeight;\n  const offsetStart = isHorizontal ? selectedElement.offsetLeft : selectedElement.offsetTop;\n  const adjustedOffsetStart = isRtl && isHorizontal ? contentSize - offsetStart - clientSize : offsetStart;\n  const totalSize = containerSize + currentScrollOffset;\n  const itemOffset = clientSize + adjustedOffsetStart;\n  const additionalOffset = clientSize * 0.4;\n\n  if (adjustedOffsetStart <= currentScrollOffset) {\n    currentScrollOffset = Math.max(adjustedOffsetStart - additionalOffset, 0);\n  } else if (totalSize <= itemOffset) {\n    currentScrollOffset = Math.min(currentScrollOffset - (totalSize - itemOffset - additionalOffset), contentSize - containerSize);\n  }\n\n  return currentScrollOffset;\n}\nexport function calculateCenteredOffset(_ref2) {\n  let {\n    selectedElement,\n    containerSize,\n    contentSize,\n    isRtl,\n    isHorizontal\n  } = _ref2;\n  const clientSize = isHorizontal ? selectedElement.clientWidth : selectedElement.clientHeight;\n  const offsetStart = isHorizontal ? selectedElement.offsetLeft : selectedElement.offsetTop;\n  const offsetCentered = isRtl && isHorizontal ? contentSize - offsetStart - clientSize / 2 - containerSize / 2 : offsetStart + clientSize / 2 - containerSize / 2;\n  return Math.min(contentSize - containerSize, Math.max(0, offsetCentered));\n}","map":{"version":3,"mappings":"AAAA,OAAO,SAASA,IAAT,CAAeC,GAAf,EAA4B;EACjC,MAAMC,CAAC,GAAG,KAAV;EACA,MAAMC,CAAC,GAAGC,IAAI,CAACC,GAALD,CAASH,GAATG,CAAV;EACA,OAAOA,IAAI,CAACE,IAALF,CAAUH,GAAVG,KAAkBD,CAAC,IAAI,CAAC,IAAID,CAAJ,GAAQ,CAAT,KAAe,IAAIC,CAAnB,IAAwB,CAA5B,CAAnBC,CAAP;AACF;AAEA,OAAO,SAASG,sBAAT,CAA+BC,IAA/B,EAcI;EAAA,IAd6B;IACtCC,eADsC;IAEtCC,aAFsC;IAGtCC,WAHsC;IAItCC,KAJsC;IAKtCC,mBALsC;IAMtCC;EANsC,IAcvCN,IAAU;EACT,MAAMO,UAAU,GAAGD,YAAY,GAAGL,eAAe,CAACO,WAAnB,GAAiCP,eAAe,CAACQ,YAAhF;EACA,MAAMC,WAAW,GAAGJ,YAAY,GAAGL,eAAe,CAACU,UAAnB,GAAgCV,eAAe,CAACW,SAAhF;EACA,MAAMC,mBAAmB,GAAGT,KAAK,IAAIE,YAATF,GAAyBD,WAAW,GAAGO,WAAdP,GAA4BI,UAArDH,GAAmEM,WAA/F;EAEA,MAAMI,SAAS,GAAGZ,aAAa,GAAGG,mBAAlC;EACA,MAAMU,UAAU,GAAGR,UAAU,GAAGM,mBAAhC;EACA,MAAMG,gBAAgB,GAAGT,UAAU,GAAG,GAAtC;;EAEA,IAAIM,mBAAmB,IAAIR,mBAA3B,EAAgD;IAC9CA,mBAAmB,GAAGT,IAAI,CAACqB,GAALrB,CAASiB,mBAAmB,GAAGG,gBAA/BpB,EAAiD,CAAjDA,CAAtBS;EACD,CAFD,MAEO,IAAIS,SAAS,IAAIC,UAAjB,EAA6B;IAClCV,mBAAmB,GAAGT,IAAI,CAACsB,GAALtB,CAASS,mBAAmB,IAAIS,SAAS,GAAGC,UAAZD,GAAyBE,gBAA7B,CAA5BpB,EAA4EO,WAAW,GAAGD,aAA1FN,CAAtBS;EACF;;EAEA,OAAOA,mBAAP;AACF;AAEA,OAAO,SAASc,uBAAT,CAAgCC,KAAhC,EAYI;EAAA,IAZ8B;IACvCnB,eADuC;IAEvCC,aAFuC;IAGvCC,WAHuC;IAIvCC,KAJuC;IAKvCE;EALuC,IAYxCc,KAAU;EACT,MAAMb,UAAU,GAAGD,YAAY,GAAGL,eAAe,CAACO,WAAnB,GAAiCP,eAAe,CAACQ,YAAhF;EACA,MAAMC,WAAW,GAAGJ,YAAY,GAAGL,eAAe,CAACU,UAAnB,GAAgCV,eAAe,CAACW,SAAhF;EAEA,MAAMS,cAAc,GAAGjB,KAAK,IAAIE,YAATF,GACnBD,WAAW,GAAGO,WAAdP,GAA4BI,UAAU,GAAG,CAAzCJ,GAA6CD,aAAa,GAAG,CAD1CE,GAEnBM,WAAW,GAAGH,UAAU,GAAG,CAA3BG,GAA+BR,aAAa,GAAG,CAFnD;EAIA,OAAON,IAAI,CAACsB,GAALtB,CAASO,WAAW,GAAGD,aAAvBN,EAAsCA,IAAI,CAACqB,GAALrB,CAAS,CAATA,EAAYyB,cAAZzB,CAAtCA,CAAP;AACF","names":["bias","val","c","x","Math","abs","sign","calculateUpdatedOffset","_ref","selectedElement","containerSize","contentSize","isRtl","currentScrollOffset","isHorizontal","clientSize","clientWidth","clientHeight","offsetStart","offsetLeft","offsetTop","adjustedOffsetStart","totalSize","itemOffset","additionalOffset","max","min","calculateCenteredOffset","_ref2","offsetCentered"],"sources":["../../../src/components/VSlideGroup/helpers.ts"],"sourcesContent":["export function bias (val: number) {\n  const c = 0.501\n  const x = Math.abs(val)\n  return Math.sign(val) * (x / ((1 / c - 2) * (1 - x) + 1))\n}\n\nexport function calculateUpdatedOffset ({\n  selectedElement,\n  containerSize,\n  contentSize,\n  isRtl,\n  currentScrollOffset,\n  isHorizontal,\n}: {\n  selectedElement: HTMLElement\n  containerSize: number\n  contentSize: number\n  isRtl: boolean\n  currentScrollOffset: number\n  isHorizontal: boolean\n}): number {\n  const clientSize = isHorizontal ? selectedElement.clientWidth : selectedElement.clientHeight\n  const offsetStart = isHorizontal ? selectedElement.offsetLeft : selectedElement.offsetTop\n  const adjustedOffsetStart = isRtl && isHorizontal ? (contentSize - offsetStart - clientSize) : offsetStart\n\n  const totalSize = containerSize + currentScrollOffset\n  const itemOffset = clientSize + adjustedOffsetStart\n  const additionalOffset = clientSize * 0.4\n\n  if (adjustedOffsetStart <= currentScrollOffset) {\n    currentScrollOffset = Math.max(adjustedOffsetStart - additionalOffset, 0)\n  } else if (totalSize <= itemOffset) {\n    currentScrollOffset = Math.min(currentScrollOffset - (totalSize - itemOffset - additionalOffset), contentSize - containerSize)\n  }\n\n  return currentScrollOffset\n}\n\nexport function calculateCenteredOffset ({\n  selectedElement,\n  containerSize,\n  contentSize,\n  isRtl,\n  isHorizontal,\n}: {\n  selectedElement: HTMLElement\n  containerSize: number\n  contentSize: number\n  isRtl: boolean\n  isHorizontal: boolean\n}): number {\n  const clientSize = isHorizontal ? selectedElement.clientWidth : selectedElement.clientHeight\n  const offsetStart = isHorizontal ? selectedElement.offsetLeft : selectedElement.offsetTop\n\n  const offsetCentered = isRtl && isHorizontal\n    ? contentSize - offsetStart - clientSize / 2 - containerSize / 2\n    : offsetStart + clientSize / 2 - containerSize / 2\n\n  return Math.min(contentSize - containerSize, Math.max(0, offsetCentered))\n}\n"]},"metadata":{},"sourceType":"module"}