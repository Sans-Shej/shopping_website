{"ast":null,"code":"import { ref } from 'vue';\nimport { useField, useForm } from 'vee-validate';\nimport axios from 'axios';\nexport default {\n  setup() {\n    const {\n      handleSubmit,\n      handleReset\n    } = useForm({\n      validationSchema: {\n        name(value) {\n          if (value?.length >= 2) return true;\n          return 'Name needs to be at least 2 characters.';\n        },\n\n        phone(value) {\n          if (value?.length >= 2) return true;\n          return 'Phone number needs to be at least 2 Characters.';\n        },\n\n        email(value) {\n          if (/^[a-z.-]+@[a-z.-]+\\.[a-z]+$/i.test(value)) return true;\n          return 'Must be a valid e-mail.';\n        },\n\n        password(value) {\n          if (value?.length >= 8) return true;\n          return 'Must be a valid password.';\n        },\n\n        confirmpassword(value) {\n          if (password.value.value === value) return true;\n          return \"Passwords don't match.\";\n        },\n\n        select(value) {\n          if (value) return true;\n          return 'Select an item.';\n        },\n\n        checkbox(value) {\n          if (value === '1') return true;\n          return 'Must be checked.';\n        }\n\n      }\n    });\n    const name = useField('name');\n    const username = useField('name');\n    const phone = useField('phone');\n    const email = useField('email');\n    const password = useField('password');\n    const confirmpassword = useField('confirmpassword');\n    const select = useField('select');\n    const checkbox = useField('checkbox');\n    const submit = handleSubmit(values => {\n      alert(JSON.stringify(values, null, 2));\n    });\n    return {\n      name,\n      phone,\n      confirmpassword,\n      password,\n      username,\n      email,\n      select,\n      checkbox,\n      submit,\n      handleReset\n    };\n  },\n\n  methods: {\n    async init() {\n      this.signup = await axios.get('http://localhost:5000/api/users/register');\n    },\n\n    submit() {\n      router.post('/register', (req, res) => {\n        let {\n          name,\n          username,\n          email,\n          password,\n          confirm_password\n        } = req.body;\n\n        if (password !== confirm_password) {\n          return res.status(400).json({\n            msg: \"Passwords do not match.\"\n          });\n        } // Check for unique username\n\n\n        User.findOne({\n          username: username\n        }).then(user => {\n          if (user) {\n            return res.status(400).json({\n              msg: \"Username is already taken.\"\n            });\n          }\n        }); // Check for unique email\n\n        User.findOne({\n          email: email\n        }).then(user => {\n          if (user) {\n            return res.status(400).json({\n              msg: \"Email is already registered. Did you forget your password?\"\n            });\n          }\n        }); // If no error, then data is valid and we can register the user\n\n        let newUser = new User({\n          name,\n          username,\n          password,\n          email\n        }); // Hash the password\n\n        bcrypt.genSalt(10, (err, salt) => {\n          bcrypt.hash(newUser.password, salt, (err, hash) => {\n            if (err) throw err;\n            newUser.password = hash;\n            newUser.save().then(user => {\n              return res.status(201).json({\n                msg: \"User is now registered!!!\"\n              });\n            });\n          });\n        });\n      });\n    }\n\n  }\n};","map":{"version":3,"mappings":"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","names":["ref","useField","useForm","axios","setup","handleSubmit","handleReset","validationSchema","name","value","length","phone","email","test","password","confirmpassword","select","checkbox","username","submit","values","alert","JSON","stringify","methods","init","signup","get","router","post","req","res","confirm_password","body","status","json","msg","User","findOne","then","user","newUser","bcrypt","genSalt","err","salt","hash","save"],"sourceRoot":"","sources":["D:\\flexi_website\\shopping_website_prototype\\Shopping-Website\\src\\views\\Signup.vue"],"sourcesContent":["<template>\r\n  <v-app>\r\n      <section>\r\n          <v-container class=\"center-screen\">\r\n              <v-card class=\"container-class\">\r\n\r\n                  <form @submit.prevent=\"submit\">\r\n                      <h2> Signup </h2>\r\n                      <v-text-field v-model=\"name.value.value\" :counter=\"30\" :error-messages=\"name.errorMessage.value\"\r\n                          label=\"Name\" class=\"textfield\"></v-text-field>\r\n\r\n                      <v-text-field v-model=\"phone.value.value\" :counter=\"10\" :error-messages=\"phone.errorMessage.value\"\r\n                          label=\"Username\"></v-text-field>\r\n\r\n                      <v-text-field v-model=\"email.value.value\" :error-messages=\"email.errorMessage.value\"\r\n                          label=\"E-mail\" ></v-text-field>\r\n\r\n                      <v-text-field type=\"password\" v-model=\"password.value.value\" :counter=\"32\"\r\n                          :error-messages=\"password.errorMessage.value\" label=\"Password\"></v-text-field>\r\n\r\n                      <v-text-field type=\"password\" v-model=\"confirmpassword.value.value\"\r\n                          :error-messages=\"confirmpassword.errorMessage.value\" label=\"Confirm Password\"></v-text-field>\r\n\r\n\r\n                      <v-btn class=\"me-10\" type=\"submit\">\r\n                          submit\r\n                      </v-btn>\r\n\r\n                      <v-btn @click=\"handleReset\">\r\n                          clear\r\n                      </v-btn>\r\n\r\n                  </form>\r\n              </v-card>\r\n          </v-container>\r\n      </section>\r\n  </v-app>\r\n</template>\r\n\r\n<script>\r\n\r\nimport { ref } from 'vue'\r\nimport { useField, useForm } from 'vee-validate'\r\nimport axios from 'axios'\r\n\r\nexport default {\r\n  setup() {\r\n      const { handleSubmit, handleReset } = useForm({\r\n          validationSchema: {\r\n              name(value) {\r\n                  if (value?.length >= 2) return true\r\n\r\n                  return 'Name needs to be at least 2 characters.'\r\n              },\r\n\r\n\r\n              phone(value) {\r\n                  if (value?.length >= 2) return true\r\n\r\n                  return 'Phone number needs to be at least 2 Characters.'\r\n              },\r\n              email(value) {\r\n                  if (/^[a-z.-]+@[a-z.-]+\\.[a-z]+$/i.test(value)) return true\r\n\r\n                  return 'Must be a valid e-mail.'\r\n              },\r\n              password(value) {\r\n                  if (value?.length >= 8) return true\r\n\r\n                  return 'Must be a valid password.'\r\n              },\r\n\r\n              confirmpassword(value) {\r\n                  if (password.value.value === value) return true\r\n                  return \"Passwords don't match.\"\r\n              },\r\n\r\n              select(value) {\r\n                  if (value) return true\r\n\r\n                  return 'Select an item.'\r\n              },\r\n              checkbox(value) {\r\n                  if (value === '1') return true\r\n\r\n                  return 'Must be checked.'\r\n              },\r\n          },\r\n      })\r\n      const name = useField('name')\r\n      const username = useField('name')\r\n      const phone = useField('phone')\r\n      const email = useField('email')\r\n      const password = useField('password')\r\n      const confirmpassword = useField('confirmpassword')\r\n      const select = useField('select')\r\n      const checkbox = useField('checkbox')\r\n\r\n\r\n\r\n      const submit = handleSubmit(values => {\r\n          alert(JSON.stringify(values, null, 2))\r\n      })\r\n\r\n\r\n      return { name, phone, confirmpassword, password, username, email, select, checkbox, submit, handleReset }\r\n  },\r\n  methods: {\r\n      async init() {\r\n          this.signup = await axios.get('http://localhost:5000/api/users/register')\r\n      },\r\n\r\n      submit() {\r\n          router.post('/register', (req, res) => {\r\n              let {\r\n                  name,\r\n                  username,\r\n                  email,\r\n                  password,\r\n                  confirm_password\r\n              } = req.body\r\n              if (password !== confirm_password) {\r\n                  return res.status(400).json({\r\n                      msg: \"Passwords do not match.\"\r\n                  });\r\n              }\r\n\r\n              // Check for unique username\r\n              User.findOne({\r\n                  username: username\r\n              }).then(user => {\r\n                  if (user) {\r\n                      return res.status(400).json({\r\n                          msg: \"Username is already taken.\"\r\n                      });\r\n                  }\r\n              })\r\n\r\n              // Check for unique email\r\n              User.findOne({ email: email }).then(user => {\r\n                  if (user) {\r\n                      return res.status(400).json({\r\n                          msg: \"Email is already registered. Did you forget your password?\"\r\n                      });\r\n                  }\r\n              });\r\n\r\n              // If no error, then data is valid and we can register the user\r\n              let newUser = new User({\r\n                  name,\r\n                  username,\r\n                  password,\r\n                  email\r\n              });\r\n\r\n              // Hash the password\r\n              bcrypt.genSalt(10, (err, salt) => {\r\n                  bcrypt.hash(newUser.password, salt, (err, hash) => {\r\n                      if (err) throw err;\r\n                      newUser.password = hash;\r\n                      newUser.save().then(user => {\r\n                          return res.status(201).json({\r\n                              msg: \"User is now registered!!!\"\r\n                          });\r\n                      });\r\n                  });\r\n              });\r\n          });\r\n      }\r\n  }\r\n\r\n\r\n}\r\n\r\n</script>\r\n\r\n<style scoped>\r\n.center-screen {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  text-align: center;\r\n  min-height: 100vh;\r\n}\r\n\r\nsection {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  padding-top: 30px;\r\n  min-height: 100vh;\r\n  width: 100%;\r\n  background-image: url(\"@/assets/img/wardrobe.png\");\r\n  background-position: center;\r\n  background-size: cover;\r\n\r\n}\r\n\r\n.container-class {\r\n  position: relative;\r\n  width: 500px;\r\n  height: 500px;\r\n  background: transparent;\r\n  border: 2px solid rgba(255, 253, 253, 0.753);\r\n  border-radius: 20px;\r\n  backdrop-filter: blur(60px);\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\nh2 {\r\n  font-size: 2em;\r\n  color: #ffffff;\r\n  text-align: center;\r\n  font-weight:bold;\r\n}\r\n\r\nform {\r\n  color: white;\r\n  width: 60%;\r\n\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module"}