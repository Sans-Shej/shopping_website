{"ast":null,"code":"import { createVNode as _createVNode } from \"vue\"; // Styles\n\nimport \"./VProgressCircular.css\"; // Composables\n\nimport { makeSizeProps, useSize } from \"../../composables/size.mjs\";\nimport { makeTagProps } from \"../../composables/tag.mjs\";\nimport { makeThemeProps, provideTheme } from \"../../composables/theme.mjs\";\nimport { useIntersectionObserver } from \"../../composables/intersectionObserver.mjs\";\nimport { useResizeObserver } from \"../../composables/resizeObserver.mjs\";\nimport { useTextColor } from \"../../composables/color.mjs\"; // Utilities\n\nimport { computed, ref, toRef, watchEffect } from 'vue';\nimport { convertToUnit, genericComponent, useRender } from \"../../util/index.mjs\"; // Types\n\nexport const VProgressCircular = genericComponent()({\n  name: 'VProgressCircular',\n  props: {\n    bgColor: String,\n    color: String,\n    indeterminate: [Boolean, String],\n    modelValue: {\n      type: [Number, String],\n      default: 0\n    },\n    rotate: {\n      type: [Number, String],\n      default: 0\n    },\n    width: {\n      type: [Number, String],\n      default: 4\n    },\n    ...makeSizeProps(),\n    ...makeTagProps({\n      tag: 'div'\n    }),\n    ...makeThemeProps()\n  },\n\n  setup(props, _ref) {\n    let {\n      slots\n    } = _ref;\n    const MAGIC_RADIUS_CONSTANT = 20;\n    const CIRCUMFERENCE = 2 * Math.PI * MAGIC_RADIUS_CONSTANT;\n    const root = ref();\n    const {\n      themeClasses\n    } = provideTheme(props);\n    const {\n      sizeClasses,\n      sizeStyles\n    } = useSize(props);\n    const {\n      textColorClasses,\n      textColorStyles\n    } = useTextColor(toRef(props, 'color'));\n    const {\n      textColorClasses: underlayColorClasses,\n      textColorStyles: underlayColorStyles\n    } = useTextColor(toRef(props, 'bgColor'));\n    const {\n      intersectionRef,\n      isIntersecting\n    } = useIntersectionObserver();\n    const {\n      resizeRef,\n      contentRect\n    } = useResizeObserver();\n    const normalizedValue = computed(() => Math.max(0, Math.min(100, parseFloat(props.modelValue))));\n    const width = computed(() => Number(props.width));\n    const size = computed(() => {\n      // Get size from element if size prop value is small, large etc\n      return sizeStyles.value ? Number(props.size) : contentRect.value ? contentRect.value.width : Math.max(width.value, 32);\n    });\n    const diameter = computed(() => MAGIC_RADIUS_CONSTANT / (1 - width.value / size.value) * 2);\n    const strokeWidth = computed(() => width.value / size.value * diameter.value);\n    const strokeDashOffset = computed(() => convertToUnit((100 - normalizedValue.value) / 100 * CIRCUMFERENCE));\n    watchEffect(() => {\n      intersectionRef.value = root.value;\n      resizeRef.value = root.value;\n    });\n    useRender(() => _createVNode(props.tag, {\n      \"ref\": root,\n      \"class\": ['v-progress-circular', {\n        'v-progress-circular--indeterminate': !!props.indeterminate,\n        'v-progress-circular--visible': isIntersecting.value,\n        'v-progress-circular--disable-shrink': props.indeterminate === 'disable-shrink'\n      }, themeClasses.value, sizeClasses.value, textColorClasses.value],\n      \"style\": [sizeStyles.value, textColorStyles.value],\n      \"role\": \"progressbar\",\n      \"aria-valuemin\": \"0\",\n      \"aria-valuemax\": \"100\",\n      \"aria-valuenow\": props.indeterminate ? undefined : normalizedValue.value\n    }, {\n      default: () => [_createVNode(\"svg\", {\n        \"style\": {\n          transform: `rotate(calc(-90deg + ${Number(props.rotate)}deg))`\n        },\n        \"xmlns\": \"http://www.w3.org/2000/svg\",\n        \"viewBox\": `0 0 ${diameter.value} ${diameter.value}`\n      }, [_createVNode(\"circle\", {\n        \"class\": ['v-progress-circular__underlay', underlayColorClasses.value],\n        \"style\": underlayColorStyles.value,\n        \"fill\": \"transparent\",\n        \"cx\": \"50%\",\n        \"cy\": \"50%\",\n        \"r\": MAGIC_RADIUS_CONSTANT,\n        \"stroke-width\": strokeWidth.value,\n        \"stroke-dasharray\": CIRCUMFERENCE,\n        \"stroke-dashoffset\": 0\n      }, null), _createVNode(\"circle\", {\n        \"class\": \"v-progress-circular__overlay\",\n        \"fill\": \"transparent\",\n        \"cx\": \"50%\",\n        \"cy\": \"50%\",\n        \"r\": MAGIC_RADIUS_CONSTANT,\n        \"stroke-width\": strokeWidth.value,\n        \"stroke-dasharray\": CIRCUMFERENCE,\n        \"stroke-dashoffset\": strokeDashOffset.value\n      }, null)]), slots.default && _createVNode(\"div\", {\n        \"class\": \"v-progress-circular__content\"\n      }, [slots.default({\n        value: normalizedValue.value\n      })])]\n    }));\n    return {};\n  }\n\n});","map":{"version":3,"mappings":"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","names":["makeSizeProps","useSize","makeTagProps","makeThemeProps","provideTheme","useIntersectionObserver","useResizeObserver","useTextColor","computed","ref","toRef","watchEffect","convertToUnit","genericComponent","useRender","VProgressCircular","name","props","bgColor","String","color","indeterminate","Boolean","modelValue","type","Number","default","rotate","width","tag","setup","_ref","slots","MAGIC_RADIUS_CONSTANT","CIRCUMFERENCE","Math","PI","root","themeClasses","sizeClasses","sizeStyles","textColorClasses","textColorStyles","underlayColorClasses","underlayColorStyles","intersectionRef","isIntersecting","resizeRef","contentRect","normalizedValue","max","min","parseFloat","size","value","diameter","strokeWidth","strokeDashOffset","undefined","transform","_createVNode"],"sources":["../../../src/components/VProgressCircular/VProgressCircular.tsx"],"sourcesContent":["// Styles\nimport './VProgressCircular.sass'\n\n// Composables\nimport { makeSizeProps, useSize } from '@/composables/size'\nimport { makeTagProps } from '@/composables/tag'\nimport { makeThemeProps, provideTheme } from '@/composables/theme'\nimport { useIntersectionObserver } from '@/composables/intersectionObserver'\nimport { useResizeObserver } from '@/composables/resizeObserver'\nimport { useTextColor } from '@/composables/color'\n\n// Utilities\nimport { computed, ref, toRef, watchEffect } from 'vue'\nimport { convertToUnit, genericComponent, useRender } from '@/util'\n\n// Types\nimport type { PropType } from 'vue'\n\nexport const VProgressCircular = genericComponent()({\n  name: 'VProgressCircular',\n\n  props: {\n    bgColor: String,\n    color: String,\n    indeterminate: [Boolean, String] as PropType<boolean | 'disable-shrink'>,\n    modelValue: {\n      type: [Number, String],\n      default: 0,\n    },\n    rotate: {\n      type: [Number, String],\n      default: 0,\n    },\n    width: {\n      type: [Number, String],\n      default: 4,\n    },\n\n    ...makeSizeProps(),\n    ...makeTagProps({ tag: 'div' }),\n    ...makeThemeProps(),\n  },\n\n  setup (props, { slots }) {\n    const MAGIC_RADIUS_CONSTANT = 20\n    const CIRCUMFERENCE = 2 * Math.PI * MAGIC_RADIUS_CONSTANT\n\n    const root = ref<HTMLElement>()\n\n    const { themeClasses } = provideTheme(props)\n    const { sizeClasses, sizeStyles } = useSize(props)\n    const { textColorClasses, textColorStyles } = useTextColor(toRef(props, 'color'))\n    const { textColorClasses: underlayColorClasses, textColorStyles: underlayColorStyles } = useTextColor(toRef(props, 'bgColor'))\n    const { intersectionRef, isIntersecting } = useIntersectionObserver()\n    const { resizeRef, contentRect } = useResizeObserver()\n\n    const normalizedValue = computed(() => Math.max(0, Math.min(100, parseFloat(props.modelValue))))\n    const width = computed(() => Number(props.width))\n    const size = computed(() => {\n      // Get size from element if size prop value is small, large etc\n      return sizeStyles.value\n        ? Number(props.size)\n        : contentRect.value\n          ? contentRect.value.width\n          : Math.max(width.value, 32)\n    })\n    const diameter = computed(() => (MAGIC_RADIUS_CONSTANT / (1 - width.value / size.value)) * 2)\n    const strokeWidth = computed(() => width.value / size.value * diameter.value)\n    const strokeDashOffset = computed(() => convertToUnit(((100 - normalizedValue.value) / 100) * CIRCUMFERENCE))\n\n    watchEffect(() => {\n      intersectionRef.value = root.value\n      resizeRef.value = root.value\n    })\n\n    useRender(() => (\n      <props.tag\n        ref={ root }\n        class={[\n          'v-progress-circular',\n          {\n            'v-progress-circular--indeterminate': !!props.indeterminate,\n            'v-progress-circular--visible': isIntersecting.value,\n            'v-progress-circular--disable-shrink': props.indeterminate === 'disable-shrink',\n          },\n          themeClasses.value,\n          sizeClasses.value,\n          textColorClasses.value,\n        ]}\n        style={[\n          sizeStyles.value,\n          textColorStyles.value,\n        ]}\n        role=\"progressbar\"\n        aria-valuemin=\"0\"\n        aria-valuemax=\"100\"\n        aria-valuenow={ props.indeterminate ? undefined : normalizedValue.value }\n      >\n        <svg\n          style={{\n            transform: `rotate(calc(-90deg + ${Number(props.rotate)}deg))`,\n          }}\n          xmlns=\"http://www.w3.org/2000/svg\"\n          viewBox={ `0 0 ${diameter.value} ${diameter.value}` }\n        >\n          <circle\n            class={[\n              'v-progress-circular__underlay',\n              underlayColorClasses.value,\n            ]}\n            style={ underlayColorStyles.value }\n            fill=\"transparent\"\n            cx=\"50%\"\n            cy=\"50%\"\n            r={ MAGIC_RADIUS_CONSTANT }\n            stroke-width={ strokeWidth.value }\n            stroke-dasharray={ CIRCUMFERENCE }\n            stroke-dashoffset={ 0 }\n          />\n\n          <circle\n            class=\"v-progress-circular__overlay\"\n            fill=\"transparent\"\n            cx=\"50%\"\n            cy=\"50%\"\n            r={ MAGIC_RADIUS_CONSTANT }\n            stroke-width={ strokeWidth.value }\n            stroke-dasharray={ CIRCUMFERENCE }\n            stroke-dashoffset={ strokeDashOffset.value }\n          />\n        </svg>\n\n        { slots.default && (\n          <div class=\"v-progress-circular__content\">\n            { slots.default({ value: normalizedValue.value }) }\n          </div>\n        )}\n      </props.tag>\n    ))\n\n    return {}\n  },\n})\n\nexport type VProgressCircular = InstanceType<typeof VProgressCircular>\n"]},"metadata":{},"sourceType":"module"}