{"ast":null,"code":"import { withDirectives as _withDirectives, resolveDirective as _resolveDirective, vShow as _vShow, Fragment as _Fragment, createVNode as _createVNode, mergeProps as _mergeProps } from \"vue\"; // Styles\n\nimport \"./VOverlay.css\"; // Composables\n\nimport { makeActivatorProps, useActivator } from \"./useActivator.mjs\";\nimport { makeDimensionProps, useDimension } from \"../../composables/dimensions.mjs\";\nimport { makeLazyProps, useLazy } from \"../../composables/lazy.mjs\";\nimport { makeLocationStrategyProps, useLocationStrategies } from \"./locationStrategies.mjs\";\nimport { makeScrollStrategyProps, useScrollStrategies } from \"./scrollStrategies.mjs\";\nimport { makeThemeProps, provideTheme } from \"../../composables/theme.mjs\";\nimport { makeTransitionProps, MaybeTransition } from \"../../composables/transition.mjs\";\nimport { useBackButton, useRouter } from \"../../composables/router.mjs\";\nimport { useBackgroundColor } from \"../../composables/color.mjs\";\nimport { useProxiedModel } from \"../../composables/proxiedModel.mjs\";\nimport { useHydration } from \"../../composables/hydration.mjs\";\nimport { useRtl } from \"../../composables/locale.mjs\";\nimport { useScopeId } from \"../../composables/scopeId.mjs\";\nimport { useStack } from \"../../composables/stack.mjs\";\nimport { useTeleport } from \"../../composables/teleport.mjs\";\nimport { useToggleScope } from \"../../composables/toggleScope.mjs\"; // Directives\n\nimport { ClickOutside } from \"../../directives/click-outside/index.mjs\"; // Utilities\n\nimport { animate, convertToUnit, genericComponent, getScrollParent, IN_BROWSER, propsFactory, standardEasing, useRender } from \"../../util/index.mjs\";\nimport { computed, mergeProps, ref, Teleport, toHandlers, toRef, Transition, watch } from 'vue'; // Types\n\nfunction Scrim(props) {\n  const {\n    modelValue,\n    color,\n    ...rest\n  } = props;\n  return _createVNode(Transition, {\n    \"name\": \"fade-transition\",\n    \"appear\": true\n  }, {\n    default: () => [props.modelValue && _createVNode(\"div\", _mergeProps({\n      \"class\": ['v-overlay__scrim', props.color.backgroundColorClasses.value],\n      \"style\": props.color.backgroundColorStyles.value\n    }, rest), null)]\n  });\n}\n\nexport const makeVOverlayProps = propsFactory({\n  absolute: Boolean,\n  attach: [Boolean, String, Object],\n  closeOnBack: {\n    type: Boolean,\n    default: true\n  },\n  contained: Boolean,\n  contentClass: null,\n  contentProps: null,\n  disabled: Boolean,\n  noClickAnimation: Boolean,\n  modelValue: Boolean,\n  persistent: Boolean,\n  scrim: {\n    type: [String, Boolean],\n    default: true\n  },\n  zIndex: {\n    type: [Number, String],\n    default: 2000\n  },\n  ...makeActivatorProps(),\n  ...makeDimensionProps(),\n  ...makeLazyProps(),\n  ...makeLocationStrategyProps(),\n  ...makeScrollStrategyProps(),\n  ...makeThemeProps(),\n  ...makeTransitionProps()\n}, 'v-overlay');\nexport const VOverlay = genericComponent()({\n  name: 'VOverlay',\n  directives: {\n    ClickOutside\n  },\n  inheritAttrs: false,\n  props: {\n    _disableGlobalStack: Boolean,\n    ...makeVOverlayProps()\n  },\n  emits: {\n    'click:outside': e => true,\n    'update:modelValue': value => true,\n    afterLeave: () => true\n  },\n\n  setup(props, _ref) {\n    let {\n      slots,\n      attrs,\n      emit\n    } = _ref;\n    const model = useProxiedModel(props, 'modelValue');\n    const isActive = computed({\n      get: () => model.value,\n      set: v => {\n        if (!(v && props.disabled)) model.value = v;\n      }\n    });\n    const {\n      teleportTarget\n    } = useTeleport(computed(() => props.attach || props.contained));\n    const {\n      themeClasses\n    } = provideTheme(props);\n    const {\n      rtlClasses,\n      isRtl\n    } = useRtl();\n    const {\n      hasContent,\n      onAfterLeave\n    } = useLazy(props, isActive);\n    const scrimColor = useBackgroundColor(computed(() => {\n      return typeof props.scrim === 'string' ? props.scrim : null;\n    }));\n    const {\n      globalTop,\n      localTop,\n      stackStyles\n    } = useStack(isActive, toRef(props, 'zIndex'), props._disableGlobalStack);\n    const {\n      activatorEl,\n      activatorRef,\n      activatorEvents,\n      contentEvents,\n      scrimEvents\n    } = useActivator(props, {\n      isActive,\n      isTop: localTop\n    });\n    const {\n      dimensionStyles\n    } = useDimension(props);\n    const isMounted = useHydration();\n    const {\n      scopeId\n    } = useScopeId();\n    watch(() => props.disabled, v => {\n      if (v) isActive.value = false;\n    });\n    const root = ref();\n    const contentEl = ref();\n    const {\n      contentStyles,\n      updateLocation\n    } = useLocationStrategies(props, {\n      isRtl,\n      contentEl,\n      activatorEl,\n      isActive\n    });\n    useScrollStrategies(props, {\n      root,\n      contentEl,\n      activatorEl,\n      isActive,\n      updateLocation\n    });\n\n    function onClickOutside(e) {\n      emit('click:outside', e);\n      if (!props.persistent) isActive.value = false;else animateClick();\n    }\n\n    function closeConditional() {\n      return isActive.value && globalTop.value;\n    }\n\n    IN_BROWSER && watch(isActive, val => {\n      if (val) {\n        window.addEventListener('keydown', onKeydown);\n      } else {\n        window.removeEventListener('keydown', onKeydown);\n      }\n    }, {\n      immediate: true\n    });\n\n    function onKeydown(e) {\n      if (e.key === 'Escape' && globalTop.value) {\n        if (!props.persistent) {\n          isActive.value = false;\n        } else animateClick();\n      }\n    }\n\n    const router = useRouter();\n    useToggleScope(() => props.closeOnBack, () => {\n      useBackButton(router, next => {\n        if (globalTop.value && isActive.value) {\n          next(false);\n          if (!props.persistent) isActive.value = false;else animateClick();\n        } else {\n          next();\n        }\n      });\n    });\n    const top = ref();\n    watch(() => isActive.value && (props.absolute || props.contained) && teleportTarget.value == null, val => {\n      if (val) {\n        const scrollParent = getScrollParent(root.value);\n\n        if (scrollParent && scrollParent !== document.scrollingElement) {\n          top.value = scrollParent.scrollTop;\n        }\n      }\n    }); // Add a quick \"bounce\" animation to the content\n\n    function animateClick() {\n      if (props.noClickAnimation) return;\n      contentEl.value && animate(contentEl.value, [{\n        transformOrigin: 'center'\n      }, {\n        transform: 'scale(1.03)'\n      }, {\n        transformOrigin: 'center'\n      }], {\n        duration: 150,\n        easing: standardEasing\n      });\n    }\n\n    useRender(() => _createVNode(_Fragment, null, [slots.activator?.({\n      isActive: isActive.value,\n      props: mergeProps({\n        ref: activatorRef\n      }, toHandlers(activatorEvents.value), props.activatorProps)\n    }), isMounted.value && _createVNode(Teleport, {\n      \"disabled\": !teleportTarget.value,\n      \"to\": teleportTarget.value\n    }, {\n      default: () => [hasContent.value && _createVNode(\"div\", _mergeProps({\n        \"class\": ['v-overlay', {\n          'v-overlay--absolute': props.absolute || props.contained,\n          'v-overlay--active': isActive.value,\n          'v-overlay--contained': props.contained\n        }, themeClasses.value, rtlClasses.value],\n        \"style\": [stackStyles.value, {\n          top: convertToUnit(top.value)\n        }],\n        \"ref\": root\n      }, scopeId, attrs), [_createVNode(Scrim, _mergeProps({\n        \"color\": scrimColor,\n        \"modelValue\": isActive.value && !!props.scrim\n      }, toHandlers(scrimEvents.value)), null), _createVNode(MaybeTransition, {\n        \"appear\": true,\n        \"persisted\": true,\n        \"transition\": props.transition,\n        \"target\": activatorEl.value,\n        \"onAfterLeave\": () => {\n          onAfterLeave();\n          emit('afterLeave');\n        }\n      }, {\n        default: () => [_withDirectives(_createVNode(\"div\", _mergeProps({\n          \"ref\": contentEl,\n          \"class\": ['v-overlay__content', props.contentClass],\n          \"style\": [dimensionStyles.value, contentStyles.value]\n        }, toHandlers(contentEvents.value), props.contentProps), [slots.default?.({\n          isActive\n        })]), [[_vShow, isActive.value], [_resolveDirective(\"click-outside\"), {\n          handler: onClickOutside,\n          closeConditional,\n          include: () => [activatorEl.value]\n        }]])]\n      })])]\n    })]));\n    return {\n      activatorEl,\n      animateClick,\n      contentEl,\n      globalTop,\n      localTop,\n      updateLocation\n    };\n  }\n\n});","map":{"version":3,"mappings":"gMAAA;;AACA,wB,CAEA;;AAAA,SACSA,kBADT,EAC6BC,YAD7B,QACyC,oBADzC;AACyC,SAChCC,kBADgC,EACZC,YADY,QACA,kCADA;AACA,SAChCC,aADgC,EACjBC,OADiB,QACV,4BADU;AACV,SACtBC,yBADsB,EACKC,qBADL,QAC0B,0BAD1B;AAC0B,SAChDC,uBADgD,EACvBC,mBADuB,QACJ,wBADI;AACJ,SAC5CC,cAD4C,EAC5BC,YAD4B,QAChB,6BADgB;AAChB,SAC5BC,mBAD4B,EACPC,eADO,QACQ,kCADR;AACQ,SACpCC,aADoC,EACrBC,SADqB,QACZ,8BADY;AACZ,SACxBC,kBADwB,QACN,6BADM;AACN,SAClBC,eADkB,QACH,oCADG;AACH,SACfC,YADe,QACH,iCADG;AACH,SACZC,MADY,QACN,8BADM;AACN,SACNC,UADM,QACI,+BADJ;AACI,SACVC,QADU,QACF,6BADE;AACF,SACRC,WADQ,QACG,gCADH;AACG,SACXC,cADW,QACG,mCADH,C,CAGpB;;AAAA,SACSC,YADT,QACqB,0CADrB,C,CAGA;;AAAA,SAEEC,OAFF,EAGEC,aAHF,EAIEC,gBAJF,EAKEC,eALF,EAMEC,UANF,EAOEC,YAPF,EAQEC,cARF,EASEC,SATF,QASW,sBATX;AAWA,SACEC,QADF,EAEEC,UAFF,EAGEC,GAHF,EAIEC,QAJF,EAKEC,UALF,EAMEC,KANF,EAOEC,UAPF,EAQEC,KARF,QASO,KATP,C,CAWA;;AAUA,SAASC,KAAT,CAAgBC,KAAhB,EAAmC;EACjC,MAAM;IAAEC,UAAF;IAAcC,KAAd;IAAqB,GAAGC;EAAxB,IAAiCH,KAAvC;EACA;IAAA,QACmB,iBADnB;IACoC;EADpC,GACoC;IAAAI,gBAC9BJ,KAAK,CAACC,UAAND,IAAgBK;MAAA,SAEP,CACL,kBADK,EAELL,KAAK,CAACE,KAANF,CAAYM,sBAAZN,CAAmCO,KAF9B,CAFO;MAKb,SACOP,KAAK,CAACE,KAANF,CAAYQ,qBAAZR,CAAkCO;IAN5B,GAOTJ,IAPS,GAOL,IAPK,CADc;EAAA,CADpC;AAcF;;AA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","names":["makeActivatorProps","useActivator","makeDimensionProps","useDimension","makeLazyProps","useLazy","makeLocationStrategyProps","useLocationStrategies","makeScrollStrategyProps","useScrollStrategies","makeThemeProps","provideTheme","makeTransitionProps","MaybeTransition","useBackButton","useRouter","useBackgroundColor","useProxiedModel","useHydration","useRtl","useScopeId","useStack","useTeleport","useToggleScope","ClickOutside","animate","convertToUnit","genericComponent","getScrollParent","IN_BROWSER","propsFactory","standardEasing","useRender","computed","mergeProps","ref","Teleport","toHandlers","toRef","Transition","watch","Scrim","props","modelValue","color","rest","default","_createVNode","backgroundColorClasses","value","backgroundColorStyles","makeVOverlayProps","absolute","Boolean","attach","String","Object","closeOnBack","type","contained","contentClass","contentProps","disabled","noClickAnimation","persistent","scrim","zIndex","Number","VOverlay","name","directives","inheritAttrs","_disableGlobalStack","emits","e","afterLeave","setup","_ref","slots","attrs","emit","model","isActive","get","set","v","teleportTarget","themeClasses","rtlClasses","isRtl","hasContent","onAfterLeave","scrimColor","globalTop","localTop","stackStyles","activatorEl","activatorRef","activatorEvents","contentEvents","scrimEvents","isTop","dimensionStyles","isMounted","scopeId","root","contentEl","contentStyles","updateLocation","onClickOutside","animateClick","closeConditional","val","window","addEventListener","onKeydown","removeEventListener","immediate","key","router","next","top","scrollParent","document","scrollingElement","scrollTop","transformOrigin","transform","duration","easing","activator","activatorProps","transition","handler","include"],"sources":["../../../src/components/VOverlay/VOverlay.tsx"],"sourcesContent":["// Styles\nimport './VOverlay.sass'\n\n// Composables\nimport { makeActivatorProps, useActivator } from './useActivator'\nimport { makeDimensionProps, useDimension } from '@/composables/dimensions'\nimport { makeLazyProps, useLazy } from '@/composables/lazy'\nimport { makeLocationStrategyProps, useLocationStrategies } from './locationStrategies'\nimport { makeScrollStrategyProps, useScrollStrategies } from './scrollStrategies'\nimport { makeThemeProps, provideTheme } from '@/composables/theme'\nimport { makeTransitionProps, MaybeTransition } from '@/composables/transition'\nimport { useBackButton, useRouter } from '@/composables/router'\nimport { useBackgroundColor } from '@/composables/color'\nimport { useProxiedModel } from '@/composables/proxiedModel'\nimport { useHydration } from '@/composables/hydration'\nimport { useRtl } from '@/composables/locale'\nimport { useScopeId } from '@/composables/scopeId'\nimport { useStack } from '@/composables/stack'\nimport { useTeleport } from '@/composables/teleport'\nimport { useToggleScope } from '@/composables/toggleScope'\n\n// Directives\nimport { ClickOutside } from '@/directives/click-outside'\n\n// Utilities\nimport {\n  animate,\n  convertToUnit,\n  genericComponent,\n  getScrollParent,\n  IN_BROWSER,\n  propsFactory,\n  standardEasing,\n  useRender,\n} from '@/util'\nimport {\n  computed,\n  mergeProps,\n  ref,\n  Teleport,\n  toHandlers,\n  toRef,\n  Transition,\n  watch,\n} from 'vue'\n\n// Types\nimport type { BackgroundColorData } from '@/composables/color'\nimport type { MakeSlots } from '@/util'\nimport type { PropType, Ref } from 'vue'\n\ninterface ScrimProps {\n  [key: string]: unknown\n  modelValue: boolean\n  color: BackgroundColorData\n}\nfunction Scrim (props: ScrimProps) {\n  const { modelValue, color, ...rest } = props\n  return (\n    <Transition name=\"fade-transition\" appear>\n      { props.modelValue && (\n        <div\n          class={[\n            'v-overlay__scrim',\n            props.color.backgroundColorClasses.value,\n          ]}\n          style={ props.color.backgroundColorStyles.value }\n          { ...rest }\n        />\n      )}\n    </Transition>\n  )\n}\n\nexport type OverlaySlots = MakeSlots<{\n  default: [{ isActive: Ref<boolean> }]\n  activator: [{ isActive: boolean, props: Record<string, any> }]\n}>\n\nexport const makeVOverlayProps = propsFactory({\n  absolute: Boolean,\n  attach: [Boolean, String, Object] as PropType<boolean | string | Element>,\n  closeOnBack: {\n    type: Boolean,\n    default: true,\n  },\n  contained: Boolean,\n  contentClass: null,\n  contentProps: null,\n  disabled: Boolean,\n  noClickAnimation: Boolean,\n  modelValue: Boolean,\n  persistent: Boolean,\n  scrim: {\n    type: [String, Boolean],\n    default: true,\n  },\n  zIndex: {\n    type: [Number, String],\n    default: 2000,\n  },\n\n  ...makeActivatorProps(),\n  ...makeDimensionProps(),\n  ...makeLazyProps(),\n  ...makeLocationStrategyProps(),\n  ...makeScrollStrategyProps(),\n  ...makeThemeProps(),\n  ...makeTransitionProps(),\n}, 'v-overlay')\n\nexport const VOverlay = genericComponent<OverlaySlots>()({\n  name: 'VOverlay',\n\n  directives: { ClickOutside },\n\n  inheritAttrs: false,\n\n  props: {\n    _disableGlobalStack: Boolean,\n\n    ...makeVOverlayProps(),\n  },\n\n  emits: {\n    'click:outside': (e: MouseEvent) => true,\n    'update:modelValue': (value: boolean) => true,\n    afterLeave: () => true,\n  },\n\n  setup (props, { slots, attrs, emit }) {\n    const model = useProxiedModel(props, 'modelValue')\n    const isActive = computed({\n      get: () => model.value,\n      set: v => {\n        if (!(v && props.disabled)) model.value = v\n      },\n    })\n    const { teleportTarget } = useTeleport(computed(() => props.attach || props.contained))\n    const { themeClasses } = provideTheme(props)\n    const { rtlClasses, isRtl } = useRtl()\n    const { hasContent, onAfterLeave } = useLazy(props, isActive)\n    const scrimColor = useBackgroundColor(computed(() => {\n      return typeof props.scrim === 'string' ? props.scrim : null\n    }))\n    const { globalTop, localTop, stackStyles } = useStack(isActive, toRef(props, 'zIndex'), props._disableGlobalStack)\n    const { activatorEl, activatorRef, activatorEvents, contentEvents, scrimEvents } = useActivator(props, { isActive, isTop: localTop })\n    const { dimensionStyles } = useDimension(props)\n    const isMounted = useHydration()\n    const { scopeId } = useScopeId()\n\n    watch(() => props.disabled, v => {\n      if (v) isActive.value = false\n    })\n\n    const root = ref<HTMLElement>()\n    const contentEl = ref<HTMLElement>()\n    const { contentStyles, updateLocation } = useLocationStrategies(props, {\n      isRtl,\n      contentEl,\n      activatorEl,\n      isActive,\n    })\n    useScrollStrategies(props, {\n      root,\n      contentEl,\n      activatorEl,\n      isActive,\n      updateLocation,\n    })\n\n    function onClickOutside (e: MouseEvent) {\n      emit('click:outside', e)\n\n      if (!props.persistent) isActive.value = false\n      else animateClick()\n    }\n\n    function closeConditional () {\n      return isActive.value && globalTop.value\n    }\n\n    IN_BROWSER && watch(isActive, val => {\n      if (val) {\n        window.addEventListener('keydown', onKeydown)\n      } else {\n        window.removeEventListener('keydown', onKeydown)\n      }\n    }, { immediate: true })\n\n    function onKeydown (e: KeyboardEvent) {\n      if (e.key === 'Escape' && globalTop.value) {\n        if (!props.persistent) {\n          isActive.value = false\n        } else animateClick()\n      }\n    }\n\n    const router = useRouter()\n    useToggleScope(() => props.closeOnBack, () => {\n      useBackButton(router, next => {\n        if (globalTop.value && isActive.value) {\n          next(false)\n          if (!props.persistent) isActive.value = false\n          else animateClick()\n        } else {\n          next()\n        }\n      })\n    })\n\n    const top = ref<number>()\n    watch(() => isActive.value && (props.absolute || props.contained) && teleportTarget.value == null, val => {\n      if (val) {\n        const scrollParent = getScrollParent(root.value)\n        if (scrollParent && scrollParent !== document.scrollingElement) {\n          top.value = scrollParent.scrollTop\n        }\n      }\n    })\n\n    // Add a quick \"bounce\" animation to the content\n    function animateClick () {\n      if (props.noClickAnimation) return\n\n      contentEl.value && animate(contentEl.value, [\n        { transformOrigin: 'center' },\n        { transform: 'scale(1.03)' },\n        { transformOrigin: 'center' },\n      ], {\n        duration: 150,\n        easing: standardEasing,\n      })\n    }\n\n    useRender(() => (\n      <>\n        { slots.activator?.({\n          isActive: isActive.value,\n          props: mergeProps({\n            ref: activatorRef,\n          }, toHandlers(activatorEvents.value), props.activatorProps),\n        })}\n\n        { isMounted.value && (\n          <Teleport\n            disabled={ !teleportTarget.value }\n            to={ teleportTarget.value }\n          >\n            { hasContent.value && (\n              <div\n                class={[\n                  'v-overlay',\n                  {\n                    'v-overlay--absolute': props.absolute || props.contained,\n                    'v-overlay--active': isActive.value,\n                    'v-overlay--contained': props.contained,\n                  },\n                  themeClasses.value,\n                  rtlClasses.value,\n                ]}\n                style={[stackStyles.value, { top: convertToUnit(top.value) }]}\n                ref={ root }\n                { ...scopeId }\n                { ...attrs }\n              >\n                <Scrim\n                  color={ scrimColor }\n                  modelValue={ isActive.value && !!props.scrim }\n                  { ...toHandlers(scrimEvents.value) }\n                />\n                <MaybeTransition\n                  appear\n                  persisted\n                  transition={ props.transition }\n                  target={ activatorEl.value }\n                  onAfterLeave={ () => { onAfterLeave(); emit('afterLeave') } }\n                >\n                  <div\n                    ref={ contentEl }\n                    v-show={ isActive.value }\n                    v-click-outside={{ handler: onClickOutside, closeConditional, include: () => [activatorEl.value] }}\n                    class={[\n                      'v-overlay__content',\n                      props.contentClass,\n                    ]}\n                    style={[\n                      dimensionStyles.value,\n                      contentStyles.value,\n                    ]}\n                    { ...toHandlers(contentEvents.value) }\n                    { ...props.contentProps }\n                  >\n                    { slots.default?.({ isActive }) }\n                  </div>\n                </MaybeTransition>\n              </div>\n            )}\n          </Teleport>\n        )}\n      </>\n    ))\n\n    return {\n      activatorEl,\n      animateClick,\n      contentEl,\n      globalTop,\n      localTop,\n      updateLocation,\n    }\n  },\n})\n\nexport type VOverlay = InstanceType<typeof VOverlay>\n"]},"metadata":{},"sourceType":"module"}