{"ast":null,"code":"import { createVNode as _createVNode } from \"vue\"; // Styles\n\nimport \"./VSelectionControlGroup.css\"; // Composables\n\nimport { IconValue } from \"../../composables/icons.mjs\";\nimport { makeDensityProps } from \"../../composables/density.mjs\";\nimport { makeThemeProps } from \"../../composables/theme.mjs\";\nimport { provideDefaults } from \"../../composables/defaults.mjs\";\nimport { useProxiedModel } from \"../../composables/proxiedModel.mjs\"; // Utilities\n\nimport { computed, onScopeDispose, provide, toRef } from 'vue';\nimport { deepEqual, genericComponent, getUid, propsFactory, useRender } from \"../../util/index.mjs\"; // Types\n\nexport const VSelectionControlGroupSymbol = Symbol.for('vuetify:selection-control-group');\nexport const makeSelectionControlGroupProps = propsFactory({\n  color: String,\n  disabled: Boolean,\n  error: Boolean,\n  id: String,\n  inline: Boolean,\n  falseIcon: IconValue,\n  trueIcon: IconValue,\n  ripple: {\n    type: Boolean,\n    default: true\n  },\n  multiple: {\n    type: Boolean,\n    default: null\n  },\n  name: String,\n  readonly: Boolean,\n  modelValue: null,\n  type: String,\n  valueComparator: {\n    type: Function,\n    default: deepEqual\n  },\n  ...makeThemeProps(),\n  ...makeDensityProps()\n}, 'v-selection-control-group');\nexport const VSelectionControlGroup = genericComponent()({\n  name: 'VSelectionControlGroup',\n  props: {\n    defaultsTarget: {\n      type: String,\n      default: 'VSelectionControl'\n    },\n    ...makeSelectionControlGroupProps()\n  },\n  emits: {\n    'update:modelValue': val => true\n  },\n\n  setup(props, _ref) {\n    let {\n      slots\n    } = _ref;\n    const modelValue = useProxiedModel(props, 'modelValue');\n    const uid = getUid();\n    const id = computed(() => props.id || `v-selection-control-group-${uid}`);\n    const name = computed(() => props.name || id.value);\n    const updateHandlers = new Set();\n    provide(VSelectionControlGroupSymbol, {\n      modelValue,\n      forceUpdate: () => {\n        updateHandlers.forEach(fn => fn());\n      },\n      onForceUpdate: cb => {\n        updateHandlers.add(cb);\n        onScopeDispose(() => {\n          updateHandlers.delete(cb);\n        });\n      }\n    });\n    provideDefaults({\n      [props.defaultsTarget]: {\n        color: toRef(props, 'color'),\n        disabled: toRef(props, 'disabled'),\n        density: toRef(props, 'density'),\n        error: toRef(props, 'error'),\n        inline: toRef(props, 'inline'),\n        modelValue,\n        multiple: computed(() => !!props.multiple || props.multiple == null && Array.isArray(modelValue.value)),\n        name,\n        falseIcon: toRef(props, 'falseIcon'),\n        trueIcon: toRef(props, 'trueIcon'),\n        readonly: toRef(props, 'readonly'),\n        ripple: toRef(props, 'ripple'),\n        type: toRef(props, 'type'),\n        valueComparator: toRef(props, 'valueComparator')\n      }\n    });\n    useRender(() => _createVNode(\"div\", {\n      \"class\": ['v-selection-control-group', {\n        'v-selection-control-group--inline': props.inline\n      }],\n      \"role\": props.type === 'radio' ? 'radiogroup' : undefined\n    }, [slots.default?.()]));\n    return {};\n  }\n\n});","map":{"version":3,"mappings":"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","names":["IconValue","makeDensityProps","makeThemeProps","provideDefaults","useProxiedModel","computed","onScopeDispose","provide","toRef","deepEqual","genericComponent","getUid","propsFactory","useRender","VSelectionControlGroupSymbol","Symbol","for","makeSelectionControlGroupProps","color","String","disabled","Boolean","error","id","inline","falseIcon","trueIcon","ripple","type","default","multiple","name","readonly","modelValue","valueComparator","Function","VSelectionControlGroup","props","defaultsTarget","emits","val","setup","_ref","slots","uid","value","updateHandlers","Set","forceUpdate","forEach","fn","onForceUpdate","cb","add","delete","density","Array","isArray","undefined"],"sources":["../../../src/components/VSelectionControlGroup/VSelectionControlGroup.tsx"],"sourcesContent":["// Styles\nimport './VSelectionControlGroup.sass'\n\n// Composables\nimport { IconValue } from '@/composables/icons'\nimport { makeDensityProps } from '@/composables/density'\nimport { makeThemeProps } from '@/composables/theme'\nimport { provideDefaults } from '@/composables/defaults'\nimport { useProxiedModel } from '@/composables/proxiedModel'\n\n// Utilities\nimport { computed, onScopeDispose, provide, toRef } from 'vue'\nimport { deepEqual, genericComponent, getUid, propsFactory, useRender } from '@/util'\n\n// Types\nimport type { InjectionKey, PropType, Ref } from 'vue'\n\nexport interface VSelectionGroupContext {\n  modelValue: Ref<any>\n  forceUpdate: () => void\n  onForceUpdate: (fn: () => void) => void\n}\n\nexport const VSelectionControlGroupSymbol: InjectionKey<VSelectionGroupContext> = Symbol.for('vuetify:selection-control-group')\n\nexport const makeSelectionControlGroupProps = propsFactory({\n  color: String,\n  disabled: Boolean,\n  error: Boolean,\n  id: String,\n  inline: Boolean,\n  falseIcon: IconValue,\n  trueIcon: IconValue,\n  ripple: {\n    type: Boolean,\n    default: true,\n  },\n  multiple: {\n    type: Boolean as PropType<boolean | null>,\n    default: null,\n  },\n  name: String,\n  readonly: Boolean,\n  modelValue: null,\n  type: String,\n  valueComparator: {\n    type: Function as PropType<typeof deepEqual>,\n    default: deepEqual,\n  },\n\n  ...makeThemeProps(),\n  ...makeDensityProps(),\n}, 'v-selection-control-group')\n\nexport const VSelectionControlGroup = genericComponent()({\n  name: 'VSelectionControlGroup',\n\n  props: {\n    defaultsTarget: {\n      type: String,\n      default: 'VSelectionControl',\n    },\n\n    ...makeSelectionControlGroupProps(),\n  },\n\n  emits: {\n    'update:modelValue': (val: any) => true,\n  },\n\n  setup (props, { slots }) {\n    const modelValue = useProxiedModel(props, 'modelValue')\n    const uid = getUid()\n    const id = computed(() => props.id || `v-selection-control-group-${uid}`)\n    const name = computed(() => props.name || id.value)\n\n    const updateHandlers = new Set<() => void>()\n    provide(VSelectionControlGroupSymbol, {\n      modelValue,\n      forceUpdate: () => {\n        updateHandlers.forEach(fn => fn())\n      },\n      onForceUpdate: cb => {\n        updateHandlers.add(cb)\n        onScopeDispose(() => {\n          updateHandlers.delete(cb)\n        })\n      },\n    })\n\n    provideDefaults({\n      [props.defaultsTarget]: {\n        color: toRef(props, 'color'),\n        disabled: toRef(props, 'disabled'),\n        density: toRef(props, 'density'),\n        error: toRef(props, 'error'),\n        inline: toRef(props, 'inline'),\n        modelValue,\n        multiple: computed(() => !!props.multiple || (props.multiple == null && Array.isArray(modelValue.value))),\n        name,\n        falseIcon: toRef(props, 'falseIcon'),\n        trueIcon: toRef(props, 'trueIcon'),\n        readonly: toRef(props, 'readonly'),\n        ripple: toRef(props, 'ripple'),\n        type: toRef(props, 'type'),\n        valueComparator: toRef(props, 'valueComparator'),\n      },\n    })\n\n    useRender(() => (\n      <div\n        class={[\n          'v-selection-control-group',\n          { 'v-selection-control-group--inline': props.inline },\n        ]}\n        role={ props.type === 'radio' ? 'radiogroup' : undefined }\n      >\n        { slots.default?.() }\n      </div>\n    ))\n\n    return {}\n  },\n})\n\nexport type VSelectionControlGroup = InstanceType<typeof VSelectionControlGroup>\n"]},"metadata":{},"sourceType":"module"}