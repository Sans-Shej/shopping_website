{"ast":null,"code":"import { mergeProps as _mergeProps, Fragment as _Fragment, withDirectives as _withDirectives, vShow as _vShow, resolveDirective as _resolveDirective, createVNode as _createVNode } from \"vue\"; // Styles\n\nimport \"./VField.css\"; // Components\n\nimport { VExpandXTransition } from \"../transitions/index.mjs\";\nimport { useInputIcon } from \"../VInput/InputIcon.mjs\";\nimport { VFieldLabel } from \"./VFieldLabel.mjs\"; // Composables\n\nimport { IconValue } from \"../../composables/icons.mjs\";\nimport { LoaderSlot, makeLoaderProps, useLoader } from \"../../composables/loader.mjs\";\nimport { makeFocusProps, useFocus } from \"../../composables/focus.mjs\";\nimport { makeThemeProps, provideTheme } from \"../../composables/theme.mjs\";\nimport { useBackgroundColor, useTextColor } from \"../../composables/color.mjs\"; // Utilities\n\nimport { computed, ref, toRef, watch } from 'vue';\nimport { animate, convertToUnit, EventProp, genericComponent, getUid, isOn, nullifyTransforms, pick, propsFactory, standardEasing, useRender } from \"../../util/index.mjs\"; // Types\n\nconst allowedVariants = ['underlined', 'outlined', 'filled', 'solo', 'plain'];\nexport const makeVFieldProps = propsFactory({\n  appendInnerIcon: IconValue,\n  bgColor: String,\n  clearable: Boolean,\n  clearIcon: {\n    type: IconValue,\n    default: '$clear'\n  },\n  active: Boolean,\n  color: String,\n  dirty: Boolean,\n  disabled: Boolean,\n  error: Boolean,\n  label: String,\n  persistentClear: Boolean,\n  prependInnerIcon: IconValue,\n  reverse: Boolean,\n  singleLine: Boolean,\n  variant: {\n    type: String,\n    default: 'filled',\n    validator: v => allowedVariants.includes(v)\n  },\n  'onClick:clear': EventProp(),\n  'onClick:appendInner': EventProp(),\n  'onClick:prependInner': EventProp(),\n  ...makeThemeProps(),\n  ...makeLoaderProps()\n}, 'v-field');\nexport const VField = genericComponent()({\n  name: 'VField',\n  inheritAttrs: false,\n  props: {\n    id: String,\n    ...makeFocusProps(),\n    ...makeVFieldProps()\n  },\n  emits: {\n    'update:focused': focused => true,\n    'update:modelValue': val => true\n  },\n\n  setup(props, _ref) {\n    let {\n      attrs,\n      emit,\n      slots\n    } = _ref;\n    const {\n      themeClasses\n    } = provideTheme(props);\n    const {\n      loaderClasses\n    } = useLoader(props);\n    const {\n      focusClasses,\n      isFocused,\n      focus,\n      blur\n    } = useFocus(props);\n    const {\n      InputIcon\n    } = useInputIcon(props);\n    const isActive = computed(() => props.dirty || props.active);\n    const hasLabel = computed(() => !props.singleLine && !!(props.label || slots.label));\n    const uid = getUid();\n    const id = computed(() => props.id || `input-${uid}`);\n    const messagesId = computed(() => `${id.value}-messages`);\n    const labelRef = ref();\n    const floatingLabelRef = ref();\n    const controlRef = ref();\n    const {\n      backgroundColorClasses,\n      backgroundColorStyles\n    } = useBackgroundColor(toRef(props, 'bgColor'));\n    const {\n      textColorClasses,\n      textColorStyles\n    } = useTextColor(computed(() => {\n      return isActive.value && isFocused.value && !props.error && !props.disabled ? props.color : undefined;\n    }));\n    watch(isActive, val => {\n      if (hasLabel.value) {\n        const el = labelRef.value.$el;\n        const targetEl = floatingLabelRef.value.$el;\n        requestAnimationFrame(() => {\n          const rect = nullifyTransforms(el);\n          const targetRect = targetEl.getBoundingClientRect();\n          const x = targetRect.x - rect.x;\n          const y = targetRect.y - rect.y - (rect.height / 2 - targetRect.height / 2);\n          const targetWidth = targetRect.width / 0.75;\n          const width = Math.abs(targetWidth - rect.width) > 1 ? {\n            maxWidth: convertToUnit(targetWidth)\n          } : undefined;\n          const style = getComputedStyle(el);\n          const targetStyle = getComputedStyle(targetEl);\n          const duration = parseFloat(style.transitionDuration) * 1000 || 150;\n          const scale = parseFloat(targetStyle.getPropertyValue('--v-field-label-scale'));\n          const color = targetStyle.getPropertyValue('color');\n          el.style.visibility = 'visible';\n          targetEl.style.visibility = 'hidden';\n          animate(el, {\n            transform: `translate(${x}px, ${y}px) scale(${scale})`,\n            color,\n            ...width\n          }, {\n            duration,\n            easing: standardEasing,\n            direction: val ? 'normal' : 'reverse'\n          }).finished.then(() => {\n            el.style.removeProperty('visibility');\n            targetEl.style.removeProperty('visibility');\n          });\n        });\n      }\n    }, {\n      flush: 'post'\n    });\n    const slotProps = computed(() => ({\n      isActive,\n      isFocused,\n      controlRef,\n      blur,\n      focus\n    }));\n\n    function onClick(e) {\n      if (e.target !== document.activeElement) {\n        e.preventDefault();\n      }\n    }\n\n    useRender(() => {\n      const isOutlined = props.variant === 'outlined';\n      const hasPrepend = slots['prepend-inner'] || props.prependInnerIcon;\n      const hasClear = !!(props.clearable || slots.clear);\n      const hasAppend = !!(slots['append-inner'] || props.appendInnerIcon || hasClear);\n      const label = slots.label ? slots.label({\n        label: props.label,\n        props: {\n          for: id.value\n        }\n      }) : props.label;\n      return _createVNode(\"div\", _mergeProps({\n        \"class\": ['v-field', {\n          'v-field--active': isActive.value,\n          'v-field--appended': hasAppend,\n          'v-field--disabled': props.disabled,\n          'v-field--dirty': props.dirty,\n          'v-field--error': props.error,\n          'v-field--has-background': !!props.bgColor,\n          'v-field--persistent-clear': props.persistentClear,\n          'v-field--prepended': hasPrepend,\n          'v-field--reverse': props.reverse,\n          'v-field--single-line': props.singleLine,\n          'v-field--no-label': !label,\n          [`v-field--variant-${props.variant}`]: true\n        }, themeClasses.value, backgroundColorClasses.value, focusClasses.value, loaderClasses.value],\n        \"style\": [backgroundColorStyles.value, textColorStyles.value],\n        \"onClick\": onClick\n      }, attrs), [_createVNode(\"div\", {\n        \"class\": \"v-field__overlay\"\n      }, null), _createVNode(LoaderSlot, {\n        \"name\": \"v-field\",\n        \"active\": !!props.loading,\n        \"color\": props.error ? 'error' : props.color\n      }, {\n        default: slots.loader\n      }), hasPrepend && _createVNode(\"div\", {\n        \"key\": \"prepend\",\n        \"class\": \"v-field__prepend-inner\"\n      }, [props.prependInnerIcon && _createVNode(InputIcon, {\n        \"key\": \"prepend-icon\",\n        \"name\": \"prependInner\"\n      }, null), slots['prepend-inner']?.(slotProps.value)]), _createVNode(\"div\", {\n        \"class\": \"v-field__field\",\n        \"data-no-activator\": \"\"\n      }, [['solo', 'filled'].includes(props.variant) && hasLabel.value && _createVNode(VFieldLabel, {\n        \"key\": \"floating-label\",\n        \"ref\": floatingLabelRef,\n        \"class\": [textColorClasses.value],\n        \"floating\": true,\n        \"for\": id.value\n      }, {\n        default: () => [label]\n      }), _createVNode(VFieldLabel, {\n        \"ref\": labelRef,\n        \"for\": id.value\n      }, {\n        default: () => [label]\n      }), slots.default?.({ ...slotProps.value,\n        props: {\n          id: id.value,\n          class: 'v-field__input',\n          'aria-describedby': messagesId.value\n        },\n        focus,\n        blur\n      })]), hasClear && _createVNode(VExpandXTransition, {\n        \"key\": \"clear\"\n      }, {\n        default: () => [_withDirectives(_createVNode(\"div\", {\n          \"class\": \"v-field__clearable\",\n          \"onMousedown\": e => {\n            e.preventDefault();\n            e.stopPropagation();\n          }\n        }, [slots.clear ? slots.clear() : _createVNode(InputIcon, {\n          \"name\": \"clear\"\n        }, null)]), [[_vShow, props.dirty]])]\n      }), hasAppend && _createVNode(\"div\", {\n        \"key\": \"append\",\n        \"class\": \"v-field__append-inner\"\n      }, [slots['append-inner']?.(slotProps.value), props.appendInnerIcon && _createVNode(InputIcon, {\n        \"key\": \"append-icon\",\n        \"name\": \"appendInner\"\n      }, null)]), _createVNode(\"div\", {\n        \"class\": ['v-field__outline', textColorClasses.value]\n      }, [isOutlined && _createVNode(_Fragment, null, [_createVNode(\"div\", {\n        \"class\": \"v-field__outline__start\"\n      }, null), hasLabel.value && _createVNode(\"div\", {\n        \"class\": \"v-field__outline__notch\"\n      }, [_createVNode(VFieldLabel, {\n        \"ref\": floatingLabelRef,\n        \"floating\": true,\n        \"for\": id.value\n      }, {\n        default: () => [label]\n      })]), _createVNode(\"div\", {\n        \"class\": \"v-field__outline__end\"\n      }, null)]), ['plain', 'underlined'].includes(props.variant) && hasLabel.value && _createVNode(VFieldLabel, {\n        \"ref\": floatingLabelRef,\n        \"floating\": true,\n        \"for\": id.value\n      }, {\n        default: () => [label]\n      })])]);\n    });\n    return {\n      controlRef\n    };\n  }\n\n}); // TODO: this is kinda slow, might be better to implicitly inherit props instead\n\nexport function filterFieldProps(attrs) {\n  const keys = Object.keys(VField.props).filter(k => !isOn(k));\n  return pick(attrs, keys);\n}","map":{"version":3,"mappings":"gMAAA;;AACA,sB,CAEA;;AAAA,SACSA,kBADT,QAC2B,0BAD3B;AAC2B,SAClBC,YADkB,QACN,yBADM;AACN,SACZC,WADY,QACD,mBADC,C,CAGrB;;AAAA,SACSC,SADT,QACkB,6BADlB;AACkB,SACTC,UADS,EACGC,eADH,EACoBC,SADpB,QAC6B,8BAD7B;AAC6B,SACtCC,cADsC,EACtBC,QADsB,QACd,6BADc;AACd,SACxBC,cADwB,EACRC,YADQ,QACI,6BADJ;AACI,SAC5BC,kBAD4B,EACRC,YADQ,QACI,6BADJ,C,CAGrC;;AACA,SAASC,QAAT,EAAmBC,GAAnB,EAAwBC,KAAxB,EAA+BC,KAA/B,QAA4C,KAA5C;AAAiD,SAE/CC,OAF+C,EAG/CC,aAH+C,EAI/CC,SAJ+C,EAK/CC,gBAL+C,EAM/CC,MAN+C,EAO/CC,IAP+C,EAQ/CC,iBAR+C,EAS/CC,IAT+C,EAU/CC,YAV+C,EAW/CC,cAX+C,EAY/CC,SAZ+C,QAYtC,sBAZsC,C,CAejD;;AAMA,MAAMC,eAAe,GAAG,CAAC,YAAD,EAAe,UAAf,EAA2B,QAA3B,EAAqC,MAArC,EAA6C,OAA7C,CAAxB;AAeA,OAAO,MAAMC,eAAe,GAAGJ,YAAY,CAAC;EAC1CK,eAAe,EAAE3B,SADyB;EAE1C4B,OAAO,EAAEC,MAFiC;EAG1CC,SAAS,EAAEC,OAH+B;EAI1CC,SAAS,EAAE;IACTC,IAAI,EAAEjC,SADG;IAETkC,OAAO,EAAE;EAFA,CAJ+B;EAQ1CC,MAAM,EAAEJ,OARkC;EAS1CK,KAAK,EAAEP,MATmC;EAU1CQ,KAAK,EAAEN,OAVmC;EAW1CO,QAAQ,EAAEP,OAXgC;EAY1CQ,KAAK,EAAER,OAZmC;EAa1CS,KAAK,EAAEX,MAbmC;EAc1CY,eAAe,EAAEV,OAdyB;EAe1CW,gBAAgB,EAAE1C,SAfwB;EAgB1C2C,OAAO,EAAEZ,OAhBiC;EAiB1Ca,UAAU,EAAEb,OAjB8B;EAkB1Cc,OAAO,EAAE;IACPZ,IAAI,EAAEJ,MADC;IAEPK,OAAO,EAAE,QAFF;IAGPY,SAAS,EAAGC,CAAM,IAAKtB,eAAe,CAACuB,QAAhBvB,CAAyBsB,CAAzBtB;EAHhB,CAlBiC;EAwB1C,iBAAiBT,SAAS,EAxBgB;EAyB1C,uBAAuBA,SAAS,EAzBU;EA0B1C,wBAAwBA,SAAS,EA1BS;EA4B1C,GAAGV,cAAc,EA5ByB;EA6B1C,GAAGJ,eAAe;AA7BwB,CAAD,EA8BxC,SA9BwC,CAApC;AAyCP,OAAO,MAAM+C,MAAM,GAAGhC,gBAAgB,GAKjC;EACHiC,IAAI,EAAE,QADH;EAGHC,YAAY,EAAE,KAHX;EAKHC,KAAK,EAAE;IACLC,EAAE,EAAExB,MADC;IAGL,GAAGzB,cAAc,EAHZ;IAIL,GAAGsB,eAAe;EAJb,CALJ;EAYH4B,KAAK,EAAE;IACL,kBAAmBC,OAAgB,IAAK,IADnC;IAEL,qBAAsBC,GAAQ,IAAK;EAF9B,CAZJ;;EAiBHC,KAAKA,CAAEL,KAAFK,EAAOC,IAAPD,EAAiC;IAAA,IAAxB;MAAEE,KAAF;MAASC,IAAT;MAAeC;IAAf,IAAsBH,IAAE;IACpC,MAAM;MAAEI;IAAF,IAAmBvD,YAAY,CAAC6C,KAAD,CAArC;IACA,MAAM;MAAEW;IAAF,IAAoB5D,SAAS,CAACiD,KAAD,CAAnC;IACA,MAAM;MAAEY,YAAF;MAAgBC,SAAhB;MAA2BC,KAA3B;MAAkCC;IAAlC,IAA2C9D,QAAQ,CAAC+C,KAAD,CAAzD;IACA,MAAM;MAAEgB;IAAF,IAAgBtE,YAAY,CAACsD,KAAD,CAAlC;IAEA,MAAMiB,QAAQ,GAAG3D,QAAQ,CAAC,MAAM0C,KAAK,CAACf,KAANe,IAAeA,KAAK,CAACjB,MAA5B,CAAzB;IACA,MAAMmC,QAAQ,GAAG5D,QAAQ,CAAC,MAAM,CAAC0C,KAAK,CAACR,UAAP,IAAqB,CAAC,EAAEQ,KAAK,CAACZ,KAANY,IAAeS,KAAK,CAACrB,KAAvB,CAA7B,CAAzB;IAEA,MAAM+B,GAAG,GAAGrD,MAAM,EAAlB;IACA,MAAMmC,EAAE,GAAG3C,QAAQ,CAAC,MAAM0C,KAAK,CAACC,EAAND,IAAa,SAAQmB,GAAI,EAAhC,CAAnB;IACA,MAAMC,UAAU,GAAG9D,QAAQ,CAAC,MAAO,GAAE2C,EAAE,CAACoB,KAAM,WAAnB,CAA3B;IAEA,MAAMC,QAAQ,GAAG/D,GAAG,EAApB;IACA,MAAMgE,gBAAgB,GAAGhE,GAAG,EAA5B;IACA,MAAMiE,UAAU,GAAGjE,GAAG,EAAtB;IAEA,MAAM;MAAEkE,sBAAF;MAA0BC;IAA1B,IAAoDtE,kBAAkB,CAACI,KAAK,CAACwC,KAAD,EAAQ,SAAR,CAAN,CAA5E;IACA,MAAM;MAAE2B,gBAAF;MAAoBC;IAApB,IAAwCvE,YAAY,CAACC,QAAQ,CAAC,MAAM;MACxE,OACE2D,QAAQ,CAACI,KAATJ,IACAJ,SAAS,CAACQ,KADVJ,IAEA,CAACjB,KAAK,CAACb,KAFP8B,IAGA,CAACjB,KAAK,CAACd,QAHP+B,GAIEjB,KAAK,CAAChB,KAJRiC,GAIgBY,SALlB;IAMD,CAPkE,CAAT,CAA1D;IASApE,KAAK,CAACwD,QAAD,EAAWb,GAAG,IAAI;MACrB,IAAIc,QAAQ,CAACG,KAAb,EAAoB;QAClB,MAAMS,EAAe,GAAGR,QAAQ,CAACD,KAATC,CAAgBS,GAAxC;QACA,MAAMC,QAAqB,GAAGT,gBAAgB,CAACF,KAAjBE,CAAwBQ,GAAtD;QAEAE,qBAAqB,CAAC,MAAM;UAC1B,MAAMC,IAAI,GAAGlE,iBAAiB,CAAC8D,EAAD,CAA9B;UACA,MAAMK,UAAU,GAAGH,QAAQ,CAACI,qBAATJ,EAAnB;UAEA,MAAMK,CAAC,GAAGF,UAAU,CAACE,CAAXF,GAAeD,IAAI,CAACG,CAA9B;UACA,MAAMC,CAAC,GAAGH,UAAU,CAACG,CAAXH,GAAeD,IAAI,CAACI,CAApBH,IAAyBD,IAAI,CAACK,MAALL,GAAc,CAAdA,GAAkBC,UAAU,CAACI,MAAXJ,GAAoB,CAA/DA,CAAV;UAEA,MAAMK,WAAW,GAAGL,UAAU,CAACM,KAAXN,GAAmB,IAAvC;UACA,MAAMM,KAAK,GAAGC,IAAI,CAACC,GAALD,CAASF,WAAW,GAAGN,IAAI,CAACO,KAA5BC,IAAqC,CAArCA,GACV;YAAEE,QAAQ,EAAEjF,aAAa,CAAC6E,WAAD;UAAzB,CADUE,GAEVb,SAFJ;UAIA,MAAMgB,KAAK,GAAGC,gBAAgB,CAAChB,EAAD,CAA9B;UACA,MAAMiB,WAAW,GAAGD,gBAAgB,CAACd,QAAD,CAApC;UACA,MAAMgB,QAAQ,GAAGC,UAAU,CAACJ,KAAK,CAACK,kBAAP,CAAVD,GAAuC,IAAvCA,IAA+C,GAAhE;UACA,MAAME,KAAK,GAAGF,UAAU,CAACF,WAAW,CAACK,gBAAZL,CAA6B,uBAA7BA,CAAD,CAAxB;UACA,MAAM/D,KAAK,GAAG+D,WAAW,CAACK,gBAAZL,CAA6B,OAA7BA,CAAd;UAEAjB,EAAE,CAACe,KAAHf,CAASuB,UAATvB,GAAsB,SAAtBA;UACAE,QAAQ,CAACa,KAATb,CAAeqB,UAAfrB,GAA4B,QAA5BA;UAEAtE,OAAO,CAACoE,EAAD,EAAK;YACVwB,SAAS,EAAG,aAAYjB,CAAE,OAAMC,CAAE,aAAYa,KAAM,GAD1C;YAEVnE,KAFU;YAGV,GAAGyD;UAHO,CAAL,EAIJ;YACDO,QADC;YAEDO,MAAM,EAAEpF,cAFP;YAGDqF,SAAS,EAAEpD,GAAG,GAAG,QAAH,GAAc;UAH3B,CAJI,CAAP1C,CAQG+F,QARH/F,CAQYgG,IARZhG,CAQiB,MAAM;YACrBoE,EAAE,CAACe,KAAHf,CAAS6B,cAAT7B,CAAwB,YAAxBA;YACAE,QAAQ,CAACa,KAATb,CAAe2B,cAAf3B,CAA8B,YAA9BA;UACD,CAXDtE;QAYD,CAjCoB,CAArBuE;MAkCF;IACD,CAxCI,EAwCF;MAAE2B,KAAK,EAAE;IAAT,CAxCE,CAALnG;IA0CA,MAAMoG,SAAS,GAAGvG,QAAQ,CAAmB,OAAO;MAClD2D,QADkD;MAElDJ,SAFkD;MAGlDW,UAHkD;MAIlDT,IAJkD;MAKlDD;IALkD,CAAP,CAAnB,CAA1B;;IAQA,SAASgD,OAAT,CAAkBC,CAAlB,EAAiC;MAC/B,IAAIA,CAAC,CAACC,MAAFD,KAAaE,QAAQ,CAACC,aAA1B,EAAyC;QACvCH,CAAC,CAACI,cAAFJ;MACF;IACF;;IAEA3F,SAAS,CAAC,MAAM;MACd,MAAMgG,UAAU,GAAGpE,KAAK,CAACP,OAANO,KAAkB,UAArC;MACA,MAAMqE,UAAU,GAAI5D,KAAK,CAAC,eAAD,CAALA,IAA0BT,KAAK,CAACV,gBAApD;MACA,MAAMgF,QAAQ,GAAG,CAAC,EAAEtE,KAAK,CAACtB,SAANsB,IAAmBS,KAAK,CAAC8D,KAA3B,CAAlB;MACA,MAAMC,SAAS,GAAG,CAAC,EAAE/D,KAAK,CAAC,cAAD,CAALA,IAAyBT,KAAK,CAACzB,eAA/BkC,IAAkD6D,QAApD,CAAnB;MACA,MAAMlF,KAAK,GAAGqB,KAAK,CAACrB,KAANqB,GACVA,KAAK,CAACrB,KAANqB,CAAY;QACZrB,KAAK,EAAEY,KAAK,CAACZ,KADD;QAEZY,KAAK,EAAE;UAAEyE,GAAG,EAAExE,EAAE,CAACoB;QAAV;MAFK,CAAZZ,CADUA,GAKVT,KAAK,CAACZ,KALV;MAOA;QAAA,SAEW,CACL,SADK,EAEL;UACE,mBAAmB6B,QAAQ,CAACI,KAD9B;UAEE,qBAAqBmD,SAFvB;UAGE,qBAAqBxE,KAAK,CAACd,QAH7B;UAIE,kBAAkBc,KAAK,CAACf,KAJ1B;UAKE,kBAAkBe,KAAK,CAACb,KAL1B;UAME,2BAA2B,CAAC,CAACa,KAAK,CAACxB,OANrC;UAOE,6BAA6BwB,KAAK,CAACX,eAPrC;UAQE,sBAAsBgF,UARxB;UASE,oBAAoBrE,KAAK,CAACT,OAT5B;UAUE,wBAAwBS,KAAK,CAACR,UAVhC;UAWE,qBAAqB,CAACJ,KAXxB;UAYE,CAAE,oBAAmBY,KAAK,CAACP,OAAQ,EAAnC,GAAuC;QAZzC,CAFK,EAgBLiB,YAAY,CAACW,KAhBR,EAiBLI,sBAAsB,CAACJ,KAjBlB,EAkBLT,YAAY,CAACS,KAlBR,EAmBLV,aAAa,CAACU,KAnBT,CAFX;QAsBK,SACM,CACLK,qBAAqB,CAACL,KADjB,EAELO,eAAe,CAACP,KAFX,CAvBX;QA0BK,WACSyC;MA3Bd,GA4BSvD,KA5BT,GA4Bc;QAAA,SAEC;MAFD,GAEmB,IAFnB,GAEmBmE;QAAA,QAGtB,SAHsB;QAGb,UACL,CAAC,CAAC1E,KAAK,CAAC2E,OAJU;QAIH,SAChB3E,KAAK,CAACb,KAANa,GAAc,OAAdA,GAAwBA,KAAK,CAAChB;MALX,GAMlB;QAAEF,OAAO,EAAE2B,KAAK,CAACmE;MAAjB,CANkB,CAFnB,EAWRP,UAAU;QAAA,OACD,SADC;QACQ,SAAO;MADf,GACuC,CAC7CrE,KAAK,CAACV,gBAANU,IAAsB0E;QAAA,OACP,cADO;QACO,QAAM;MADb,GAC2B,IAD3B,CADuB,EAK7CjE,KAAK,CAAC,eAAD,CAALA,GAAyBoD,SAAS,CAACxC,KAAnCZ,CAL6C,CADvC,CAXF,EAmBTiE;QAAA,SAEU,gBAFV;QAE0B,qBAAmB;MAF7C,GAE+C,CAC7C,CAAC,MAAD,EAAS,QAAT,EAAmB9E,QAAnB,CAA4BI,KAAK,CAACP,OAAlC,KAA8CyB,QAAQ,CAACG,KAAvD,IAA4DqD;QAAA,OAErD,gBAFqD;QAErC,OACdnD,gBAHmD;QAGnC,SACf,CAACI,gBAAgB,CAACN,KAAlB,CAJkD;QAI1B,gBAJ0B;QAI1B,OAEzBpB,EAAE,CAACoB;MANgD,GAM3C;QAAAvC,gBAEZM,KAFY;MAAA,CAN2C,CADf,EAW7CsF;QAAA,OAEkBpD,QAFlB;QAE0B,OAASrB,EAAE,CAACoB;MAFtC,GAE2C;QAAAvC,gBACxCM,KADwC;MAAA,CAF3C,CAX6C,EAiB5CqB,KAAK,CAAC3B,OAAN2B,GAAgB,EAChB,GAAGoD,SAAS,CAACxC,KADG;QAEhBrB,KAAK,EAAE;UACLC,EAAE,EAAEA,EAAE,CAACoB,KADF;UAELwD,KAAK,EAAE,gBAFF;UAGL,oBAAoBzD,UAAU,CAACC;QAH1B,CAFS;QAOhBP,KAPgB;QAQhBC;MARgB,CAAhBN,CAjB4C,CAF/C,CAnBS,EAkDR6D,QAAQ;QAAA,OACgB;MADhB,GACuB;QAAAxF;UAAA,SAErB,oBAFqB;UAED,eAEXiF,CAAa,IAAK;YAC/BA,CAAC,CAACI,cAAFJ;YACAA,CAAC,CAACe,eAAFf;UACF;QAP2B,GAO1B,CAECtD,KAAK,CAAC8D,KAAN9D,GACEA,KAAK,CAAC8D,KAAN9D,EADFA,GACeiE;UAAA,QACG;QADH,GACU,IADV,CAHhB,CAP0B,GAWG,UARrB1E,KAAK,CAACf,KAQe,EAXH;MAAA,CADvB,CAlDA,EAoERuF,SAAS;QAAA,OACA,QADA;QACQ,SAAO;MADf,GACsC,CAC3C/D,KAAK,CAAC,cAAD,CAALA,GAAwBoD,SAAS,CAACxC,KAAlCZ,CAD2C,EAG3CT,KAAK,CAACzB,eAANyB,IAAqB0E;QAAA,OACN,aADM;QACO,QAAM;MADb,GAC0B,IAD1B,CAHsB,CADtC,CApED,EA4ETA;QAAA,SAGQ,CACL,kBADK,EAEL/C,gBAAgB,CAACN,KAFZ;MAHR,GAME,CAEC+C,UAAU;QAAA,SAEG;MAFH,GAE4B,IAF5B,GAINlD,QAAQ,CAACG,KAATH,IAAcwD;QAAA,SACH;MADG,GACsB;QAAA,OACfnD,gBADe;QACC,gBADD;QACC,OAAkBtB,EAAE,CAACoB;MADtB,GAC2B;QAAAvC,gBACzDM,KADyD;MAAA,CAD3B,EADtB,CAJR,EAUPsF;QAAA,SAEU;MAFV,GAEiC,IAFjC,CAVO,EAFX,EAkBA,CAAC,OAAD,EAAU,YAAV,EAAwB9E,QAAxB,CAAiCI,KAAK,CAACP,OAAvC,KAAmDyB,QAAQ,CAACG,KAA5D,IAAiEqD;QAAA,OAC7CnD,gBAD6C;QAC7B,gBAD6B;QAC7B,OAAkBtB,EAAE,CAACoB;MADQ,GACH;QAAAvC,gBACzDM,KADyD;MAAA,CADG,CAlBjE,CANF,CA5ES,CA5Bd;IAwID,CApJQ,CAAThB;IAsJA,OAAO;MACLoD;IADK,CAAP;EAGF;;AA7PG,CALiC,CAA/B,C,CAuQP;;AACA,OAAO,SAASuD,gBAAT,CAA2BxE,KAA3B,EAA2D;EAChE,MAAMyE,IAAI,GAAGC,MAAM,CAACD,IAAPC,CAAYpF,MAAM,CAACG,KAAnBiF,EAA0BC,MAA1BD,CAAiCE,CAAC,IAAI,CAACpH,IAAI,CAACoH,CAAD,CAA3CF,CAAb;EACA,OAAOhH,IAAI,CAACsC,KAAD,EAAQyE,IAAR,CAAX;AACF","names":["VExpandXTransition","useInputIcon","VFieldLabel","IconValue","LoaderSlot","makeLoaderProps","useLoader","makeFocusProps","useFocus","makeThemeProps","provideTheme","useBackgroundColor","useTextColor","computed","ref","toRef","watch","animate","convertToUnit","EventProp","genericComponent","getUid","isOn","nullifyTransforms","pick","propsFactory","standardEasing","useRender","allowedVariants","makeVFieldProps","appendInnerIcon","bgColor","String","clearable","Boolean","clearIcon","type","default","active","color","dirty","disabled","error","label","persistentClear","prependInnerIcon","reverse","singleLine","variant","validator","v","includes","VField","name","inheritAttrs","props","id","emits","focused","val","setup","_ref","attrs","emit","slots","themeClasses","loaderClasses","focusClasses","isFocused","focus","blur","InputIcon","isActive","hasLabel","uid","messagesId","value","labelRef","floatingLabelRef","controlRef","backgroundColorClasses","backgroundColorStyles","textColorClasses","textColorStyles","undefined","el","$el","targetEl","requestAnimationFrame","rect","targetRect","getBoundingClientRect","x","y","height","targetWidth","width","Math","abs","maxWidth","style","getComputedStyle","targetStyle","duration","parseFloat","transitionDuration","scale","getPropertyValue","visibility","transform","easing","direction","finished","then","removeProperty","flush","slotProps","onClick","e","target","document","activeElement","preventDefault","isOutlined","hasPrepend","hasClear","clear","hasAppend","for","_createVNode","loading","loader","class","stopPropagation","filterFieldProps","keys","Object","filter","k"],"sources":["../../../src/components/VField/VField.tsx"],"sourcesContent":["// Styles\nimport './VField.sass'\n\n// Components\nimport { VExpandXTransition } from '@/components/transitions'\nimport { useInputIcon } from '@/components/VInput/InputIcon'\nimport { VFieldLabel } from './VFieldLabel'\n\n// Composables\nimport { IconValue } from '@/composables/icons'\nimport { LoaderSlot, makeLoaderProps, useLoader } from '@/composables/loader'\nimport { makeFocusProps, useFocus } from '@/composables/focus'\nimport { makeThemeProps, provideTheme } from '@/composables/theme'\nimport { useBackgroundColor, useTextColor } from '@/composables/color'\n\n// Utilities\nimport { computed, ref, toRef, watch } from 'vue'\nimport {\n  animate,\n  convertToUnit,\n  EventProp,\n  genericComponent,\n  getUid,\n  isOn,\n  nullifyTransforms,\n  pick,\n  propsFactory,\n  standardEasing,\n  useRender,\n} from '@/util'\n\n// Types\nimport type { LoaderSlotProps } from '@/composables/loader'\nimport type { MakeSlots, SlotsToProps } from '@/util'\nimport type { PropType, Ref } from 'vue'\nimport type { VInputSlot } from '@/components/VInput/VInput'\n\nconst allowedVariants = ['underlined', 'outlined', 'filled', 'solo', 'plain'] as const\ntype Variant = typeof allowedVariants[number]\n\nexport interface DefaultInputSlot {\n  isActive: Ref<boolean>\n  isFocused: Ref<boolean>\n  controlRef: Ref<HTMLElement | undefined>\n  focus: () => void\n  blur: () => void\n}\n\nexport interface VFieldSlot extends DefaultInputSlot {\n  props: Record<string, unknown>\n}\n\nexport const makeVFieldProps = propsFactory({\n  appendInnerIcon: IconValue,\n  bgColor: String,\n  clearable: Boolean,\n  clearIcon: {\n    type: IconValue,\n    default: '$clear',\n  },\n  active: Boolean,\n  color: String,\n  dirty: Boolean,\n  disabled: Boolean,\n  error: Boolean,\n  label: String,\n  persistentClear: Boolean,\n  prependInnerIcon: IconValue,\n  reverse: Boolean,\n  singleLine: Boolean,\n  variant: {\n    type: String as PropType<Variant>,\n    default: 'filled',\n    validator: (v: any) => allowedVariants.includes(v),\n  },\n\n  'onClick:clear': EventProp<[MouseEvent]>(),\n  'onClick:appendInner': EventProp<[MouseEvent]>(),\n  'onClick:prependInner': EventProp<[MouseEvent]>(),\n\n  ...makeThemeProps(),\n  ...makeLoaderProps(),\n}, 'v-field')\n\nexport type VFieldSlots = MakeSlots<{\n  clear: []\n  'prepend-inner': [DefaultInputSlot & VInputSlot]\n  'append-inner': [DefaultInputSlot & VInputSlot]\n  label: [DefaultInputSlot & VInputSlot]\n  loader: [LoaderSlotProps]\n  default: [VFieldSlot]\n}>\n\nexport const VField = genericComponent<new <T>() => {\n  $props: {\n    modelValue?: T\n    'onUpdate:modelValue'?: (val: T) => any\n  } & SlotsToProps<VFieldSlots>\n}>()({\n  name: 'VField',\n\n  inheritAttrs: false,\n\n  props: {\n    id: String,\n\n    ...makeFocusProps(),\n    ...makeVFieldProps(),\n  },\n\n  emits: {\n    'update:focused': (focused: boolean) => true,\n    'update:modelValue': (val: any) => true,\n  },\n\n  setup (props, { attrs, emit, slots }) {\n    const { themeClasses } = provideTheme(props)\n    const { loaderClasses } = useLoader(props)\n    const { focusClasses, isFocused, focus, blur } = useFocus(props)\n    const { InputIcon } = useInputIcon(props)\n\n    const isActive = computed(() => props.dirty || props.active)\n    const hasLabel = computed(() => !props.singleLine && !!(props.label || slots.label))\n\n    const uid = getUid()\n    const id = computed(() => props.id || `input-${uid}`)\n    const messagesId = computed(() => `${id.value}-messages`)\n\n    const labelRef = ref<VFieldLabel>()\n    const floatingLabelRef = ref<VFieldLabel>()\n    const controlRef = ref<HTMLElement>()\n\n    const { backgroundColorClasses, backgroundColorStyles } = useBackgroundColor(toRef(props, 'bgColor'))\n    const { textColorClasses, textColorStyles } = useTextColor(computed(() => {\n      return (\n        isActive.value &&\n        isFocused.value &&\n        !props.error &&\n        !props.disabled\n      ) ? props.color : undefined\n    }))\n\n    watch(isActive, val => {\n      if (hasLabel.value) {\n        const el: HTMLElement = labelRef.value!.$el\n        const targetEl: HTMLElement = floatingLabelRef.value!.$el\n\n        requestAnimationFrame(() => {\n          const rect = nullifyTransforms(el)\n          const targetRect = targetEl.getBoundingClientRect()\n\n          const x = targetRect.x - rect.x\n          const y = targetRect.y - rect.y - (rect.height / 2 - targetRect.height / 2)\n\n          const targetWidth = targetRect.width / 0.75\n          const width = Math.abs(targetWidth - rect.width) > 1\n            ? { maxWidth: convertToUnit(targetWidth) }\n            : undefined\n\n          const style = getComputedStyle(el)\n          const targetStyle = getComputedStyle(targetEl)\n          const duration = parseFloat(style.transitionDuration) * 1000 || 150\n          const scale = parseFloat(targetStyle.getPropertyValue('--v-field-label-scale'))\n          const color = targetStyle.getPropertyValue('color')\n\n          el.style.visibility = 'visible'\n          targetEl.style.visibility = 'hidden'\n\n          animate(el, {\n            transform: `translate(${x}px, ${y}px) scale(${scale})`,\n            color,\n            ...width,\n          }, {\n            duration,\n            easing: standardEasing,\n            direction: val ? 'normal' : 'reverse',\n          }).finished.then(() => {\n            el.style.removeProperty('visibility')\n            targetEl.style.removeProperty('visibility')\n          })\n        })\n      }\n    }, { flush: 'post' })\n\n    const slotProps = computed<DefaultInputSlot>(() => ({\n      isActive,\n      isFocused,\n      controlRef,\n      blur,\n      focus,\n    }))\n\n    function onClick (e: MouseEvent) {\n      if (e.target !== document.activeElement) {\n        e.preventDefault()\n      }\n    }\n\n    useRender(() => {\n      const isOutlined = props.variant === 'outlined'\n      const hasPrepend = (slots['prepend-inner'] || props.prependInnerIcon)\n      const hasClear = !!(props.clearable || slots.clear)\n      const hasAppend = !!(slots['append-inner'] || props.appendInnerIcon || hasClear)\n      const label = slots.label\n        ? slots.label({\n          label: props.label,\n          props: { for: id.value },\n        })\n        : props.label\n\n      return (\n        <div\n          class={[\n            'v-field',\n            {\n              'v-field--active': isActive.value,\n              'v-field--appended': hasAppend,\n              'v-field--disabled': props.disabled,\n              'v-field--dirty': props.dirty,\n              'v-field--error': props.error,\n              'v-field--has-background': !!props.bgColor,\n              'v-field--persistent-clear': props.persistentClear,\n              'v-field--prepended': hasPrepend,\n              'v-field--reverse': props.reverse,\n              'v-field--single-line': props.singleLine,\n              'v-field--no-label': !label,\n              [`v-field--variant-${props.variant}`]: true,\n            },\n            themeClasses.value,\n            backgroundColorClasses.value,\n            focusClasses.value,\n            loaderClasses.value,\n          ]}\n          style={[\n            backgroundColorStyles.value,\n            textColorStyles.value,\n          ]}\n          onClick={ onClick }\n          { ...attrs }\n        >\n          <div class=\"v-field__overlay\" />\n\n          <LoaderSlot\n            name=\"v-field\"\n            active={ !!props.loading }\n            color={ props.error ? 'error' : props.color }\n            v-slots={{ default: slots.loader }}\n          />\n\n          { hasPrepend && (\n            <div key=\"prepend\" class=\"v-field__prepend-inner\">\n              { props.prependInnerIcon && (\n                <InputIcon key=\"prepend-icon\" name=\"prependInner\" />\n              )}\n\n              { slots['prepend-inner']?.(slotProps.value) }\n            </div>\n          )}\n\n          <div class=\"v-field__field\" data-no-activator=\"\">\n            {['solo', 'filled'].includes(props.variant) && hasLabel.value && (\n              <VFieldLabel\n                key=\"floating-label\"\n                ref={ floatingLabelRef }\n                class={[textColorClasses.value]}\n                floating\n                for={ id.value }\n              >\n                { label }\n              </VFieldLabel>\n            )}\n\n            <VFieldLabel ref={ labelRef } for={ id.value }>\n              { label }\n            </VFieldLabel>\n\n            { slots.default?.({\n              ...slotProps.value,\n              props: {\n                id: id.value,\n                class: 'v-field__input',\n                'aria-describedby': messagesId.value,\n              },\n              focus,\n              blur,\n            } as VFieldSlot)}\n          </div>\n\n          { hasClear && (\n            <VExpandXTransition key=\"clear\">\n              <div\n                class=\"v-field__clearable\"\n                v-show={ props.dirty }\n                onMousedown={ (e: MouseEvent) => {\n                  e.preventDefault()\n                  e.stopPropagation()\n                }}\n              >\n                { slots.clear\n                  ? slots.clear()\n                  : <InputIcon name=\"clear\" />\n                }\n              </div>\n            </VExpandXTransition>\n          )}\n\n          { hasAppend && (\n            <div key=\"append\" class=\"v-field__append-inner\">\n              { slots['append-inner']?.(slotProps.value) }\n\n              { props.appendInnerIcon && (\n                <InputIcon key=\"append-icon\" name=\"appendInner\" />\n              )}\n            </div>\n          )}\n\n          <div\n            class={[\n              'v-field__outline',\n              textColorClasses.value,\n            ]}\n          >\n            { isOutlined && (\n              <>\n                <div class=\"v-field__outline__start\" />\n\n                { hasLabel.value && (\n                  <div class=\"v-field__outline__notch\">\n                    <VFieldLabel ref={ floatingLabelRef } floating for={ id.value }>\n                      { label }\n                    </VFieldLabel>\n                  </div>\n                )}\n\n                <div class=\"v-field__outline__end\" />\n              </>\n            )}\n\n            {['plain', 'underlined'].includes(props.variant) && hasLabel.value && (\n              <VFieldLabel ref={ floatingLabelRef } floating for={ id.value }>\n                { label }\n              </VFieldLabel>\n            )}\n          </div>\n        </div>\n      )\n    })\n\n    return {\n      controlRef,\n    }\n  },\n})\n\nexport type VField = InstanceType<typeof VField>\n\n// TODO: this is kinda slow, might be better to implicitly inherit props instead\nexport function filterFieldProps (attrs: Record<string, unknown>) {\n  const keys = Object.keys(VField.props).filter(k => !isOn(k))\n  return pick(attrs, keys)\n}\n"]},"metadata":{},"sourceType":"module"}