{"ast":null,"code":"import { mergeProps as _mergeProps, createVNode as _createVNode } from \"vue\"; // Styles\n\nimport \"./VDialog.css\"; // Components\n\nimport { VDialogTransition } from \"../transitions/index.mjs\";\nimport { VDefaultsProvider } from \"../VDefaultsProvider/index.mjs\";\nimport { VOverlay } from \"../VOverlay/index.mjs\"; // Composables\n\nimport { useProxiedModel } from \"../../composables/proxiedModel.mjs\";\nimport { useScopeId } from \"../../composables/scopeId.mjs\";\nimport { forwardRefs } from \"../../composables/forwardRefs.mjs\"; // Utilities\n\nimport { computed, mergeProps, nextTick, ref, watch } from 'vue';\nimport { genericComponent, IN_BROWSER, useRender } from \"../../util/index.mjs\";\nimport { makeVOverlayProps } from \"../VOverlay/VOverlay.mjs\"; // Types\n\nexport const VDialog = genericComponent()({\n  name: 'VDialog',\n  props: {\n    fullscreen: Boolean,\n    retainFocus: {\n      type: Boolean,\n      default: true\n    },\n    scrollable: Boolean,\n    ...makeVOverlayProps({\n      origin: 'center center',\n      scrollStrategy: 'block',\n      transition: {\n        component: VDialogTransition\n      },\n      zIndex: 2400\n    })\n  },\n  emits: {\n    'update:modelValue': value => true\n  },\n\n  setup(props, _ref) {\n    let {\n      slots\n    } = _ref;\n    const isActive = useProxiedModel(props, 'modelValue');\n    const {\n      scopeId\n    } = useScopeId();\n    const overlay = ref();\n\n    function onFocusin(e) {\n      const before = e.relatedTarget;\n      const after = e.target;\n\n      if (before !== after && overlay.value?.contentEl && // We're the topmost dialog\n      overlay.value?.globalTop && // It isn't the document or the dialog body\n      ![document, overlay.value.contentEl].includes(after) && // It isn't inside the dialog body\n      !overlay.value.contentEl.contains(after)) {\n        const focusable = [...overlay.value.contentEl.querySelectorAll('button, [href], input:not([type=\"hidden\"]), select, textarea, [tabindex]:not([tabindex=\"-1\"])')].filter(el => !el.hasAttribute('disabled') && !el.matches('[tabindex=\"-1\"]'));\n        if (!focusable.length) return;\n        const firstElement = focusable[0];\n        const lastElement = focusable[focusable.length - 1];\n\n        if (before === firstElement) {\n          lastElement.focus();\n        } else {\n          firstElement.focus();\n        }\n      }\n    }\n\n    if (IN_BROWSER) {\n      watch(() => isActive.value && props.retainFocus, val => {\n        val ? document.addEventListener('focusin', onFocusin) : document.removeEventListener('focusin', onFocusin);\n      }, {\n        immediate: true\n      });\n    }\n\n    watch(isActive, async val => {\n      await nextTick();\n\n      if (val) {\n        overlay.value.contentEl?.focus({\n          preventScroll: true\n        });\n      } else {\n        overlay.value.activatorEl?.focus({\n          preventScroll: true\n        });\n      }\n    });\n    const activatorProps = computed(() => mergeProps({\n      'aria-haspopup': 'dialog',\n      'aria-expanded': String(isActive.value)\n    }, props.activatorProps));\n    useRender(() => {\n      const [overlayProps] = VOverlay.filterProps(props);\n      return _createVNode(VOverlay, _mergeProps({\n        \"ref\": overlay,\n        \"class\": ['v-dialog', {\n          'v-dialog--fullscreen': props.fullscreen,\n          'v-dialog--scrollable': props.scrollable\n        }]\n      }, overlayProps, {\n        \"modelValue\": isActive.value,\n        \"onUpdate:modelValue\": $event => isActive.value = $event,\n        \"aria-modal\": \"true\",\n        \"activatorProps\": activatorProps.value,\n        \"role\": \"dialog\"\n      }, scopeId), {\n        activator: slots.activator,\n        default: function () {\n          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n          }\n\n          return _createVNode(VDefaultsProvider, {\n            \"root\": true\n          }, {\n            default: () => [slots.default?.(...args)]\n          });\n        }\n      });\n    });\n    return forwardRefs({}, overlay);\n  }\n\n});","map":{"version":3,"mappings":"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","names":["VDialogTransition","VDefaultsProvider","VOverlay","useProxiedModel","useScopeId","forwardRefs","computed","mergeProps","nextTick","ref","watch","genericComponent","IN_BROWSER","useRender","makeVOverlayProps","VDialog","name","props","fullscreen","Boolean","retainFocus","type","default","scrollable","origin","scrollStrategy","transition","component","zIndex","emits","value","setup","_ref","slots","isActive","scopeId","overlay","onFocusin","e","before","relatedTarget","after","target","contentEl","globalTop","document","includes","contains","focusable","querySelectorAll","filter","el","hasAttribute","matches","length","firstElement","lastElement","focus","val","addEventListener","removeEventListener","immediate","preventScroll","activatorEl","activatorProps","String","overlayProps","filterProps","$event","activator","args","_key","arguments"],"sources":["../../../src/components/VDialog/VDialog.tsx"],"sourcesContent":["// Styles\nimport './VDialog.sass'\n\n// Components\nimport { VDialogTransition } from '@/components/transitions'\nimport { VDefaultsProvider } from '@/components/VDefaultsProvider'\nimport { VOverlay } from '@/components/VOverlay'\n\n// Composables\nimport { useProxiedModel } from '@/composables/proxiedModel'\nimport { useScopeId } from '@/composables/scopeId'\nimport { forwardRefs } from '@/composables/forwardRefs'\n\n// Utilities\nimport { computed, mergeProps, nextTick, ref, watch } from 'vue'\nimport { genericComponent, IN_BROWSER, useRender } from '@/util'\nimport { makeVOverlayProps } from '@/components/VOverlay/VOverlay'\n\n// Types\nimport type { OverlaySlots } from '@/components/VOverlay/VOverlay'\n\nexport const VDialog = genericComponent<OverlaySlots>()({\n  name: 'VDialog',\n\n  props: {\n    fullscreen: Boolean,\n    retainFocus: {\n      type: Boolean,\n      default: true,\n    },\n    scrollable: Boolean,\n\n    ...makeVOverlayProps({\n      origin: 'center center' as const,\n      scrollStrategy: 'block' as const,\n      transition: { component: VDialogTransition },\n      zIndex: 2400,\n    }),\n  },\n\n  emits: {\n    'update:modelValue': (value: boolean) => true,\n  },\n\n  setup (props, { slots }) {\n    const isActive = useProxiedModel(props, 'modelValue')\n    const { scopeId } = useScopeId()\n\n    const overlay = ref<VOverlay>()\n    function onFocusin (e: FocusEvent) {\n      const before = e.relatedTarget as HTMLElement | null\n      const after = e.target as HTMLElement | null\n\n      if (\n        before !== after &&\n        overlay.value?.contentEl &&\n        // We're the topmost dialog\n        overlay.value?.globalTop &&\n        // It isn't the document or the dialog body\n        ![document, overlay.value.contentEl].includes(after!) &&\n        // It isn't inside the dialog body\n        !overlay.value.contentEl.contains(after)\n      ) {\n        const focusable = [...overlay.value.contentEl.querySelectorAll(\n          'button, [href], input:not([type=\"hidden\"]), select, textarea, [tabindex]:not([tabindex=\"-1\"])'\n        )].filter(el => !el.hasAttribute('disabled') && !el.matches('[tabindex=\"-1\"]')) as HTMLElement[]\n\n        if (!focusable.length) return\n\n        const firstElement = focusable[0]\n        const lastElement = focusable[focusable.length - 1]\n\n        if (before === firstElement) {\n          lastElement.focus()\n        } else {\n          firstElement.focus()\n        }\n      }\n    }\n\n    if (IN_BROWSER) {\n      watch(() => isActive.value && props.retainFocus, val => {\n        val\n          ? document.addEventListener('focusin', onFocusin)\n          : document.removeEventListener('focusin', onFocusin)\n      }, { immediate: true })\n    }\n\n    watch(isActive, async val => {\n      await nextTick()\n      if (val) {\n        overlay.value!.contentEl?.focus({ preventScroll: true })\n      } else {\n        overlay.value!.activatorEl?.focus({ preventScroll: true })\n      }\n    })\n\n    const activatorProps = computed(() =>\n      mergeProps({\n        'aria-haspopup': 'dialog',\n        'aria-expanded': String(isActive.value),\n      }, props.activatorProps)\n    )\n\n    useRender(() => {\n      const [overlayProps] = VOverlay.filterProps(props)\n\n      return (\n        <VOverlay\n          ref={ overlay }\n          class={[\n            'v-dialog',\n            {\n              'v-dialog--fullscreen': props.fullscreen,\n              'v-dialog--scrollable': props.scrollable,\n            },\n          ]}\n          { ...overlayProps }\n          v-model={ isActive.value }\n          aria-modal=\"true\"\n          activatorProps={ activatorProps.value }\n          role=\"dialog\"\n          { ...scopeId }\n        >\n          {{\n            activator: slots.activator,\n            default: (...args) => (\n              <VDefaultsProvider root>\n                { slots.default?.(...args) }\n              </VDefaultsProvider>\n            ),\n          }}\n        </VOverlay>\n      )\n    })\n\n    return forwardRefs({}, overlay)\n  },\n})\n\nexport type VDialog = InstanceType<typeof VDialog>\n"]},"metadata":{},"sourceType":"module"}