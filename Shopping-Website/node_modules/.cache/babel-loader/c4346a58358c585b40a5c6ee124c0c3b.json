{"ast":null,"code":"import { withDirectives as _withDirectives, resolveDirective as _resolveDirective, createVNode as _createVNode } from \"vue\"; // Components\n\nimport { VExpansionPanelSymbol } from \"./VExpansionPanels.mjs\";\nimport { VIcon } from \"../VIcon/index.mjs\"; // Directives\n\nimport { Ripple } from \"../../directives/ripple/index.mjs\"; // Composables\n\nimport { IconValue } from \"../../composables/icons.mjs\";\nimport { useBackgroundColor } from \"../../composables/color.mjs\"; // Utilities\n\nimport { computed, inject } from 'vue';\nimport { genericComponent, propsFactory, useRender } from \"../../util/index.mjs\";\nexport const makeVExpansionPanelTitleProps = propsFactory({\n  color: String,\n  expandIcon: {\n    type: IconValue,\n    default: '$expand'\n  },\n  collapseIcon: {\n    type: IconValue,\n    default: '$collapse'\n  },\n  hideActions: Boolean,\n  ripple: {\n    type: [Boolean, Object],\n    default: false\n  },\n  readonly: Boolean\n}, 'v-expansion-panel-title');\nexport const VExpansionPanelTitle = genericComponent()({\n  name: 'VExpansionPanelTitle',\n  directives: {\n    Ripple\n  },\n  props: { ...makeVExpansionPanelTitleProps()\n  },\n\n  setup(props, _ref) {\n    let {\n      slots\n    } = _ref;\n    const expansionPanel = inject(VExpansionPanelSymbol);\n    if (!expansionPanel) throw new Error('[Vuetify] v-expansion-panel-title needs to be placed inside v-expansion-panel');\n    const {\n      backgroundColorClasses,\n      backgroundColorStyles\n    } = useBackgroundColor(props, 'color');\n    const slotProps = computed(() => ({\n      collapseIcon: props.collapseIcon,\n      disabled: expansionPanel.disabled.value,\n      expanded: expansionPanel.isSelected.value,\n      expandIcon: props.expandIcon,\n      readonly: props.readonly\n    }));\n    useRender(() => _withDirectives(_createVNode(\"button\", {\n      \"class\": ['v-expansion-panel-title', {\n        'v-expansion-panel-title--active': expansionPanel.isSelected.value\n      }, backgroundColorClasses.value],\n      \"style\": backgroundColorStyles.value,\n      \"type\": \"button\",\n      \"tabindex\": expansionPanel.disabled.value ? -1 : undefined,\n      \"disabled\": expansionPanel.disabled.value,\n      \"aria-expanded\": expansionPanel.isSelected.value,\n      \"onClick\": !props.readonly ? expansionPanel.toggle : undefined\n    }, [_createVNode(\"span\", {\n      \"class\": \"v-expansion-panel-title__overlay\"\n    }, null), slots.default?.(slotProps.value), !props.hideActions && _createVNode(\"span\", {\n      \"class\": \"v-expansion-panel-title__icon\"\n    }, [slots.actions ? slots.actions(slotProps.value) : _createVNode(VIcon, {\n      \"icon\": expansionPanel.isSelected.value ? props.collapseIcon : props.expandIcon\n    }, null)])]), [[_resolveDirective(\"ripple\"), props.ripple]]));\n    return {};\n  }\n\n});","map":{"version":3,"mappings":"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","names":["VExpansionPanelSymbol","VIcon","Ripple","IconValue","useBackgroundColor","computed","inject","genericComponent","propsFactory","useRender","makeVExpansionPanelTitleProps","color","String","expandIcon","type","default","collapseIcon","hideActions","Boolean","ripple","Object","readonly","VExpansionPanelTitle","name","directives","props","setup","_ref","slots","expansionPanel","Error","backgroundColorClasses","backgroundColorStyles","slotProps","disabled","value","expanded","isSelected","undefined","toggle","_createVNode","actions"],"sources":["../../../src/components/VExpansionPanel/VExpansionPanelTitle.tsx"],"sourcesContent":["// Components\nimport { VExpansionPanelSymbol } from './VExpansionPanels'\nimport { VIcon } from '@/components/VIcon'\n\n// Directives\nimport { Ripple } from '@/directives/ripple'\n\n// Composables\nimport { IconValue } from '@/composables/icons'\nimport { useBackgroundColor } from '@/composables/color'\n\n// Utilities\nimport { computed, inject } from 'vue'\nimport { genericComponent, propsFactory, useRender } from '@/util'\n\ninterface ExpansionPanelTitleSlot {\n  collapseIcon: IconValue\n  disabled: boolean | undefined\n  expanded: boolean\n  expandIcon: IconValue\n  readonly: boolean\n}\n\nexport type VExpansionPanelTitleSlots = {\n  default: [ExpansionPanelTitleSlot]\n  actions: [ExpansionPanelTitleSlot]\n}\n\nexport const makeVExpansionPanelTitleProps = propsFactory({\n  color: String,\n  expandIcon: {\n    type: IconValue,\n    default: '$expand',\n  },\n  collapseIcon: {\n    type: IconValue,\n    default: '$collapse',\n  },\n  hideActions: Boolean,\n  ripple: {\n    type: [Boolean, Object],\n    default: false,\n  },\n  readonly: Boolean,\n}, 'v-expansion-panel-title')\n\nexport const VExpansionPanelTitle = genericComponent<VExpansionPanelTitleSlots>()({\n  name: 'VExpansionPanelTitle',\n\n  directives: { Ripple },\n\n  props: {\n    ...makeVExpansionPanelTitleProps(),\n  },\n\n  setup (props, { slots }) {\n    const expansionPanel = inject(VExpansionPanelSymbol)\n\n    if (!expansionPanel) throw new Error('[Vuetify] v-expansion-panel-title needs to be placed inside v-expansion-panel')\n\n    const { backgroundColorClasses, backgroundColorStyles } = useBackgroundColor(props, 'color')\n\n    const slotProps = computed(() => ({\n      collapseIcon: props.collapseIcon,\n      disabled: expansionPanel.disabled.value,\n      expanded: expansionPanel.isSelected.value,\n      expandIcon: props.expandIcon,\n      readonly: props.readonly,\n    }))\n\n    useRender(() => (\n      <button\n        class={[\n          'v-expansion-panel-title',\n          {\n            'v-expansion-panel-title--active': expansionPanel.isSelected.value,\n          },\n          backgroundColorClasses.value,\n        ]}\n        style={ backgroundColorStyles.value }\n        type=\"button\"\n        tabindex={ expansionPanel.disabled.value ? -1 : undefined }\n        disabled={ expansionPanel.disabled.value }\n        aria-expanded={ expansionPanel.isSelected.value }\n        onClick={ !props.readonly ? expansionPanel.toggle : undefined }\n        v-ripple={ props.ripple }\n      >\n        <span class=\"v-expansion-panel-title__overlay\" />\n\n        { slots.default?.(slotProps.value) }\n\n        { !props.hideActions && (\n          <span class=\"v-expansion-panel-title__icon\">\n            {\n              slots.actions ? slots.actions(slotProps.value)\n              : <VIcon icon={ expansionPanel.isSelected.value ? props.collapseIcon : props.expandIcon } />\n            }\n          </span>\n        )}\n      </button>\n    ))\n\n    return {}\n  },\n})\n\nexport type VExpansionPanelTitle = InstanceType<typeof VExpansionPanelTitle>\n"]},"metadata":{},"sourceType":"module"}