{"ast":null,"code":"import { createVNode as _createVNode, mergeProps as _mergeProps, resolveDirective as _resolveDirective } from \"vue\"; // Components\n\nimport { makeSelectionControlProps, VSelectionControl } from \"../VSelectionControl/VSelectionControl.mjs\"; // Composables\n\nimport { IconValue } from \"../../composables/icons.mjs\";\nimport { useProxiedModel } from \"../../composables/proxiedModel.mjs\"; // Utilities\n\nimport { computed } from 'vue';\nimport { genericComponent, propsFactory, useRender } from \"../../util/index.mjs\";\nexport const makeVCheckboxBtnProps = propsFactory({\n  indeterminate: Boolean,\n  indeterminateIcon: {\n    type: IconValue,\n    default: '$checkboxIndeterminate'\n  },\n  ...makeSelectionControlProps({\n    falseIcon: '$checkboxOff',\n    trueIcon: '$checkboxOn'\n  })\n}, 'v-checkbox-btn');\nexport const VCheckboxBtn = genericComponent()({\n  name: 'VCheckboxBtn',\n  props: makeVCheckboxBtnProps(),\n  emits: {\n    'update:modelValue': value => true,\n    'update:indeterminate': val => true\n  },\n\n  setup(props, _ref) {\n    let {\n      slots\n    } = _ref;\n    const indeterminate = useProxiedModel(props, 'indeterminate');\n    const model = useProxiedModel(props, 'modelValue');\n\n    function onChange(v) {\n      if (indeterminate.value) {\n        indeterminate.value = false;\n      }\n    }\n\n    const falseIcon = computed(() => {\n      return props.indeterminate ? props.indeterminateIcon : props.falseIcon;\n    });\n    const trueIcon = computed(() => {\n      return props.indeterminate ? props.indeterminateIcon : props.trueIcon;\n    });\n    useRender(() => _createVNode(VSelectionControl, _mergeProps(props, {\n      \"modelValue\": model.value,\n      \"onUpdate:modelValue\": [$event => model.value = $event, onChange],\n      \"class\": \"v-checkbox-btn\",\n      \"type\": \"checkbox\",\n      \"inline\": true,\n      \"falseIcon\": falseIcon.value,\n      \"trueIcon\": trueIcon.value,\n      \"aria-checked\": props.indeterminate ? 'mixed' : undefined\n    }), slots));\n    return {};\n  }\n\n});","map":{"version":3,"mappings":"qHAAA;;AAAA,SAESA,yBAFT,EAEoCC,iBAFpC,QAEqD,4CAFrD,C,CAIA;;AAAA,SACSC,SADT,QACkB,6BADlB;AACkB,SACTC,eADS,QACM,oCADN,C,CAGlB;;AACA,SAASC,QAAT,QAAyB,KAAzB;AAA8B,SACrBC,gBADqB,EACHC,YADG,EACWC,SADX,QACoB,sBADpB;AAG9B,OAAO,MAAMC,qBAAqB,GAAGF,YAAY,CAAC;EAChDG,aAAa,EAAEC,OADiC;EAEhDC,iBAAiB,EAAE;IACjBC,IAAI,EAAEV,SADW;IAEjBW,OAAO,EAAE;EAFQ,CAF6B;EAOhD,GAAGb,yBAAyB,CAAC;IAC3Bc,SAAS,EAAE,cADgB;IAE3BC,QAAQ,EAAE;EAFiB,CAAD;AAPoB,CAAD,EAW9C,gBAX8C,CAA1C;AAaP,OAAO,MAAMC,YAAY,GAAGX,gBAAgB,GAA2B;EACrEY,IAAI,EAAE,cAD+D;EAGrEC,KAAK,EAAEV,qBAAqB,EAHyC;EAKrEW,KAAK,EAAE;IACL,qBAAsBC,KAAU,IAAK,IADhC;IAEL,wBAAyBC,GAAY,IAAK;EAFrC,CAL8D;;EAUrEC,KAAKA,CAAEJ,KAAFI,EAAOC,IAAPD,EAAoB;IAAA,IAAX;MAAEE;IAAF,IAASD,IAAE;IACvB,MAAMd,aAAa,GAAGN,eAAe,CAACe,KAAD,EAAQ,eAAR,CAArC;IACA,MAAMO,KAAK,GAAGtB,eAAe,CAACe,KAAD,EAAQ,YAAR,CAA7B;;IAEA,SAASQ,QAAT,CAAmBC,CAAnB,EAA2B;MACzB,IAAIlB,aAAa,CAACW,KAAlB,EAAyB;QACvBX,aAAa,CAACW,KAAdX,GAAsB,KAAtBA;MACF;IACF;;IAEA,MAAMK,SAAS,GAAGV,QAAQ,CAAC,MAAM;MAC/B,OAAOc,KAAK,CAACT,aAANS,GACHA,KAAK,CAACP,iBADHO,GAEHA,KAAK,CAACJ,SAFV;IAGD,CAJyB,CAA1B;IAMA,MAAMC,QAAQ,GAAGX,QAAQ,CAAC,MAAM;MAC9B,OAAOc,KAAK,CAACT,aAANS,GACHA,KAAK,CAACP,iBADHO,GAEHA,KAAK,CAACH,QAFV;IAGD,CAJwB,CAAzB;IAMAR,SAAS,CAAC,kDAEDW,KAFC,EAEI;MAAA,cACAO,KAAK,CAACL,KADN;MACW,kCAAXK,KAAK,CAACL,KAANK,GAAWG,QAICF,QAJD,CADX;MAKoB,SAHxB,gBAFI;MAEY,QACjB,UAHK;MAGK,cAHL;MAGK,aAGHZ,SAAS,CAACM,KANZ;MAMiB,YAChBL,QAAQ,CAACK,KAPV;MAOe,gBACVF,KAAK,CAACT,aAANS,GAAsB,OAAtBA,GAAgCW;IARrC,CAFJ,GAWIL,KAXJ,CAAD,CAATjB;IAeA,OAAO,EAAP;EACF;;AAhDqE,CAA3B,CAArC","names":["makeSelectionControlProps","VSelectionControl","IconValue","useProxiedModel","computed","genericComponent","propsFactory","useRender","makeVCheckboxBtnProps","indeterminate","Boolean","indeterminateIcon","type","default","falseIcon","trueIcon","VCheckboxBtn","name","props","emits","value","val","setup","_ref","slots","model","onChange","v","$event","undefined"],"sources":["../../../src/components/VCheckbox/VCheckboxBtn.tsx"],"sourcesContent":["// Components\nimport type { VSelectionControlSlots } from '@/components/VSelectionControl/VSelectionControl'\nimport { makeSelectionControlProps, VSelectionControl } from '@/components/VSelectionControl/VSelectionControl'\n\n// Composables\nimport { IconValue } from '@/composables/icons'\nimport { useProxiedModel } from '@/composables/proxiedModel'\n\n// Utilities\nimport { computed } from 'vue'\nimport { genericComponent, propsFactory, useRender } from '@/util'\n\nexport const makeVCheckboxBtnProps = propsFactory({\n  indeterminate: Boolean,\n  indeterminateIcon: {\n    type: IconValue,\n    default: '$checkboxIndeterminate',\n  },\n\n  ...makeSelectionControlProps({\n    falseIcon: '$checkboxOff',\n    trueIcon: '$checkboxOn',\n  }),\n}, 'v-checkbox-btn')\n\nexport const VCheckboxBtn = genericComponent<VSelectionControlSlots>()({\n  name: 'VCheckboxBtn',\n\n  props: makeVCheckboxBtnProps(),\n\n  emits: {\n    'update:modelValue': (value: any) => true,\n    'update:indeterminate': (val: boolean) => true,\n  },\n\n  setup (props, { slots }) {\n    const indeterminate = useProxiedModel(props, 'indeterminate')\n    const model = useProxiedModel(props, 'modelValue')\n\n    function onChange (v: any) {\n      if (indeterminate.value) {\n        indeterminate.value = false\n      }\n    }\n\n    const falseIcon = computed(() => {\n      return props.indeterminate\n        ? props.indeterminateIcon\n        : props.falseIcon\n    })\n\n    const trueIcon = computed(() => {\n      return props.indeterminate\n        ? props.indeterminateIcon\n        : props.trueIcon\n    })\n\n    useRender(() => (\n      <VSelectionControl\n        { ...props }\n        v-model={ model.value }\n        class=\"v-checkbox-btn\"\n        type=\"checkbox\"\n        inline\n        onUpdate:modelValue={ onChange }\n        falseIcon={ falseIcon.value }\n        trueIcon={ trueIcon.value }\n        aria-checked={ props.indeterminate ? 'mixed' : undefined }\n        v-slots={ slots }\n      />\n    ))\n\n    return {}\n  },\n})\n\nexport type VCheckboxBtn = InstanceType<typeof VCheckboxBtn>\n"]},"metadata":{},"sourceType":"module"}