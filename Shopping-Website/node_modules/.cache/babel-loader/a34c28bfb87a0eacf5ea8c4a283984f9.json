{"ast":null,"code":"// Styles\nimport \"./VGrid.css\"; // Composables\n\nimport { breakpoints } from \"../../composables/display.mjs\";\nimport { makeTagProps } from \"../../composables/tag.mjs\"; // Utilities\n\nimport { capitalize, computed, h } from 'vue';\nimport { genericComponent } from \"../../util/index.mjs\"; // Types\n\nconst breakpointProps = (() => {\n  return breakpoints.reduce((props, val) => {\n    props[val] = {\n      type: [Boolean, String, Number],\n      default: false\n    };\n    return props;\n  }, {});\n})();\n\nconst offsetProps = (() => {\n  return breakpoints.reduce((props, val) => {\n    const offsetKey = 'offset' + capitalize(val);\n    props[offsetKey] = {\n      type: [String, Number],\n      default: null\n    };\n    return props;\n  }, {});\n})();\n\nconst orderProps = (() => {\n  return breakpoints.reduce((props, val) => {\n    const orderKey = 'order' + capitalize(val);\n    props[orderKey] = {\n      type: [String, Number],\n      default: null\n    };\n    return props;\n  }, {});\n})();\n\nconst propMap = {\n  col: Object.keys(breakpointProps),\n  offset: Object.keys(offsetProps),\n  order: Object.keys(orderProps)\n};\n\nfunction breakpointClass(type, prop, val) {\n  let className = type;\n\n  if (val == null || val === false) {\n    return undefined;\n  }\n\n  if (prop) {\n    const breakpoint = prop.replace(type, '');\n    className += `-${breakpoint}`;\n  }\n\n  if (type === 'col') {\n    className = 'v-' + className;\n  } // Handling the boolean style prop when accepting [Boolean, String, Number]\n  // means Vue will not convert <v-col sm></v-col> to sm: true for us.\n  // Since the default is false, an empty string indicates the prop's presence.\n\n\n  if (type === 'col' && (val === '' || val === true)) {\n    // .v-col-md\n    return className.toLowerCase();\n  } // .order-md-6\n\n\n  className += `-${val}`;\n  return className.toLowerCase();\n}\n\nconst ALIGN_SELF_VALUES = ['auto', 'start', 'end', 'center', 'baseline', 'stretch'];\nexport const VCol = genericComponent()({\n  name: 'VCol',\n  props: {\n    cols: {\n      type: [Boolean, String, Number],\n      default: false\n    },\n    ...breakpointProps,\n    offset: {\n      type: [String, Number],\n      default: null\n    },\n    ...offsetProps,\n    order: {\n      type: [String, Number],\n      default: null\n    },\n    ...orderProps,\n    alignSelf: {\n      type: String,\n      default: null,\n      validator: str => ALIGN_SELF_VALUES.includes(str)\n    },\n    ...makeTagProps()\n  },\n\n  setup(props, _ref) {\n    let {\n      slots\n    } = _ref;\n    const classes = computed(() => {\n      const classList = []; // Loop through `col`, `offset`, `order` breakpoint props\n\n      let type;\n\n      for (type in propMap) {\n        propMap[type].forEach(prop => {\n          const value = props[prop];\n          const className = breakpointClass(type, prop, value);\n          if (className) classList.push(className);\n        });\n      }\n\n      const hasColClasses = classList.some(className => className.startsWith('v-col-'));\n      classList.push({\n        // Default to .v-col if no other col-{bp}-* classes generated nor `cols` specified.\n        'v-col': !hasColClasses || !props.cols,\n        [`v-col-${props.cols}`]: props.cols,\n        [`offset-${props.offset}`]: props.offset,\n        [`order-${props.order}`]: props.order,\n        [`align-self-${props.alignSelf}`]: props.alignSelf\n      });\n      return classList;\n    });\n    return () => h(props.tag, {\n      class: classes.value\n    }, slots.default?.());\n  }\n\n});","map":{"version":3,"mappings":"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","names":["breakpoints","makeTagProps","capitalize","computed","h","genericComponent","breakpointProps","reduce","props","val","type","Boolean","String","Number","default","offsetProps","offsetKey","orderProps","orderKey","propMap","col","Object","keys","offset","order","breakpointClass","prop","className","undefined","breakpoint","replace","toLowerCase","ALIGN_SELF_VALUES","VCol","name","cols","alignSelf","validator","str","includes","setup","_ref","slots","classes","classList","forEach","value","push","hasColClasses","some","startsWith","tag","class"],"sources":["../../../src/components/VGrid/VCol.ts"],"sourcesContent":["// Styles\nimport './VGrid.sass'\n\n// Composables\nimport { breakpoints } from '@/composables/display'\nimport { makeTagProps } from '@/composables/tag'\n\n// Utilities\nimport { capitalize, computed, h } from 'vue'\nimport { genericComponent } from '@/util'\n\n// Types\nimport type { Breakpoint } from '@/composables/display'\nimport type { Prop, PropType } from 'vue'\n\ntype BreakpointOffset = `offset${Capitalize<Breakpoint>}`\ntype BreakpointOrder = `order${Capitalize<Breakpoint>}`\n\nconst breakpointProps = (() => {\n  return breakpoints.reduce((props, val) => {\n    props[val] = {\n      type: [Boolean, String, Number],\n      default: false,\n    }\n    return props\n  }, {} as Record<Breakpoint, Prop<boolean | string | number, false>>)\n})()\n\nconst offsetProps = (() => {\n  return breakpoints.reduce((props, val) => {\n    const offsetKey = ('offset' + capitalize(val)) as BreakpointOffset\n    props[offsetKey] = {\n      type: [String, Number],\n      default: null,\n    }\n    return props\n  }, {} as Record<BreakpointOffset, Prop<string | number, null>>)\n})()\n\nconst orderProps = (() => {\n  return breakpoints.reduce((props, val) => {\n    const orderKey = ('order' + capitalize(val)) as BreakpointOrder\n    props[orderKey] = {\n      type: [String, Number],\n      default: null,\n    }\n    return props\n  }, {} as Record<BreakpointOrder, Prop<string | number, null>>)\n})()\n\nconst propMap = {\n  col: Object.keys(breakpointProps),\n  offset: Object.keys(offsetProps),\n  order: Object.keys(orderProps),\n}\n\nfunction breakpointClass (type: keyof typeof propMap, prop: string, val: boolean | string | number) {\n  let className: string = type\n  if (val == null || val === false) {\n    return undefined\n  }\n  if (prop) {\n    const breakpoint = prop.replace(type, '')\n    className += `-${breakpoint}`\n  }\n  if (type === 'col') {\n    className = 'v-' + className\n  }\n  // Handling the boolean style prop when accepting [Boolean, String, Number]\n  // means Vue will not convert <v-col sm></v-col> to sm: true for us.\n  // Since the default is false, an empty string indicates the prop's presence.\n  if (type === 'col' && (val === '' || val === true)) {\n    // .v-col-md\n    return className.toLowerCase()\n  }\n  // .order-md-6\n  className += `-${val}`\n  return className.toLowerCase()\n}\n\nconst ALIGN_SELF_VALUES = ['auto', 'start', 'end', 'center', 'baseline', 'stretch'] as const\n\nexport const VCol = genericComponent()({\n  name: 'VCol',\n\n  props: {\n    cols: {\n      type: [Boolean, String, Number],\n      default: false,\n    },\n    ...breakpointProps,\n    offset: {\n      type: [String, Number],\n      default: null,\n    },\n    ...offsetProps,\n    order: {\n      type: [String, Number],\n      default: null,\n    },\n    ...orderProps,\n    alignSelf: {\n      type: String as PropType<typeof ALIGN_SELF_VALUES[number]>,\n      default: null,\n      validator: (str: any) => ALIGN_SELF_VALUES.includes(str),\n    },\n\n    ...makeTagProps(),\n  },\n\n  setup (props, { slots }) {\n    const classes = computed(() => {\n      const classList: any[] = []\n\n      // Loop through `col`, `offset`, `order` breakpoint props\n      let type: keyof typeof propMap\n      for (type in propMap) {\n        propMap[type].forEach(prop => {\n          const value: string | number | boolean = (props as any)[prop]\n          const className = breakpointClass(type, prop, value)\n          if (className) classList!.push(className)\n        })\n      }\n\n      const hasColClasses = classList.some(className => className.startsWith('v-col-'))\n\n      classList.push({\n        // Default to .v-col if no other col-{bp}-* classes generated nor `cols` specified.\n        'v-col': !hasColClasses || !props.cols,\n        [`v-col-${props.cols}`]: props.cols,\n        [`offset-${props.offset}`]: props.offset,\n        [`order-${props.order}`]: props.order,\n        [`align-self-${props.alignSelf}`]: props.alignSelf,\n      })\n\n      return classList\n    })\n\n    return () => h(props.tag, {\n      class: classes.value,\n    }, slots.default?.())\n  },\n})\n\nexport type VCol = InstanceType<typeof VCol>\n"]},"metadata":{},"sourceType":"module"}