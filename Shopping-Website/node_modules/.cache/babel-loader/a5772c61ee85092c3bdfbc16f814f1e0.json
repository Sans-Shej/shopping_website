{"ast":null,"code":"import { createVNode as _createVNode, mergeProps as _mergeProps, resolveDirective as _resolveDirective } from \"vue\"; // Styles\n\nimport \"./VCheckbox.css\"; // Components\n\nimport { makeVInputProps, VInput } from \"../VInput/VInput.mjs\";\nimport { makeVCheckboxBtnProps, VCheckboxBtn } from \"./VCheckboxBtn.mjs\"; // Composables\n\nimport { useFocus } from \"../../composables/focus.mjs\"; // Utilities\n\nimport { computed } from 'vue';\nimport { filterInputAttrs, genericComponent, getUid, omit, useRender } from \"../../util/index.mjs\"; // Types\n\nexport const VCheckbox = genericComponent()({\n  name: 'VCheckbox',\n  inheritAttrs: false,\n  props: { ...makeVInputProps(),\n    ...omit(makeVCheckboxBtnProps(), ['inline'])\n  },\n  emits: {\n    'update:focused': focused => true\n  },\n\n  setup(props, _ref) {\n    let {\n      attrs,\n      slots\n    } = _ref;\n    const {\n      isFocused,\n      focus,\n      blur\n    } = useFocus(props);\n    const uid = getUid();\n    const id = computed(() => props.id || `checkbox-${uid}`);\n    useRender(() => {\n      const [inputAttrs, controlAttrs] = filterInputAttrs(attrs);\n      const [inputProps, _1] = VInput.filterProps(props);\n      const [checkboxProps, _2] = VCheckboxBtn.filterProps(props);\n      return _createVNode(VInput, _mergeProps({\n        \"class\": \"v-checkbox\"\n      }, inputAttrs, inputProps, {\n        \"id\": id.value,\n        \"focused\": isFocused.value\n      }), { ...slots,\n        default: _ref2 => {\n          let {\n            id,\n            messagesId,\n            isDisabled,\n            isReadonly\n          } = _ref2;\n          return _createVNode(VCheckboxBtn, _mergeProps(checkboxProps, {\n            \"id\": id.value,\n            \"aria-describedby\": messagesId.value,\n            \"disabled\": isDisabled.value,\n            \"readonly\": isReadonly.value\n          }, controlAttrs, {\n            \"onFocus\": focus,\n            \"onBlur\": blur\n          }), slots);\n        }\n      });\n    });\n    return {};\n  }\n\n});","map":{"version":3,"mappings":"qHAAA;;AACA,yB,CAEA;;AAAA,SAESA,eAFT,EAE0BC,MAF1B,QAEgC,sBAFhC;AAEgC,SACvBC,qBADuB,EACAC,YADA,QACY,oBADZ,C,CAGhC;;AAAA,SACSC,QADT,QACiB,6BADjB,C,CAGA;;AACA,SAASC,QAAT,QAAyB,KAAzB;AAA8B,SACrBC,gBADqB,EACHC,gBADG,EACeC,MADf,EACuBC,IADvB,EAC6BC,SAD7B,QACsC,sBADtC,C,CAG9B;;AAKA,OAAO,MAAMC,SAAS,GAAGJ,gBAAgB,GAAmB;EAC1DK,IAAI,EAAE,WADoD;EAG1DC,YAAY,EAAE,KAH4C;EAK1DC,KAAK,EAAE,EACL,GAAGd,eAAe,EADb;IAEL,GAAGS,IAAI,CAACP,qBAAqB,EAAtB,EAA0B,CAAC,QAAD,CAA1B;EAFF,CALmD;EAU1Da,KAAK,EAAE;IACL,kBAAmBC,OAAgB,IAAK;EADnC,CAVmD;;EAc1DC,KAAKA,CAAEH,KAAFG,EAAOC,IAAPD,EAA2B;IAAA,IAAlB;MAAEE,KAAF;MAASC;IAAT,IAAgBF,IAAE;IAC9B,MAAM;MAAEG,SAAF;MAAaC,KAAb;MAAoBC;IAApB,IAA6BnB,QAAQ,CAACU,KAAD,CAA3C;IAEA,MAAMU,GAAG,GAAGhB,MAAM,EAAlB;IACA,MAAMiB,EAAE,GAAGpB,QAAQ,CAAC,MAAMS,KAAK,CAACW,EAANX,IAAa,YAAWU,GAAI,EAAnC,CAAnB;IAEAd,SAAS,CAAC,MAAM;MACd,MAAM,CAACgB,UAAD,EAAaC,YAAb,IAA6BrB,gBAAgB,CAACa,KAAD,CAAnD;MACA,MAAM,CAACS,UAAD,EAAaC,EAAb,IAAmB5B,MAAM,CAAC6B,WAAP7B,CAAmBa,KAAnBb,CAAzB;MACA,MAAM,CAAC8B,aAAD,EAAgBC,EAAhB,IAAsB7B,YAAY,CAAC2B,WAAb3B,CAAyBW,KAAzBX,CAA5B;MAEA;QAAA,SAEU;MAFV,GAGSuB,UAHT,EAISE,UAJT,EAImB;QAAA,MACVH,EAAE,CAACQ,KADO;QACF,WACHZ,SAAS,CAACY;MAFL,CAJnB,GAM6B,EAGvB,GAAGb,KAHoB;QAIvBc,OAAO,EAAEC;UAAA,IAAC;YACRV,EADQ;YAERW,UAFQ;YAGRC,UAHQ;YAIRC;UAJQ,IAKTH,KALQ;UAKR,8CAEQJ,aAFR,EAEqB;YAAA,MACbN,EAAE,CAACQ,KADU;YACL,oBACMG,UAAU,CAACH,KAFZ;YAEiB,YACxBI,UAAU,CAACJ,KAHJ;YAGS,YAChBK,UAAU,CAACL;UAJJ,CAFrB,EAOQN,YAPR,EAOoB;YAAA,WACPL,KADO;YACF,UACNC;UAFQ,CAPpB,GAUaH,KAVb;QAUkB;MAnBI,CAN7B;IA+BD,CApCQ,CAATV;IAsCA,OAAO,EAAP;EACF;;AA3D0D,CAAnB,CAAlC","names":["makeVInputProps","VInput","makeVCheckboxBtnProps","VCheckboxBtn","useFocus","computed","filterInputAttrs","genericComponent","getUid","omit","useRender","VCheckbox","name","inheritAttrs","props","emits","focused","setup","_ref","attrs","slots","isFocused","focus","blur","uid","id","inputAttrs","controlAttrs","inputProps","_1","filterProps","checkboxProps","_2","value","default","_ref2","messagesId","isDisabled","isReadonly"],"sources":["../../../src/components/VCheckbox/VCheckbox.tsx"],"sourcesContent":["// Styles\nimport './VCheckbox.sass'\n\n// Components\nimport type { VInputSlots } from '@/components/VInput/VInput'\nimport { makeVInputProps, VInput } from '@/components/VInput/VInput'\nimport { makeVCheckboxBtnProps, VCheckboxBtn } from './VCheckboxBtn'\n\n// Composables\nimport { useFocus } from '@/composables/focus'\n\n// Utilities\nimport { computed } from 'vue'\nimport { filterInputAttrs, genericComponent, getUid, omit, useRender } from '@/util'\n\n// Types\nimport type { VSelectionControlSlots } from '../VSelectionControl/VSelectionControl'\n\nexport type VCheckboxSlots = VInputSlots & VSelectionControlSlots\n\nexport const VCheckbox = genericComponent<VCheckboxSlots>()({\n  name: 'VCheckbox',\n\n  inheritAttrs: false,\n\n  props: {\n    ...makeVInputProps(),\n    ...omit(makeVCheckboxBtnProps(), ['inline']),\n  },\n\n  emits: {\n    'update:focused': (focused: boolean) => true,\n  },\n\n  setup (props, { attrs, slots }) {\n    const { isFocused, focus, blur } = useFocus(props)\n\n    const uid = getUid()\n    const id = computed(() => props.id || `checkbox-${uid}`)\n\n    useRender(() => {\n      const [inputAttrs, controlAttrs] = filterInputAttrs(attrs)\n      const [inputProps, _1] = VInput.filterProps(props)\n      const [checkboxProps, _2] = VCheckboxBtn.filterProps(props)\n\n      return (\n        <VInput\n          class=\"v-checkbox\"\n          { ...inputAttrs }\n          { ...inputProps }\n          id={ id.value }\n          focused={ isFocused.value }\n        >\n          {{\n            ...slots,\n            default: ({\n              id,\n              messagesId,\n              isDisabled,\n              isReadonly,\n            }) => (\n              <VCheckboxBtn\n                { ...checkboxProps }\n                id={ id.value }\n                aria-describedby={ messagesId.value }\n                disabled={ isDisabled.value }\n                readonly={ isReadonly.value }\n                { ...controlAttrs }\n                onFocus={ focus }\n                onBlur={ blur }\n                v-slots={ slots }\n              />\n            ),\n          }}\n        </VInput>\n      )\n    })\n\n    return {}\n  },\n})\n\nexport type VCheckbox = InstanceType<typeof VCheckbox>\n"]},"metadata":{},"sourceType":"module"}