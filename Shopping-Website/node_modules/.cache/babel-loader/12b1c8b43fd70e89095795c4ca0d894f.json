{"ast":null,"code":"import { mergeProps as _mergeProps, Fragment as _Fragment, resolveDirective as _resolveDirective, createVNode as _createVNode } from \"vue\"; // Styles\n\nimport \"./VBreadcrumbs.css\"; // Components\n\nimport { VBreadcrumbsDivider } from \"./VBreadcrumbsDivider.mjs\";\nimport { VBreadcrumbsItem } from \"./VBreadcrumbsItem.mjs\";\nimport { VDefaultsProvider } from \"../VDefaultsProvider/index.mjs\";\nimport { VIcon } from \"../VIcon/index.mjs\"; // Composables\n\nimport { IconValue } from \"../../composables/icons.mjs\";\nimport { makeDensityProps, useDensity } from \"../../composables/density.mjs\";\nimport { makeRoundedProps, useRounded } from \"../../composables/rounded.mjs\";\nimport { makeTagProps } from \"../../composables/tag.mjs\";\nimport { provideDefaults } from \"../../composables/defaults.mjs\";\nimport { useBackgroundColor } from \"../../composables/color.mjs\"; // Utilities\n\nimport { genericComponent, useRender } from \"../../util/index.mjs\";\nimport { toRef } from 'vue'; // Types\n\nexport const VBreadcrumbs = genericComponent()({\n  name: 'VBreadcrumbs',\n  props: {\n    activeClass: String,\n    activeColor: String,\n    bgColor: String,\n    color: String,\n    disabled: Boolean,\n    divider: {\n      type: String,\n      default: '/'\n    },\n    icon: IconValue,\n    items: {\n      type: Array,\n      default: () => []\n    },\n    ...makeDensityProps(),\n    ...makeRoundedProps(),\n    ...makeTagProps({\n      tag: 'ul'\n    })\n  },\n\n  setup(props, _ref) {\n    let {\n      slots\n    } = _ref;\n    const {\n      backgroundColorClasses,\n      backgroundColorStyles\n    } = useBackgroundColor(toRef(props, 'bgColor'));\n    const {\n      densityClasses\n    } = useDensity(props);\n    const {\n      roundedClasses\n    } = useRounded(props);\n    provideDefaults({\n      VBreadcrumbsDivider: {\n        divider: toRef(props, 'divider')\n      },\n      VBreadcrumbsItem: {\n        activeClass: toRef(props, 'activeClass'),\n        activeColor: toRef(props, 'activeColor'),\n        color: toRef(props, 'color'),\n        disabled: toRef(props, 'disabled')\n      }\n    });\n    useRender(() => {\n      const hasPrepend = !!(slots.prepend || props.icon);\n      return _createVNode(props.tag, {\n        \"class\": ['v-breadcrumbs', backgroundColorClasses.value, densityClasses.value, roundedClasses.value],\n        \"style\": backgroundColorStyles.value\n      }, {\n        default: () => [hasPrepend && _createVNode(\"div\", {\n          \"key\": \"prepend\",\n          \"class\": \"v-breadcrumbs__prepend\"\n        }, [!slots.prepend ? _createVNode(VIcon, {\n          \"key\": \"prepend-icon\",\n          \"start\": true,\n          \"icon\": props.icon\n        }, null) : _createVNode(VDefaultsProvider, {\n          \"key\": \"prepend-defaults\",\n          \"disabled\": !props.icon,\n          \"defaults\": {\n            VIcon: {\n              icon: props.icon,\n              start: true\n            }\n          }\n        }, slots.prepend)]), props.items.map((item, index, array) => _createVNode(_Fragment, null, [_createVNode(VBreadcrumbsItem, _mergeProps({\n          \"key\": index,\n          \"disabled\": index >= array.length - 1\n        }, typeof item === 'string' ? {\n          title: item\n        } : item), {\n          default: slots.title ? () => slots.title?.({\n            item,\n            index\n          }) : undefined\n        }), index < array.length - 1 && _createVNode(VBreadcrumbsDivider, null, {\n          default: slots.divider ? () => slots.divider?.({\n            item,\n            index\n          }) : undefined\n        })])), slots.default?.()]\n      });\n    });\n    return {};\n  }\n\n});","map":{"version":3,"mappings":"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","names":["VBreadcrumbsDivider","VBreadcrumbsItem","VDefaultsProvider","VIcon","IconValue","makeDensityProps","useDensity","makeRoundedProps","useRounded","makeTagProps","provideDefaults","useBackgroundColor","genericComponent","useRender","toRef","VBreadcrumbs","name","props","activeClass","String","activeColor","bgColor","color","disabled","Boolean","divider","type","default","icon","items","Array","tag","setup","_ref","slots","backgroundColorClasses","backgroundColorStyles","densityClasses","roundedClasses","hasPrepend","prepend","value","_createVNode","start","map","item","index","array","length","title","undefined"],"sources":["../../../src/components/VBreadcrumbs/VBreadcrumbs.tsx"],"sourcesContent":["// Styles\nimport './VBreadcrumbs.sass'\n\n// Components\nimport { VBreadcrumbsDivider } from './VBreadcrumbsDivider'\nimport { VBreadcrumbsItem } from './VBreadcrumbsItem'\nimport { VDefaultsProvider } from '@/components/VDefaultsProvider'\nimport { VIcon } from '@/components/VIcon'\n\n// Composables\nimport { IconValue } from '@/composables/icons'\nimport { makeDensityProps, useDensity } from '@/composables/density'\nimport { makeRoundedProps, useRounded } from '@/composables/rounded'\nimport { makeTagProps } from '@/composables/tag'\nimport { provideDefaults } from '@/composables/defaults'\nimport { useBackgroundColor } from '@/composables/color'\n\n// Utilities\nimport { genericComponent, useRender } from '@/util'\nimport { toRef } from 'vue'\n\n// Types\nimport type { LinkProps } from '@/composables/router'\nimport type { PropType } from 'vue'\nimport type { SlotsToProps } from '@/util'\n\nexport type BreadcrumbItem = string | (LinkProps & {\n  text: string\n  disabled?: boolean\n})\n\nexport const VBreadcrumbs = genericComponent<new <T>() => {\n  $props: {\n    items?: T[]\n  } & SlotsToProps<{\n    prepend: []\n    title: [{ item: T, index: number }]\n    divider: [{ item: T, index: number }]\n    default: []\n  }>\n}>()({\n  name: 'VBreadcrumbs',\n\n  props: {\n    activeClass: String,\n    activeColor: String,\n    bgColor: String,\n    color: String,\n    disabled: Boolean,\n    divider: {\n      type: String,\n      default: '/',\n    },\n    icon: IconValue,\n    items: {\n      type: Array as PropType<BreadcrumbItem[]>,\n      default: () => ([]),\n    },\n\n    ...makeDensityProps(),\n    ...makeRoundedProps(),\n    ...makeTagProps({ tag: 'ul' }),\n  },\n\n  setup (props, { slots }) {\n    const { backgroundColorClasses, backgroundColorStyles } = useBackgroundColor(toRef(props, 'bgColor'))\n    const { densityClasses } = useDensity(props)\n    const { roundedClasses } = useRounded(props)\n\n    provideDefaults({\n      VBreadcrumbsDivider: {\n        divider: toRef(props, 'divider'),\n      },\n      VBreadcrumbsItem: {\n        activeClass: toRef(props, 'activeClass'),\n        activeColor: toRef(props, 'activeColor'),\n        color: toRef(props, 'color'),\n        disabled: toRef(props, 'disabled'),\n      },\n    })\n\n    useRender(() => {\n      const hasPrepend = !!(slots.prepend || props.icon)\n\n      return (\n        <props.tag\n          class={[\n            'v-breadcrumbs',\n            backgroundColorClasses.value,\n            densityClasses.value,\n            roundedClasses.value,\n          ]}\n          style={ backgroundColorStyles.value }\n        >\n          { hasPrepend && (\n            <div key=\"prepend\" class=\"v-breadcrumbs__prepend\">\n              { !slots.prepend ? (\n                <VIcon\n                  key=\"prepend-icon\"\n                  start\n                  icon={ props.icon }\n                />\n              ) : (\n                <VDefaultsProvider\n                  key=\"prepend-defaults\"\n                  disabled={ !props.icon }\n                  defaults={{\n                    VIcon: {\n                      icon: props.icon,\n                      start: true,\n                    },\n                  }}\n                  v-slots:default={ slots.prepend }\n                />\n              )}\n            </div>\n          )}\n\n          { props.items.map((item, index, array) => (\n            <>\n              <VBreadcrumbsItem\n                key={ index }\n                disabled={ index >= array.length - 1 }\n                { ...(typeof item === 'string' ? { title: item } : item) }\n                v-slots={{\n                  default: slots.title ? () => slots.title?.({ item, index }) : undefined,\n                }}\n              />\n\n              { index < array.length - 1 && (\n                <VBreadcrumbsDivider\n                  v-slots={{\n                    default: slots.divider ? () => slots.divider?.({ item, index }) : undefined,\n                  }}\n                />\n              )}\n            </>\n          ))}\n\n          { slots.default?.() }\n        </props.tag>\n      )\n    })\n\n    return {}\n  },\n})\n\nexport type VBreadcrumbs = InstanceType<typeof VBreadcrumbs>\n"]},"metadata":{},"sourceType":"module"}