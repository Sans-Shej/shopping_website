{"ast":null,"code":"import { withDirectives as _withDirectives, resolveDirective as _resolveDirective, mergeProps as _mergeProps, createVNode as _createVNode } from \"vue\"; // Styles\n\nimport \"./VSelectionControl.css\"; // Components\n\nimport { VIcon } from \"../VIcon/index.mjs\";\nimport { VLabel } from \"../VLabel/index.mjs\";\nimport { makeSelectionControlGroupProps, VSelectionControlGroupSymbol } from \"../VSelectionControlGroup/VSelectionControlGroup.mjs\"; // Directives\n\nimport { Ripple } from \"../../directives/ripple/index.mjs\"; // Composables\n\nimport { useDensity } from \"../../composables/density.mjs\";\nimport { useProxiedModel } from \"../../composables/proxiedModel.mjs\";\nimport { useTextColor } from \"../../composables/color.mjs\"; // Utilities\n\nimport { computed, inject, nextTick, ref } from 'vue';\nimport { filterInputAttrs, genericComponent, getUid, propsFactory, SUPPORTS_FOCUS_VISIBLE, useRender, wrapInArray } from \"../../util/index.mjs\"; // Types\n\nexport const makeSelectionControlProps = propsFactory({\n  label: String,\n  trueValue: null,\n  falseValue: null,\n  value: null,\n  ...makeSelectionControlGroupProps()\n}, 'v-selection-control');\nexport function useSelectionControl(props) {\n  const group = inject(VSelectionControlGroupSymbol, undefined);\n  const {\n    densityClasses\n  } = useDensity(props);\n  const modelValue = useProxiedModel(props, 'modelValue');\n  const trueValue = computed(() => props.trueValue !== undefined ? props.trueValue : props.value !== undefined ? props.value : true);\n  const falseValue = computed(() => props.falseValue !== undefined ? props.falseValue : false);\n  const isMultiple = computed(() => !!props.multiple || props.multiple == null && Array.isArray(modelValue.value));\n  const model = computed({\n    get() {\n      const val = group ? group.modelValue.value : modelValue.value;\n      return isMultiple.value ? val.some(v => props.valueComparator(v, trueValue.value)) : props.valueComparator(val, trueValue.value);\n    },\n\n    set(val) {\n      if (props.readonly) return;\n      const currentValue = val ? trueValue.value : falseValue.value;\n      let newVal = currentValue;\n\n      if (isMultiple.value) {\n        newVal = val ? [...wrapInArray(modelValue.value), currentValue] : wrapInArray(modelValue.value).filter(item => !props.valueComparator(item, trueValue.value));\n      }\n\n      if (group) {\n        group.modelValue.value = newVal;\n      } else {\n        modelValue.value = newVal;\n      }\n    }\n\n  });\n  const {\n    textColorClasses,\n    textColorStyles\n  } = useTextColor(computed(() => {\n    return model.value && !props.error && !props.disabled ? props.color : undefined;\n  }));\n  const icon = computed(() => model.value ? props.trueIcon : props.falseIcon);\n  return {\n    group,\n    densityClasses,\n    trueValue,\n    falseValue,\n    model,\n    textColorClasses,\n    textColorStyles,\n    icon\n  };\n}\nexport const VSelectionControl = genericComponent()({\n  name: 'VSelectionControl',\n  directives: {\n    Ripple\n  },\n  inheritAttrs: false,\n  props: makeSelectionControlProps(),\n  emits: {\n    'update:modelValue': val => true\n  },\n\n  setup(props, _ref) {\n    let {\n      attrs,\n      slots\n    } = _ref;\n    const {\n      group,\n      densityClasses,\n      icon,\n      model,\n      textColorClasses,\n      textColorStyles,\n      trueValue\n    } = useSelectionControl(props);\n    const uid = getUid();\n    const id = computed(() => props.id || `input-${uid}`);\n    const isFocused = ref(false);\n    const isFocusVisible = ref(false);\n    const input = ref();\n    group?.onForceUpdate(() => {\n      if (input.value) {\n        input.value.checked = model.value;\n      }\n    });\n\n    function onFocus(e) {\n      isFocused.value = true;\n\n      if (!SUPPORTS_FOCUS_VISIBLE || SUPPORTS_FOCUS_VISIBLE && e.target.matches(':focus-visible')) {\n        isFocusVisible.value = true;\n      }\n    }\n\n    function onBlur() {\n      isFocused.value = false;\n      isFocusVisible.value = false;\n    }\n\n    function onInput(e) {\n      if (props.readonly && group) {\n        nextTick(() => group.forceUpdate());\n      }\n\n      model.value = e.target.checked;\n    }\n\n    useRender(() => {\n      const label = slots.label ? slots.label({\n        label: props.label,\n        props: {\n          for: id.value\n        }\n      }) : props.label;\n      const [rootAttrs, inputAttrs] = filterInputAttrs(attrs);\n      return _createVNode(\"div\", _mergeProps({\n        \"class\": ['v-selection-control', {\n          'v-selection-control--dirty': model.value,\n          'v-selection-control--disabled': props.disabled,\n          'v-selection-control--error': props.error,\n          'v-selection-control--focused': isFocused.value,\n          'v-selection-control--focus-visible': isFocusVisible.value,\n          'v-selection-control--inline': props.inline\n        }, densityClasses.value]\n      }, rootAttrs), [_createVNode(\"div\", {\n        \"class\": ['v-selection-control__wrapper', textColorClasses.value],\n        \"style\": textColorStyles.value\n      }, [slots.default?.(), _withDirectives(_createVNode(\"div\", {\n        \"class\": ['v-selection-control__input']\n      }, [icon.value && _createVNode(VIcon, {\n        \"key\": \"icon\",\n        \"icon\": icon.value\n      }, null), _createVNode(\"input\", _mergeProps({\n        \"ref\": input,\n        \"checked\": model.value,\n        \"disabled\": props.disabled,\n        \"id\": id.value,\n        \"onBlur\": onBlur,\n        \"onFocus\": onFocus,\n        \"onInput\": onInput,\n        \"aria-disabled\": props.readonly,\n        \"type\": props.type,\n        \"value\": trueValue.value,\n        \"name\": props.name,\n        \"aria-checked\": props.type === 'checkbox' ? model.value : undefined\n      }, inputAttrs), null), slots.input?.({\n        model,\n        textColorClasses,\n        textColorStyles,\n        props: {\n          onFocus,\n          onBlur,\n          id: id.value\n        }\n      })]), [[_resolveDirective(\"ripple\"), props.ripple && [!props.disabled && !props.readonly, null, ['center', 'circle']]]])]), label && _createVNode(VLabel, {\n        \"for\": id.value,\n        \"clickable\": true\n      }, {\n        default: () => [label]\n      })]);\n    });\n    return {\n      isFocused,\n      input\n    };\n  }\n\n});","map":{"version":3,"mappings":"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","names":["VIcon","VLabel","makeSelectionControlGroupProps","VSelectionControlGroupSymbol","Ripple","useDensity","useProxiedModel","useTextColor","computed","inject","nextTick","ref","filterInputAttrs","genericComponent","getUid","propsFactory","SUPPORTS_FOCUS_VISIBLE","useRender","wrapInArray","makeSelectionControlProps","label","String","trueValue","falseValue","value","useSelectionControl","props","group","undefined","densityClasses","modelValue","isMultiple","multiple","Array","isArray","model","get","val","some","v","valueComparator","set","readonly","currentValue","newVal","filter","item","textColorClasses","textColorStyles","error","disabled","color","icon","trueIcon","falseIcon","VSelectionControl","name","directives","inheritAttrs","emits","setup","_ref","attrs","slots","uid","id","isFocused","isFocusVisible","input","onForceUpdate","checked","onFocus","e","target","matches","onBlur","onInput","forceUpdate","for","rootAttrs","inputAttrs","inline","default","_withDirectives","_createVNode","type","ripple"],"sources":["../../../src/components/VSelectionControl/VSelectionControl.tsx"],"sourcesContent":["// Styles\nimport './VSelectionControl.sass'\n\n// Components\nimport { VIcon } from '@/components/VIcon'\nimport { VLabel } from '@/components/VLabel'\nimport { makeSelectionControlGroupProps, VSelectionControlGroupSymbol } from '@/components/VSelectionControlGroup/VSelectionControlGroup'\n\n// Directives\nimport { Ripple } from '@/directives/ripple'\n\n// Composables\nimport { useDensity } from '@/composables/density'\nimport { useProxiedModel } from '@/composables/proxiedModel'\nimport { useTextColor } from '@/composables/color'\n\n// Utilities\nimport { computed, inject, nextTick, ref } from 'vue'\nimport {\n  filterInputAttrs,\n  genericComponent,\n  getUid,\n  propsFactory,\n  SUPPORTS_FOCUS_VISIBLE,\n  useRender,\n  wrapInArray,\n} from '@/util'\n\n// Types\nimport type { CSSProperties, ExtractPropTypes, Ref, WritableComputedRef } from 'vue'\nimport type { MakeSlots, SlotsToProps } from '@/util'\n\nexport type SelectionControlSlot = {\n  model: WritableComputedRef<any>\n  textColorClasses: Ref<string[]>\n  textColorStyles: Ref<CSSProperties>\n  props: {\n    onBlur: (e: Event) => void\n    onFocus: (e: FocusEvent) => void\n    id: string\n  }\n}\n\nexport type VSelectionControlSlots = MakeSlots<{\n  default: []\n  label: [{ label: string | undefined, props: Record<string, unknown> }]\n  input: [SelectionControlSlot]\n}>\n\nexport const makeSelectionControlProps = propsFactory({\n  label: String,\n  trueValue: null,\n  falseValue: null,\n  value: null,\n\n  ...makeSelectionControlGroupProps(),\n}, 'v-selection-control')\n\nexport function useSelectionControl (\n  props: ExtractPropTypes<ReturnType<typeof makeSelectionControlProps>> & {\n    'onUpdate:modelValue': ((val: any) => void) | undefined\n  }\n) {\n  const group = inject(VSelectionControlGroupSymbol, undefined)\n  const { densityClasses } = useDensity(props)\n  const modelValue = useProxiedModel(props, 'modelValue')\n  const trueValue = computed(() => (\n    props.trueValue !== undefined ? props.trueValue\n    : props.value !== undefined ? props.value\n    : true\n  ))\n  const falseValue = computed(() => props.falseValue !== undefined ? props.falseValue : false)\n  const isMultiple = computed(() => (\n    !!props.multiple ||\n    (props.multiple == null && Array.isArray(modelValue.value))\n  ))\n  const model = computed({\n    get () {\n      const val = group ? group.modelValue.value : modelValue.value\n\n      return isMultiple.value\n        ? val.some((v: any) => props.valueComparator(v, trueValue.value))\n        : props.valueComparator(val, trueValue.value)\n    },\n    set (val: boolean) {\n      if (props.readonly) return\n\n      const currentValue = val ? trueValue.value : falseValue.value\n\n      let newVal = currentValue\n\n      if (isMultiple.value) {\n        newVal = val\n          ? [...wrapInArray(modelValue.value), currentValue]\n          : wrapInArray(modelValue.value).filter((item: any) => !props.valueComparator(item, trueValue.value))\n      }\n\n      if (group) {\n        group.modelValue.value = newVal\n      } else {\n        modelValue.value = newVal\n      }\n    },\n  })\n  const { textColorClasses, textColorStyles } = useTextColor(computed(() => {\n    return (\n      model.value &&\n      !props.error &&\n      !props.disabled\n    ) ? props.color : undefined\n  }))\n  const icon = computed(() => model.value ? props.trueIcon : props.falseIcon)\n\n  return {\n    group,\n    densityClasses,\n    trueValue,\n    falseValue,\n    model,\n    textColorClasses,\n    textColorStyles,\n    icon,\n  }\n}\n\nexport const VSelectionControl = genericComponent<new <T>() => {\n  $props: {\n    modelValue?: T\n    'onUpdate:modelValue'?: (val: T) => any\n  } & SlotsToProps<VSelectionControlSlots>\n}>()({\n  name: 'VSelectionControl',\n\n  directives: { Ripple },\n\n  inheritAttrs: false,\n\n  props: makeSelectionControlProps(),\n\n  emits: {\n    'update:modelValue': (val: any) => true,\n  },\n\n  setup (props, { attrs, slots }) {\n    const {\n      group,\n      densityClasses,\n      icon,\n      model,\n      textColorClasses,\n      textColorStyles,\n      trueValue,\n    } = useSelectionControl(props)\n    const uid = getUid()\n    const id = computed(() => props.id || `input-${uid}`)\n    const isFocused = ref(false)\n    const isFocusVisible = ref(false)\n    const input = ref<HTMLInputElement>()\n\n    group?.onForceUpdate(() => {\n      if (input.value) {\n        input.value.checked = model.value\n      }\n    })\n\n    function onFocus (e: FocusEvent) {\n      isFocused.value = true\n      if (\n        !SUPPORTS_FOCUS_VISIBLE ||\n        (SUPPORTS_FOCUS_VISIBLE && (e.target as HTMLElement).matches(':focus-visible'))\n      ) {\n        isFocusVisible.value = true\n      }\n    }\n\n    function onBlur () {\n      isFocused.value = false\n      isFocusVisible.value = false\n    }\n\n    function onInput (e: Event) {\n      if (props.readonly && group) {\n        nextTick(() => group.forceUpdate())\n      }\n      model.value = (e.target as HTMLInputElement).checked\n    }\n\n    useRender(() => {\n      const label = slots.label\n        ? slots.label({\n          label: props.label,\n          props: { for: id.value },\n        })\n        : props.label\n      const [rootAttrs, inputAttrs] = filterInputAttrs(attrs)\n\n      return (\n        <div\n          class={[\n            'v-selection-control',\n            {\n              'v-selection-control--dirty': model.value,\n              'v-selection-control--disabled': props.disabled,\n              'v-selection-control--error': props.error,\n              'v-selection-control--focused': isFocused.value,\n              'v-selection-control--focus-visible': isFocusVisible.value,\n              'v-selection-control--inline': props.inline,\n            },\n            densityClasses.value,\n          ]}\n          { ...rootAttrs }\n        >\n          <div\n            class={[\n              'v-selection-control__wrapper',\n              textColorClasses.value,\n            ]}\n            style={ textColorStyles.value }\n          >\n            { slots.default?.() }\n\n            <div\n              class={[\n                'v-selection-control__input',\n              ]}\n              v-ripple={ props.ripple && [\n                !props.disabled && !props.readonly,\n                null,\n                ['center', 'circle'],\n              ]}\n            >\n              { icon.value && <VIcon key=\"icon\" icon={ icon.value } /> }\n\n              <input\n                ref={ input }\n                checked={ model.value }\n                disabled={ props.disabled }\n                id={ id.value }\n                onBlur={ onBlur }\n                onFocus={ onFocus }\n                onInput={ onInput }\n                aria-disabled={ props.readonly }\n                type={ props.type }\n                value={ trueValue.value }\n                name={ props.name }\n                aria-checked={ props.type === 'checkbox' ? model.value : undefined }\n                { ...inputAttrs }\n              />\n\n              { slots.input?.({\n                model,\n                textColorClasses,\n                textColorStyles,\n                props: {\n                  onFocus,\n                  onBlur,\n                  id: id.value,\n                },\n              } as SelectionControlSlot)}\n            </div>\n          </div>\n\n          { label && (\n            <VLabel for={ id.value } clickable>\n              { label }\n            </VLabel>\n          )}\n        </div>\n      )\n    })\n\n    return {\n      isFocused,\n      input,\n    }\n  },\n})\n\nexport type VSelectionControl = InstanceType<typeof VSelectionControl>\n"]},"metadata":{},"sourceType":"module"}