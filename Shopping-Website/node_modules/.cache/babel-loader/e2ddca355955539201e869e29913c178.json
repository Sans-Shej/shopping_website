{"ast":null,"code":"import { resolveDirective as _resolveDirective, createVNode as _createVNode } from \"vue\"; // Styles\n\nimport \"./VInput.css\"; // Components\n\nimport { VMessages } from \"../VMessages/index.mjs\"; // Composables\n\nimport { IconValue } from \"../../composables/icons.mjs\";\nimport { makeDensityProps, useDensity } from \"../../composables/density.mjs\";\nimport { makeValidationProps, useValidation } from \"../../composables/validation.mjs\"; // Utilities\n\nimport { computed } from 'vue';\nimport { EventProp, genericComponent, getUid, propsFactory, useRender } from \"../../util/index.mjs\"; // Types\n\nimport { useInputIcon } from \"./InputIcon.mjs\";\nexport const makeVInputProps = propsFactory({\n  id: String,\n  appendIcon: IconValue,\n  prependIcon: IconValue,\n  hideDetails: [Boolean, String],\n  hint: String,\n  persistentHint: Boolean,\n  messages: {\n    type: [Array, String],\n    default: () => []\n  },\n  direction: {\n    type: String,\n    default: 'horizontal',\n    validator: v => ['horizontal', 'vertical'].includes(v)\n  },\n  'onClick:prepend': EventProp(),\n  'onClick:append': EventProp(),\n  ...makeDensityProps(),\n  ...makeValidationProps()\n}, 'v-input');\nexport const VInput = genericComponent()({\n  name: 'VInput',\n  props: { ...makeVInputProps()\n  },\n  emits: {\n    'update:modelValue': val => true\n  },\n\n  setup(props, _ref) {\n    let {\n      attrs,\n      slots,\n      emit\n    } = _ref;\n    const {\n      densityClasses\n    } = useDensity(props);\n    const {\n      InputIcon\n    } = useInputIcon(props);\n    const uid = getUid();\n    const id = computed(() => props.id || `input-${uid}`);\n    const messagesId = computed(() => `${id.value}-messages`);\n    const {\n      errorMessages,\n      isDirty,\n      isDisabled,\n      isReadonly,\n      isPristine,\n      isValid,\n      isValidating,\n      reset,\n      resetValidation,\n      validate,\n      validationClasses\n    } = useValidation(props, 'v-input', id);\n    const slotProps = computed(() => ({\n      id,\n      messagesId,\n      isDirty,\n      isDisabled,\n      isReadonly,\n      isPristine,\n      isValid,\n      isValidating,\n      reset,\n      resetValidation,\n      validate\n    }));\n    const messages = computed(() => {\n      if (errorMessages.value.length > 0) {\n        return errorMessages.value;\n      } else if (props.hint && (props.persistentHint || props.focused)) {\n        return props.hint;\n      } else {\n        return props.messages;\n      }\n    });\n    useRender(() => {\n      const hasPrepend = !!(slots.prepend || props.prependIcon);\n      const hasAppend = !!(slots.append || props.appendIcon);\n      const hasMessages = messages.value.length > 0;\n      const hasDetails = !props.hideDetails || props.hideDetails === 'auto' && (hasMessages || !!slots.details);\n      return _createVNode(\"div\", {\n        \"class\": ['v-input', `v-input--${props.direction}`, densityClasses.value, validationClasses.value]\n      }, [hasPrepend && _createVNode(\"div\", {\n        \"key\": \"prepend\",\n        \"class\": \"v-input__prepend\"\n      }, [slots.prepend?.(slotProps.value), props.prependIcon && _createVNode(InputIcon, {\n        \"key\": \"prepend-icon\",\n        \"name\": \"prepend\"\n      }, null)]), slots.default && _createVNode(\"div\", {\n        \"class\": \"v-input__control\"\n      }, [slots.default?.(slotProps.value)]), hasAppend && _createVNode(\"div\", {\n        \"key\": \"append\",\n        \"class\": \"v-input__append\"\n      }, [props.appendIcon && _createVNode(InputIcon, {\n        \"key\": \"append-icon\",\n        \"name\": \"append\"\n      }, null), slots.append?.(slotProps.value)]), hasDetails && _createVNode(\"div\", {\n        \"class\": \"v-input__details\"\n      }, [_createVNode(VMessages, {\n        \"id\": messagesId.value,\n        \"active\": hasMessages,\n        \"messages\": messages.value\n      }, {\n        message: slots.message\n      }), slots.details?.(slotProps.value)])]);\n    });\n    return {\n      reset,\n      resetValidation,\n      validate\n    };\n  }\n\n});","map":{"version":3,"mappings":"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","names":["VMessages","IconValue","makeDensityProps","useDensity","makeValidationProps","useValidation","computed","EventProp","genericComponent","getUid","propsFactory","useRender","useInputIcon","makeVInputProps","id","String","appendIcon","prependIcon","hideDetails","Boolean","hint","persistentHint","messages","type","Array","default","direction","validator","v","includes","VInput","name","props","emits","val","setup","_ref","attrs","slots","emit","densityClasses","InputIcon","uid","messagesId","value","errorMessages","isDirty","isDisabled","isReadonly","isPristine","isValid","isValidating","reset","resetValidation","validate","validationClasses","slotProps","length","focused","hasPrepend","prepend","hasAppend","append","hasMessages","hasDetails","details","_createVNode","message"],"sources":["../../../src/components/VInput/VInput.tsx"],"sourcesContent":["// Styles\nimport './VInput.sass'\n\n// Components\nimport { VMessages } from '@/components/VMessages'\n\n// Composables\nimport { IconValue } from '@/composables/icons'\nimport { makeDensityProps, useDensity } from '@/composables/density'\nimport { makeValidationProps, useValidation } from '@/composables/validation'\n\n// Utilities\nimport { computed } from 'vue'\nimport { EventProp, genericComponent, getUid, propsFactory, useRender } from '@/util'\n\n// Types\nimport type { ComputedRef, PropType, Ref } from 'vue'\nimport type { MakeSlots } from '@/util'\nimport { useInputIcon } from '@/components/VInput/InputIcon'\n\nexport interface VInputSlot {\n  id: ComputedRef<string>\n  messagesId: ComputedRef<string>\n  isDirty: ComputedRef<boolean>\n  isDisabled: ComputedRef<boolean>\n  isReadonly: ComputedRef<boolean>\n  isPristine: Ref<boolean>\n  isValid: ComputedRef<boolean | null>\n  isValidating: Ref<boolean>\n  reset: () => void\n  resetValidation: () => void\n  validate: () => void\n}\n\nexport const makeVInputProps = propsFactory({\n  id: String,\n  appendIcon: IconValue,\n  prependIcon: IconValue,\n  hideDetails: [Boolean, String] as PropType<boolean | 'auto'>,\n  hint: String,\n  persistentHint: Boolean,\n  messages: {\n    type: [Array, String] as PropType<string | string[]>,\n    default: () => ([]),\n  },\n  direction: {\n    type: String as PropType<'horizontal' | 'vertical'>,\n    default: 'horizontal',\n    validator: (v: any) => ['horizontal', 'vertical'].includes(v),\n  },\n\n  'onClick:prepend': EventProp<[MouseEvent]>(),\n  'onClick:append': EventProp<[MouseEvent]>(),\n\n  ...makeDensityProps(),\n  ...makeValidationProps(),\n}, 'v-input')\n\nexport type VInputSlots = MakeSlots<{\n  default: [VInputSlot]\n  prepend: [VInputSlot]\n  append: [VInputSlot]\n  details: [VInputSlot]\n}>\n\nexport const VInput = genericComponent<VInputSlots>()({\n  name: 'VInput',\n\n  props: {\n    ...makeVInputProps(),\n  },\n\n  emits: {\n    'update:modelValue': (val: any) => true,\n  },\n\n  setup (props, { attrs, slots, emit }) {\n    const { densityClasses } = useDensity(props)\n    const { InputIcon } = useInputIcon(props)\n\n    const uid = getUid()\n    const id = computed(() => props.id || `input-${uid}`)\n    const messagesId = computed(() => `${id.value}-messages`)\n\n    const {\n      errorMessages,\n      isDirty,\n      isDisabled,\n      isReadonly,\n      isPristine,\n      isValid,\n      isValidating,\n      reset,\n      resetValidation,\n      validate,\n      validationClasses,\n    } = useValidation(props, 'v-input', id)\n\n    const slotProps = computed<VInputSlot>(() => ({\n      id,\n      messagesId,\n      isDirty,\n      isDisabled,\n      isReadonly,\n      isPristine,\n      isValid,\n      isValidating,\n      reset,\n      resetValidation,\n      validate,\n    }))\n\n    const messages = computed(() => {\n      if (errorMessages.value.length > 0) {\n        return errorMessages.value\n      } else if (props.hint && (props.persistentHint || props.focused)) {\n        return props.hint\n      } else {\n        return props.messages\n      }\n    })\n\n    useRender(() => {\n      const hasPrepend = !!(slots.prepend || props.prependIcon)\n      const hasAppend = !!(slots.append || props.appendIcon)\n      const hasMessages = messages.value.length > 0\n      const hasDetails = !props.hideDetails || (\n        props.hideDetails === 'auto' &&\n        (hasMessages || !!slots.details)\n      )\n\n      return (\n        <div class={[\n          'v-input',\n          `v-input--${props.direction}`,\n          densityClasses.value,\n          validationClasses.value,\n        ]}\n        >\n          { hasPrepend && (\n            <div key=\"prepend\" class=\"v-input__prepend\">\n              { slots.prepend?.(slotProps.value) }\n\n              { props.prependIcon && (\n                <InputIcon\n                  key=\"prepend-icon\"\n                  name=\"prepend\"\n                />\n              )}\n            </div>\n          )}\n\n          { slots.default && (\n            <div class=\"v-input__control\">\n              { slots.default?.(slotProps.value) }\n            </div>\n          )}\n\n          { hasAppend && (\n            <div key=\"append\" class=\"v-input__append\">\n              { props.appendIcon && (\n                <InputIcon\n                  key=\"append-icon\"\n                  name=\"append\"\n                />\n              )}\n\n              { slots.append?.(slotProps.value) }\n            </div>\n          )}\n\n          { hasDetails && (\n            <div class=\"v-input__details\">\n              <VMessages\n                id={ messagesId.value }\n                active={ hasMessages }\n                messages={ messages.value }\n                v-slots={{ message: slots.message }}\n              />\n\n              { slots.details?.(slotProps.value) }\n            </div>\n          )}\n        </div>\n      )\n    })\n\n    return {\n      reset,\n      resetValidation,\n      validate,\n    }\n  },\n})\n\nexport type VInput = InstanceType<typeof VInput>\n"]},"metadata":{},"sourceType":"module"}