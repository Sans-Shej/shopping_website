{"ast":null,"code":"import { useToggleScope } from \"./toggleScope.mjs\";\nimport { computed, inject, onScopeDispose, provide, reactive, readonly, ref, toRaw, watchEffect } from 'vue';\nimport { getCurrentInstance } from \"../util/index.mjs\"; // Types\n\nconst StackSymbol = Symbol.for('vuetify:stack');\nconst globalStack = reactive([]);\nexport function useStack(isActive, zIndex, disableGlobalStack) {\n  const vm = getCurrentInstance('useStack');\n  const createStackEntry = !disableGlobalStack;\n  const parent = inject(StackSymbol, undefined);\n  const stack = reactive({\n    activeChildren: new Set()\n  });\n  provide(StackSymbol, stack);\n\n  const _zIndex = ref(+zIndex.value);\n\n  useToggleScope(isActive, () => {\n    const lastZIndex = globalStack.at(-1)?.[1];\n    _zIndex.value = lastZIndex ? lastZIndex + 10 : +zIndex.value;\n\n    if (createStackEntry) {\n      globalStack.push([vm.uid, _zIndex.value]);\n    }\n\n    parent?.activeChildren.add(vm.uid);\n    onScopeDispose(() => {\n      if (createStackEntry) {\n        const idx = toRaw(globalStack).findIndex(v => v[0] === vm.uid);\n        globalStack.splice(idx, 1);\n      }\n\n      parent?.activeChildren.delete(vm.uid);\n    });\n  });\n  const globalTop = ref(true);\n\n  if (createStackEntry) {\n    watchEffect(() => {\n      const _isTop = globalStack.at(-1)?.[0] === vm.uid;\n\n      setTimeout(() => globalTop.value = _isTop);\n    });\n  }\n\n  const localTop = computed(() => !stack.activeChildren.size);\n  return {\n    globalTop: readonly(globalTop),\n    localTop,\n    stackStyles: computed(() => ({\n      zIndex: _zIndex.value\n    }))\n  };\n}","map":{"version":3,"mappings":"SAASA,sBAAc;AAEvB,SAASC,QAAT,EAAmBC,MAAnB,EAA2BC,cAA3B,EAA2CC,OAA3C,EAAoDC,QAApD,EAA8DC,QAA9D,EAAwEC,GAAxE,EAA6EC,KAA7E,EAAoFC,WAApF,QAAuG,KAAvG;AAA4G,SACnGC,kBADmG,QACjF,mBADiF,C,CAG5G;;AAGA,MAAMC,WAAuC,GAAGC,MAAM,CAACC,GAAPD,CAAW,eAAXA,CAAhD;AAMA,MAAME,WAAW,GAAGT,QAAQ,CAAkC,EAAlC,CAA5B;AAEA,OAAO,SAASU,QAAT,CACLC,QADK,EAELC,MAFK,EAGLC,kBAHK,EAIL;EACA,MAAMC,EAAE,GAAGT,kBAAkB,CAAC,UAAD,CAA7B;EACA,MAAMU,gBAAgB,GAAG,CAACF,kBAA1B;EAEA,MAAMG,MAAM,GAAGnB,MAAM,CAACS,WAAD,EAAcW,SAAd,CAArB;EACA,MAAMC,KAAmB,GAAGlB,QAAQ,CAAC;IACnCmB,cAAc,EAAE,IAAIC,GAAJ;EADmB,CAAD,CAApC;EAGArB,OAAO,CAACO,WAAD,EAAcY,KAAd,CAAPnB;;EAEA,MAAMsB,OAAO,GAAGnB,GAAG,CAAC,CAACU,MAAM,CAACU,KAAT,CAAnB;;EACA3B,cAAc,CAACgB,QAAD,EAAW,MAAM;IAC7B,MAAMY,UAAU,GAAGd,WAAW,CAACe,EAAZf,CAAe,CAAC,CAAhBA,IAAqB,CAArBA,CAAnB;IACAY,OAAO,CAACC,KAARD,GAAgBE,UAAU,GAAGA,UAAU,GAAG,EAAhB,GAAqB,CAACX,MAAM,CAACU,KAAvDD;;IAEA,IAAIN,gBAAJ,EAAsB;MACpBN,WAAW,CAACgB,IAAZhB,CAAiB,CAACK,EAAE,CAACY,GAAJ,EAASL,OAAO,CAACC,KAAjB,CAAjBb;IACF;;IAEAO,MAAM,EAAEG,cAARH,CAAuBW,GAAvBX,CAA2BF,EAAE,CAACY,GAA9BV;IAEAlB,cAAc,CAAC,MAAM;MACnB,IAAIiB,gBAAJ,EAAsB;QACpB,MAAMa,GAAG,GAAGzB,KAAK,CAACM,WAAD,CAALN,CAAmB0B,SAAnB1B,CAA6B2B,CAAC,IAAIA,CAAC,CAAC,CAAD,CAADA,KAAShB,EAAE,CAACY,GAA9CvB,CAAZ;QACAM,WAAW,CAACsB,MAAZtB,CAAmBmB,GAAnBnB,EAAwB,CAAxBA;MACF;;MAEAO,MAAM,EAAEG,cAARH,CAAuBgB,MAAvBhB,CAA8BF,EAAE,CAACY,GAAjCV;IACD,CAPa,CAAdlB;EAQD,CAlBa,CAAdH;EAoBA,MAAMsC,SAAS,GAAG/B,GAAG,CAAC,IAAD,CAArB;;EACA,IAAIa,gBAAJ,EAAsB;IACpBX,WAAW,CAAC,MAAM;MAChB,MAAM8B,MAAM,GAAGzB,WAAW,CAACe,EAAZf,CAAe,CAAC,CAAhBA,IAAqB,CAArBA,MAA4BK,EAAE,CAACY,GAA9C;;MACAS,UAAU,CAAC,MAAMF,SAAS,CAACX,KAAVW,GAAkBC,MAAzB,CAAVC;IACD,CAHU,CAAX/B;EAIF;;EAEA,MAAMgC,QAAQ,GAAGxC,QAAQ,CAAC,MAAM,CAACsB,KAAK,CAACC,cAAND,CAAqBmB,IAA7B,CAAzB;EAEA,OAAO;IACLJ,SAAS,EAAEhC,QAAQ,CAACgC,SAAD,CADd;IAELG,QAFK;IAGLE,WAAW,EAAE1C,QAAQ,CAAC,OAAO;MAAEgB,MAAM,EAAES,OAAO,CAACC;IAAlB,CAAP,CAAD;EAHhB,CAAP;AAKF","names":["useToggleScope","computed","inject","onScopeDispose","provide","reactive","readonly","ref","toRaw","watchEffect","getCurrentInstance","StackSymbol","Symbol","for","globalStack","useStack","isActive","zIndex","disableGlobalStack","vm","createStackEntry","parent","undefined","stack","activeChildren","Set","_zIndex","value","lastZIndex","at","push","uid","add","idx","findIndex","v","splice","delete","globalTop","_isTop","setTimeout","localTop","size","stackStyles"],"sources":["../../src/composables/stack.ts"],"sourcesContent":["import { useToggleScope } from '@/composables/toggleScope'\n\nimport { computed, inject, onScopeDispose, provide, reactive, readonly, ref, toRaw, watchEffect } from 'vue'\nimport { getCurrentInstance } from '@/util'\n\n// Types\nimport type { InjectionKey, Ref } from 'vue'\n\nconst StackSymbol: InjectionKey<StackProvide> = Symbol.for('vuetify:stack')\n\ninterface StackProvide {\n  activeChildren: Set<number>\n}\n\nconst globalStack = reactive<[uid: number, zIndex: number][]>([])\n\nexport function useStack (\n  isActive: Readonly<Ref<boolean>>,\n  zIndex: Readonly<Ref<string | number>>,\n  disableGlobalStack: boolean\n) {\n  const vm = getCurrentInstance('useStack')\n  const createStackEntry = !disableGlobalStack\n\n  const parent = inject(StackSymbol, undefined)\n  const stack: StackProvide = reactive({\n    activeChildren: new Set<number>(),\n  })\n  provide(StackSymbol, stack)\n\n  const _zIndex = ref(+zIndex.value)\n  useToggleScope(isActive, () => {\n    const lastZIndex = globalStack.at(-1)?.[1]\n    _zIndex.value = lastZIndex ? lastZIndex + 10 : +zIndex.value\n\n    if (createStackEntry) {\n      globalStack.push([vm.uid, _zIndex.value])\n    }\n\n    parent?.activeChildren.add(vm.uid)\n\n    onScopeDispose(() => {\n      if (createStackEntry) {\n        const idx = toRaw(globalStack).findIndex(v => v[0] === vm.uid)\n        globalStack.splice(idx, 1)\n      }\n\n      parent?.activeChildren.delete(vm.uid)\n    })\n  })\n\n  const globalTop = ref(true)\n  if (createStackEntry) {\n    watchEffect(() => {\n      const _isTop = globalStack.at(-1)?.[0] === vm.uid\n      setTimeout(() => globalTop.value = _isTop)\n    })\n  }\n\n  const localTop = computed(() => !stack.activeChildren.size)\n\n  return {\n    globalTop: readonly(globalTop),\n    localTop,\n    stackStyles: computed(() => ({ zIndex: _zIndex.value })),\n  }\n}\n"]},"metadata":{},"sourceType":"module"}