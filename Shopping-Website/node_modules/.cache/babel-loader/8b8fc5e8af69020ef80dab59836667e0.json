{"ast":null,"code":"import { withDirectives as _withDirectives, resolveDirective as _resolveDirective, createVNode as _createVNode } from \"vue\"; // Composables\n\nimport { makeDimensionProps, useDimension } from \"../../composables/dimensions.mjs\";\nimport { makeTagProps } from \"../../composables/tag.mjs\";\nimport { makeTransitionProps, MaybeTransition } from \"../../composables/transition.mjs\";\nimport { useProxiedModel } from \"../../composables/proxiedModel.mjs\"; // Directives\n\nimport intersect from \"../../directives/intersect/index.mjs\"; // Utilities\n\nimport { genericComponent, useRender } from \"../../util/index.mjs\"; // Types\n\nexport const VLazy = genericComponent()({\n  name: 'VLazy',\n  directives: {\n    intersect\n  },\n  props: {\n    modelValue: Boolean,\n    options: {\n      type: Object,\n      // For more information on types, navigate to:\n      // https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API\n      default: () => ({\n        root: undefined,\n        rootMargin: undefined,\n        threshold: undefined\n      })\n    },\n    ...makeDimensionProps(),\n    ...makeTagProps(),\n    ...makeTransitionProps({\n      transition: 'fade-transition'\n    })\n  },\n  emits: {\n    'update:modelValue': value => true\n  },\n\n  setup(props, _ref) {\n    let {\n      slots\n    } = _ref;\n    const {\n      dimensionStyles\n    } = useDimension(props);\n    const isActive = useProxiedModel(props, 'modelValue');\n\n    function onIntersect(isIntersecting) {\n      if (isActive.value) return;\n      isActive.value = isIntersecting;\n    }\n\n    useRender(() => _withDirectives(_createVNode(props.tag, {\n      \"class\": \"v-lazy\",\n      \"style\": dimensionStyles.value\n    }, {\n      default: () => [isActive.value && _createVNode(MaybeTransition, {\n        \"transition\": props.transition,\n        \"appear\": true\n      }, {\n        default: () => [slots.default?.()]\n      })]\n    }), [[_resolveDirective(\"intersect\"), {\n      handler: onIntersect,\n      options: props.options\n    }, null]]));\n    return {};\n  }\n\n});","map":{"version":3,"mappings":"6HAAA;;AAAA,SACSA,kBADT,EAC6BC,YAD7B,QACyC,kCADzC;AACyC,SAChCC,YADgC,QACpB,2BADoB;AACpB,SACZC,mBADY,EACSC,eADT,QACwB,kCADxB;AACwB,SACpCC,eADoC,QACrB,oCADqB,C,CAG7C;;AAAA,OACOC,SADP,MACgB,sCADhB,C,CAGA;;AAAA,SACSC,gBADT,EAC2BC,SAD3B,QACoC,sBADpC,C,CAGA;;AAGA,OAAO,MAAMC,KAAK,GAAGF,gBAAgB,GAAG;EACtCG,IAAI,EAAE,OADgC;EAGtCC,UAAU,EAAE;IAAEL;EAAF,CAH0B;EAKtCM,KAAK,EAAE;IACLC,UAAU,EAAEC,OADP;IAELC,OAAO,EAAE;MACPC,IAAI,EAAEC,MADC;MAEP;MACA;MACAC,OAAO,EAAEA,OAAO;QACdC,IAAI,EAAEC,SADQ;QAEdC,UAAU,EAAED,SAFE;QAGdE,SAAS,EAAEF;MAHG,CAAPF;IAJF,CAFJ;IAaL,GAAGlB,kBAAkB,EAbhB;IAcL,GAAGE,YAAY,EAdV;IAeL,GAAGC,mBAAmB,CAAC;MAAEoB,UAAU,EAAE;IAAd,CAAD;EAfjB,CAL+B;EAuBtCC,KAAK,EAAE;IACL,qBAAsBC,KAAc,IAAK;EADpC,CAvB+B;;EA2BtCC,KAAKA,CAAEd,KAAFc,EAAOC,IAAPD,EAAoB;IAAA,IAAX;MAAEE;IAAF,IAASD,IAAE;IACvB,MAAM;MAAEE;IAAF,IAAsB5B,YAAY,CAACW,KAAD,CAAxC;IAEA,MAAMkB,QAAQ,GAAGzB,eAAe,CAACO,KAAD,EAAQ,YAAR,CAAhC;;IAEA,SAASmB,WAAT,CAAsBC,cAAtB,EAA+C;MAC7C,IAAIF,QAAQ,CAACL,KAAb,EAAoB;MAEpBK,QAAQ,CAACL,KAATK,GAAiBE,cAAjBF;IACF;;IAEAtB,SAAS,CAAC;MAAA,SAEA,QAFA;MAEQ,SASNqB,eAAe,CAACJ;IAXlB,GAWuB;MAAAP,gBAE3BY,QAAQ,CAACL,KAATK,IAAcG;QAAA,cACgBrB,KAAK,CAACW,UADtB;QACgC;MADhC,GACgC;QAAAL,gBAC1CU,KAAK,CAACV,OAANU,IAD0C;MAAA,CADhC,CAFa;IAAA,CAXvB,GAiBL,kCAbC;MACEM,OAAO,EAAEH,WADX;MAEEhB,OAAO,EAAEH,KAAK,CAACG;IAFjB,CAaD,EATC,IASD,EAjBK,CAAD,CAATP;IAqBA,OAAO,EAAP;EACF;;AA5DsC,CAAH,CAA9B","names":["makeDimensionProps","useDimension","makeTagProps","makeTransitionProps","MaybeTransition","useProxiedModel","intersect","genericComponent","useRender","VLazy","name","directives","props","modelValue","Boolean","options","type","Object","default","root","undefined","rootMargin","threshold","transition","emits","value","setup","_ref","slots","dimensionStyles","isActive","onIntersect","isIntersecting","_createVNode","handler"],"sources":["../../../src/components/VLazy/VLazy.tsx"],"sourcesContent":["// Composables\nimport { makeDimensionProps, useDimension } from '@/composables/dimensions'\nimport { makeTagProps } from '@/composables/tag'\nimport { makeTransitionProps, MaybeTransition } from '@/composables/transition'\nimport { useProxiedModel } from '@/composables/proxiedModel'\n\n// Directives\nimport intersect from '@/directives/intersect'\n\n// Utilities\nimport { genericComponent, useRender } from '@/util'\n\n// Types\nimport type { PropType } from 'vue'\n\nexport const VLazy = genericComponent()({\n  name: 'VLazy',\n\n  directives: { intersect },\n\n  props: {\n    modelValue: Boolean,\n    options: {\n      type: Object as PropType<IntersectionObserverInit>,\n      // For more information on types, navigate to:\n      // https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API\n      default: () => ({\n        root: undefined,\n        rootMargin: undefined,\n        threshold: undefined,\n      }),\n    },\n\n    ...makeDimensionProps(),\n    ...makeTagProps(),\n    ...makeTransitionProps({ transition: 'fade-transition' }),\n  },\n\n  emits: {\n    'update:modelValue': (value: boolean) => true,\n  },\n\n  setup (props, { slots }) {\n    const { dimensionStyles } = useDimension(props)\n\n    const isActive = useProxiedModel(props, 'modelValue')\n\n    function onIntersect (isIntersecting: boolean) {\n      if (isActive.value) return\n\n      isActive.value = isIntersecting\n    }\n\n    useRender(() => (\n      <props.tag\n        class=\"v-lazy\"\n        v-intersect={[\n          {\n            handler: onIntersect,\n            options: props.options,\n          },\n          null,\n          isActive.value ? [] : ['once'],\n        ]}\n        style={ dimensionStyles.value }\n      >\n        { isActive.value && (\n          <MaybeTransition transition={ props.transition } appear>\n            { slots.default?.() }\n          </MaybeTransition>\n        )}\n      </props.tag>\n    ))\n\n    return {}\n  },\n})\n\nexport type VLazy = InstanceType<typeof VLazy>\n"]},"metadata":{},"sourceType":"module"}