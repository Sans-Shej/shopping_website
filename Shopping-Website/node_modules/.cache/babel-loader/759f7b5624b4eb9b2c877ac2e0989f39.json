{"ast":null,"code":"import { createVNode as _createVNode } from \"vue\"; // Styles\n\nimport \"./VColorPickerEdit.css\"; // Components\n\nimport { VBtn } from \"../VBtn/index.mjs\"; // Utilities\n\nimport { computed } from 'vue';\nimport { defineComponent, useRender } from \"../../util/index.mjs\";\nimport { modes, nullColor } from \"./util/index.mjs\"; // Types\n\nconst VColorPickerInput = _ref => {\n  let {\n    label,\n    ...rest\n  } = _ref;\n  return _createVNode(\"div\", {\n    \"class\": \"v-color-picker-edit__input\"\n  }, [_createVNode(\"input\", rest, null), _createVNode(\"span\", null, [label])]);\n};\n\nexport const VColorPickerEdit = defineComponent({\n  name: 'VColorPickerEdit',\n  props: {\n    color: Object,\n    disabled: Boolean,\n    mode: {\n      type: String,\n      default: 'rgba',\n      validator: v => Object.keys(modes).includes(v)\n    },\n    modes: {\n      type: Array,\n      default: () => Object.keys(modes),\n      validator: v => Array.isArray(v) && v.every(m => Object.keys(modes).includes(m))\n    }\n  },\n  emits: {\n    'update:color': color => true,\n    'update:mode': mode => true\n  },\n\n  setup(props, _ref2) {\n    let {\n      emit\n    } = _ref2;\n    const enabledModes = computed(() => {\n      return props.modes.map(key => ({ ...modes[key],\n        name: key\n      }));\n    });\n    const inputs = computed(() => {\n      const mode = enabledModes.value.find(m => m.name === props.mode);\n      if (!mode) return [];\n      const color = props.color ? mode.to(props.color) : null;\n      return mode.inputs?.map(_ref3 => {\n        let {\n          getValue,\n          getColor,\n          ...inputProps\n        } = _ref3;\n        return { ...mode.inputProps,\n          ...inputProps,\n          disabled: props.disabled,\n          value: color && getValue(color),\n          onChange: e => {\n            const target = e.target;\n            if (!target) return;\n            emit('update:color', mode.from(getColor(color ?? nullColor, target.value)));\n          }\n        };\n      });\n    });\n    useRender(() => _createVNode(\"div\", {\n      \"class\": \"v-color-picker-edit\"\n    }, [inputs.value?.map(props => _createVNode(VColorPickerInput, props, null)), enabledModes.value.length > 1 && _createVNode(VBtn, {\n      \"icon\": \"$unfold\",\n      \"size\": \"x-small\",\n      \"variant\": \"plain\",\n      \"onClick\": () => {\n        const mi = enabledModes.value.findIndex(m => m.name === props.mode);\n        emit('update:mode', enabledModes.value[(mi + 1) % enabledModes.value.length].name);\n      }\n    }, null)]));\n    return {};\n  }\n\n});","map":{"version":3,"mappings":"mDAAA;;AACA,gC,CAEA;;AAAA,SACSA,IADT,QACa,mBADb,C,CAGA;;AACA,SAASC,QAAT,QAAyB,KAAzB;AAA8B,SACrBC,eADqB,EACJC,SADI,QACK,sBADL;AACK,SAC1BC,KAD0B,EACnBC,SADmB,QACV,kBADU,C,CAGnC;;AAIA,MAAMC,iBAAiB,GAAGC,QAA6B;EAAA,IAA5B;IAAEC,KAAF;IAAS,GAAGC;EAAZ,IAAuBF,IAAK;EACrD;IAAA,SAEU;EAFV,GAEsC,uBAEtBE,IAFsB,EAElB,IAFkB,GAElBC,4BACRF,KADQ,EAFkB,CAFtC;AAQD,CATD;;AAWA,OAAO,MAAMG,gBAAgB,GAAGT,eAAe,CAAC;EAC9CU,IAAI,EAAE,kBADwC;EAG9CC,KAAK,EAAE;IACLC,KAAK,EAAEC,MADF;IAELC,QAAQ,EAAEC,OAFL;IAGLC,IAAI,EAAE;MACJC,IAAI,EAAEC,MADF;MAEJC,OAAO,EAAE,MAFL;MAGJC,SAAS,EAAGC,CAAS,IAAKR,MAAM,CAACS,IAAPT,CAAYX,KAAZW,EAAmBU,QAAnBV,CAA4BQ,CAA5BR;IAHtB,CAHD;IAQLX,KAAK,EAAE;MACLe,IAAI,EAAEO,KADD;MAELL,OAAO,EAAEA,MAAMN,MAAM,CAACS,IAAPT,CAAYX,KAAZW,CAFV;MAGLO,SAAS,EAAGC,CAAM,IAAKG,KAAK,CAACC,OAAND,CAAcH,CAAdG,KAAoBH,CAAC,CAACK,KAAFL,CAAQM,CAAC,IAAId,MAAM,CAACS,IAAPT,CAAYX,KAAZW,EAAmBU,QAAnBV,CAA4Bc,CAA5Bd,CAAbQ;IAHtC;EARF,CAHuC;EAkB9CO,KAAK,EAAE;IACL,gBAAiBhB,KAAU,IAAK,IAD3B;IAEL,eAAgBI,IAAY,IAAK;EAF5B,CAlBuC;;EAuB9Ca,KAAKA,CAAElB,KAAFkB,EAAOC,KAAPD,EAAmB;IAAA,IAAV;MAAEE;IAAF,IAAQD,KAAE;IACtB,MAAME,YAAY,GAAGjC,QAAQ,CAAC,MAAM;MAClC,OAAOY,KAAK,CAACT,KAANS,CAAYsB,GAAZtB,CAAgBuB,GAAG,KAAK,EAAE,GAAGhC,KAAK,CAACgC,GAAD,CAAV;QAAiBxB,IAAI,EAAEwB;MAAvB,CAAL,CAAnBvB,CAAP;IACD,CAF4B,CAA7B;IAIA,MAAMwB,MAAM,GAAGpC,QAAQ,CAAC,MAAM;MAC5B,MAAMiB,IAAI,GAAGgB,YAAY,CAACI,KAAbJ,CAAmBK,IAAnBL,CAAwBL,CAAC,IAAIA,CAAC,CAACjB,IAAFiB,KAAWhB,KAAK,CAACK,IAA9CgB,CAAb;MAEA,IAAI,CAAChB,IAAL,EAAW,OAAO,EAAP;MAEX,MAAMJ,KAAK,GAAGD,KAAK,CAACC,KAAND,GAAcK,IAAI,CAACsB,EAALtB,CAAQL,KAAK,CAACC,KAAdI,CAAdL,GAAqC,IAAnD;MAEA,OAAOK,IAAI,CAACmB,MAALnB,EAAaiB,GAAbjB,CAAiBuB,SAA2C;QAAA,IAA1C;UAAEC,QAAF;UAAYC,QAAZ;UAAsB,GAAGC;QAAzB,IAAqCH,KAAK;QACjE,OAAO,EACL,GAAGvB,IAAI,CAAC0B,UADH;UAEL,GAAGA,UAFE;UAGL5B,QAAQ,EAAEH,KAAK,CAACG,QAHX;UAILsB,KAAK,EAAExB,KAAK,IAAI4B,QAAQ,CAAC5B,KAAD,CAJnB;UAKL+B,QAAQ,EAAGC,CAAa,IAAK;YAC3B,MAAMC,MAAM,GAAGD,CAAC,CAACC,MAAjB;YAEA,IAAI,CAACA,MAAL,EAAa;YAEbd,IAAI,CAAC,cAAD,EAAiBf,IAAI,CAAC8B,IAAL9B,CAAUyB,QAAQ,CAAC7B,KAAK,IAAIT,SAAV,EAAqB0C,MAAM,CAACT,KAA5B,CAAlBpB,CAAjB,CAAJe;UACF;QAXK,CAAP;MAaD,CAdMf,CAAP;IAeD,CAtBsB,CAAvB;IAwBAf,SAAS,CAAC;MAAA,SAEA;IAFA,GAEqB,CAEzBkC,MAAM,CAACC,KAAPD,EAAcF,GAAdE,CAAkBxB,KAAK,oCACCA,KADD,EACM,IADN,CAAvBwB,CAFyB,EAKzBH,YAAY,CAACI,KAAbJ,CAAmBe,MAAnBf,GAA4B,CAA5BA,IAA6BxB;MAAA,QAEtB,SAFsB;MAEb,QACT,SAHsB;MAGb,WACN,OAJmB;MAIZ,WACLwC,MAAM;QACd,MAAMC,EAAE,GAAGjB,YAAY,CAACI,KAAbJ,CAAmBkB,SAAnBlB,CAA6BL,CAAC,IAAIA,CAAC,CAACjB,IAAFiB,KAAWhB,KAAK,CAACK,IAAnDgB,CAAX;QAEAD,IAAI,CAAC,aAAD,EAAgBC,YAAY,CAACI,KAAbJ,CAAmB,CAACiB,EAAE,GAAG,CAAN,IAAWjB,YAAY,CAACI,KAAbJ,CAAmBe,MAAjDf,EAAyDtB,IAAzE,CAAJqB;MACF;IAT2B,GAS1B,IAT0B,CALJ,CAFrB,CAAD,CAAT9B;IAsBA,OAAO,EAAP;EACF;;AA3E8C,CAAD,CAAxC","names":["VBtn","computed","defineComponent","useRender","modes","nullColor","VColorPickerInput","_ref","label","rest","_createVNode","VColorPickerEdit","name","props","color","Object","disabled","Boolean","mode","type","String","default","validator","v","keys","includes","Array","isArray","every","m","emits","setup","_ref2","emit","enabledModes","map","key","inputs","value","find","to","_ref3","getValue","getColor","inputProps","onChange","e","target","from","length","onClick","mi","findIndex"],"sources":["../../../src/components/VColorPicker/VColorPickerEdit.tsx"],"sourcesContent":["// Styles\nimport './VColorPickerEdit.sass'\n\n// Components\nimport { VBtn } from '@/components/VBtn'\n\n// Utilities\nimport { computed } from 'vue'\nimport { defineComponent, useRender } from '@/util'\nimport { modes, nullColor } from './util'\n\n// Types\nimport type { PropType } from 'vue'\nimport type { HSV } from '@/util/colorUtils'\n\nconst VColorPickerInput = ({ label, ...rest }: any) => {\n  return (\n    <div\n      class=\"v-color-picker-edit__input\"\n    >\n      <input { ...rest } />\n      <span>{ label }</span>\n    </div>\n  )\n}\n\nexport const VColorPickerEdit = defineComponent({\n  name: 'VColorPickerEdit',\n\n  props: {\n    color: Object as PropType<HSV | null>,\n    disabled: Boolean,\n    mode: {\n      type: String,\n      default: 'rgba',\n      validator: (v: string) => Object.keys(modes).includes(v),\n    },\n    modes: {\n      type: Array as PropType<string[]>,\n      default: () => Object.keys(modes),\n      validator: (v: any) => Array.isArray(v) && v.every(m => Object.keys(modes).includes(m)),\n    },\n  },\n\n  emits: {\n    'update:color': (color: HSV) => true,\n    'update:mode': (mode: string) => true,\n  },\n\n  setup (props, { emit }) {\n    const enabledModes = computed(() => {\n      return props.modes.map(key => ({ ...modes[key], name: key }))\n    })\n\n    const inputs = computed(() => {\n      const mode = enabledModes.value.find(m => m.name === props.mode)\n\n      if (!mode) return []\n\n      const color = props.color ? mode.to(props.color) : null\n\n      return mode.inputs?.map(({ getValue, getColor, ...inputProps }) => {\n        return {\n          ...mode.inputProps,\n          ...inputProps,\n          disabled: props.disabled,\n          value: color && getValue(color),\n          onChange: (e: InputEvent) => {\n            const target = e.target as HTMLInputElement | null\n\n            if (!target) return\n\n            emit('update:color', mode.from(getColor(color ?? nullColor, target.value)))\n          },\n        }\n      })\n    })\n\n    useRender(() => (\n      <div\n        class=\"v-color-picker-edit\"\n      >\n        { inputs.value?.map(props => (\n          <VColorPickerInput { ...props } />\n        ))}\n        { enabledModes.value.length > 1 && (\n          <VBtn\n            icon=\"$unfold\"\n            size=\"x-small\"\n            variant=\"plain\"\n            onClick={ () => {\n              const mi = enabledModes.value.findIndex(m => m.name === props.mode)\n\n              emit('update:mode', enabledModes.value[(mi + 1) % enabledModes.value.length].name)\n            }}\n          />\n        )}\n      </div>\n    ))\n\n    return {}\n  },\n})\n\nexport type VColorPickerEdit = InstanceType<typeof VColorPickerEdit>\n"]},"metadata":{},"sourceType":"module"}