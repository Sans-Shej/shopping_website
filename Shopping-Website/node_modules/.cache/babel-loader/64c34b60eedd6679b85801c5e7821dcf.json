{"ast":null,"code":"import { createTextVNode as _createTextVNode, mergeProps as _mergeProps, createVNode as _createVNode, Fragment as _Fragment } from \"vue\"; // Styles\n\nimport \"./VAutocomplete.css\"; // Components\n\nimport { makeSelectProps } from \"../VSelect/VSelect.mjs\";\nimport { VCheckboxBtn } from \"../VCheckbox/index.mjs\";\nimport { VChip } from \"../VChip/index.mjs\";\nimport { VDefaultsProvider } from \"../VDefaultsProvider/index.mjs\";\nimport { VList, VListItem } from \"../VList/index.mjs\";\nimport { VMenu } from \"../VMenu/index.mjs\";\nimport { VTextField } from \"../VTextField/index.mjs\"; // Composables\n\nimport { forwardRefs } from \"../../composables/forwardRefs.mjs\";\nimport { makeFilterProps, useFilter } from \"../../composables/filter.mjs\";\nimport { makeTransitionProps } from \"../../composables/transition.mjs\";\nimport { useForm } from \"../../composables/form.mjs\";\nimport { useItems } from \"../../composables/items.mjs\";\nimport { useLocale } from \"../../composables/locale.mjs\";\nimport { useProxiedModel } from \"../../composables/proxiedModel.mjs\";\nimport { useTextColor } from \"../../composables/color.mjs\"; // Utility\n\nimport { computed, mergeProps, nextTick, ref, watch } from 'vue';\nimport { genericComponent, omit, useRender, wrapInArray } from \"../../util/index.mjs\";\nimport { makeVTextFieldProps } from \"../VTextField/VTextField.mjs\"; // Types\n\nfunction highlightResult(text, matches, length) {\n  if (matches == null) return text;\n  if (Array.isArray(matches)) throw new Error('Multiple matches is not implemented');\n  return typeof matches === 'number' && ~matches ? _createVNode(_Fragment, null, [_createVNode(\"span\", {\n    \"class\": \"v-autocomplete__unmask\"\n  }, [text.substr(0, matches)]), _createVNode(\"span\", {\n    \"class\": \"v-autocomplete__mask\"\n  }, [text.substr(matches, length)]), _createVNode(\"span\", {\n    \"class\": \"v-autocomplete__unmask\"\n  }, [text.substr(matches + length)])]) : text;\n}\n\nexport const VAutocomplete = genericComponent()({\n  name: 'VAutocomplete',\n  props: {\n    // TODO: implement post keyboard support\n    // autoSelectFirst: Boolean,\n    search: String,\n    ...makeFilterProps({\n      filterKeys: ['title']\n    }),\n    ...makeSelectProps(),\n    ...omit(makeVTextFieldProps({\n      modelValue: null\n    }), ['validationValue', 'dirty', 'appendInnerIcon']),\n    ...makeTransitionProps({\n      transition: false\n    })\n  },\n  emits: {\n    'update:focused': focused => true,\n    'update:search': val => true,\n    'update:modelValue': val => true,\n    'update:menu': val => true\n  },\n\n  setup(props, _ref) {\n    let {\n      slots\n    } = _ref;\n    const {\n      t\n    } = useLocale();\n    const vTextFieldRef = ref();\n    const isFocused = ref(false);\n    const isPristine = ref(true);\n    const vMenuRef = ref();\n\n    const _menu = useProxiedModel(props, 'menu');\n\n    const menu = computed({\n      get: () => _menu.value,\n      set: v => {\n        if (_menu.value && !v && vMenuRef.value?.Î¨openChildren) return;\n        _menu.value = v;\n      }\n    });\n    const selectionIndex = ref(-1);\n    const color = computed(() => vTextFieldRef.value?.color);\n    const {\n      items,\n      transformIn,\n      transformOut\n    } = useItems(props);\n    const {\n      textColorClasses,\n      textColorStyles\n    } = useTextColor(color);\n    const search = useProxiedModel(props, 'search', '');\n    const model = useProxiedModel(props, 'modelValue', [], v => transformIn(wrapInArray(v)), v => {\n      const transformed = transformOut(v);\n      return props.multiple ? transformed : transformed[0] ?? null;\n    });\n    const form = useForm();\n    const {\n      filteredItems,\n      getMatches\n    } = useFilter(props, items, computed(() => isPristine.value ? undefined : search.value));\n    const selections = computed(() => {\n      return model.value.map(v => {\n        return items.value.find(item => props.valueComparator(item.value, v.value)) || v;\n      });\n    });\n    const displayItems = computed(() => {\n      if (props.hideSelected) {\n        return filteredItems.value.filter(filteredItem => !selections.value.some(s => s.value === filteredItem.value));\n      }\n\n      return filteredItems.value;\n    });\n    const selected = computed(() => selections.value.map(selection => selection.props.value));\n    const selection = computed(() => selections.value[selectionIndex.value]);\n    const listRef = ref();\n\n    function onClear(e) {\n      if (props.openOnClear) {\n        menu.value = true;\n      }\n\n      search.value = '';\n    }\n\n    function onMousedownControl() {\n      if (props.hideNoData && !items.value.length || props.readonly || form?.isReadonly.value) return;\n      menu.value = true;\n    }\n\n    function onKeydown(e) {\n      if (props.readonly || form?.isReadonly.value) return;\n      const selectionStart = vTextFieldRef.value.selectionStart;\n      const length = selected.value.length;\n\n      if (selectionIndex.value > -1 || ['Enter', 'ArrowDown', 'ArrowUp'].includes(e.key)) {\n        e.preventDefault();\n      }\n\n      if (['Enter', 'ArrowDown'].includes(e.key)) {\n        menu.value = true;\n      }\n\n      if (['Escape'].includes(e.key)) {\n        menu.value = false;\n      }\n\n      if (['Enter', 'Escape', 'Tab'].includes(e.key)) {\n        isPristine.value = true;\n      }\n\n      if (e.key === 'ArrowDown') {\n        listRef.value?.focus('next');\n      } else if (e.key === 'ArrowUp') {\n        listRef.value?.focus('prev');\n      }\n\n      if (!props.multiple) return;\n\n      if (['Backspace', 'Delete'].includes(e.key)) {\n        if (selectionIndex.value < 0) {\n          if (e.key === 'Backspace' && !search.value) {\n            selectionIndex.value = length - 1;\n          }\n\n          return;\n        }\n\n        const originalSelectionIndex = selectionIndex.value;\n        if (selection.value) select(selection.value);\n        selectionIndex.value = originalSelectionIndex >= length - 1 ? length - 2 : originalSelectionIndex;\n      }\n\n      if (e.key === 'ArrowLeft') {\n        if (selectionIndex.value < 0 && selectionStart > 0) return;\n        const prev = selectionIndex.value > -1 ? selectionIndex.value - 1 : length - 1;\n\n        if (selections.value[prev]) {\n          selectionIndex.value = prev;\n        } else {\n          selectionIndex.value = -1;\n          vTextFieldRef.value.setSelectionRange(search.value?.length, search.value?.length);\n        }\n      }\n\n      if (e.key === 'ArrowRight') {\n        if (selectionIndex.value < 0) return;\n        const next = selectionIndex.value + 1;\n\n        if (selections.value[next]) {\n          selectionIndex.value = next;\n        } else {\n          selectionIndex.value = -1;\n          vTextFieldRef.value.setSelectionRange(0, 0);\n        }\n      }\n    }\n\n    function onInput(e) {\n      search.value = e.target.value;\n    }\n\n    function onAfterLeave() {\n      if (isFocused.value) isPristine.value = true;\n    }\n\n    function onFocusin(e) {\n      isFocused.value = true;\n    }\n\n    function onFocusout(e) {\n      if (e.relatedTarget == null) {\n        vTextFieldRef.value?.focus();\n      }\n    }\n\n    const isSelecting = ref(false);\n\n    function select(item) {\n      if (props.multiple) {\n        const index = selected.value.findIndex(selection => props.valueComparator(selection, item.value));\n\n        if (index === -1) {\n          model.value = [...model.value, item];\n        } else {\n          const value = [...model.value];\n          value.splice(index, 1);\n          model.value = value;\n        }\n      } else {\n        model.value = [item];\n        isSelecting.value = true;\n\n        if (!slots.selection) {\n          search.value = item.title;\n        }\n\n        menu.value = false;\n        isPristine.value = true;\n        nextTick(() => isSelecting.value = false);\n      }\n    }\n\n    watch(isFocused, val => {\n      if (val) {\n        isSelecting.value = true;\n        search.value = props.multiple || !!slots.selection ? '' : String(selections.value.at(-1)?.props.title ?? '');\n        isPristine.value = true;\n        nextTick(() => isSelecting.value = false);\n      } else {\n        menu.value = false;\n        search.value = '';\n      }\n    });\n    watch(search, val => {\n      if (!isFocused.value || isSelecting.value) return;\n      if (val) menu.value = true;\n      isPristine.value = !val;\n    });\n    useRender(() => {\n      const hasChips = !!(props.chips || slots.chip);\n      const hasList = !!(!props.hideNoData || displayItems.value.length || slots.prepend || slots.append || slots['no-data']);\n      const isDirty = model.value.length > 0;\n      const [textFieldProps] = VTextField.filterProps(props);\n      return _createVNode(VTextField, _mergeProps({\n        \"ref\": vTextFieldRef\n      }, textFieldProps, {\n        \"modelValue\": search.value,\n        \"onUpdate:modelValue\": v => {\n          if (v == null) model.value = [];\n        },\n        \"focused\": isFocused.value,\n        \"onUpdate:focused\": $event => isFocused.value = $event,\n        \"validationValue\": model.externalValue,\n        \"dirty\": isDirty,\n        \"onInput\": onInput,\n        \"class\": ['v-autocomplete', {\n          'v-autocomplete--active-menu': menu.value,\n          'v-autocomplete--chips': !!props.chips,\n          'v-autocomplete--selecting-index': selectionIndex.value > -1,\n          [`v-autocomplete--${props.multiple ? 'multiple' : 'single'}`]: true,\n          'v-autocomplete--selection-slot': !!slots.selection\n        }],\n        \"appendInnerIcon\": props.menuIcon,\n        \"readonly\": props.readonly,\n        \"placeholder\": isDirty ? undefined : props.placeholder,\n        \"onClick:clear\": onClear,\n        \"onMousedown:control\": onMousedownControl,\n        \"onKeydown\": onKeydown\n      }), { ...slots,\n        default: () => _createVNode(_Fragment, null, [_createVNode(VMenu, _mergeProps({\n          \"ref\": vMenuRef,\n          \"modelValue\": menu.value,\n          \"onUpdate:modelValue\": $event => menu.value = $event,\n          \"activator\": \"parent\",\n          \"contentClass\": \"v-autocomplete__content\",\n          \"eager\": props.eager,\n          \"maxHeight\": 310,\n          \"openOnClick\": false,\n          \"closeOnContentClick\": false,\n          \"transition\": props.transition,\n          \"onAfterLeave\": onAfterLeave\n        }, props.menuProps), {\n          default: () => [hasList && _createVNode(VList, {\n            \"ref\": listRef,\n            \"selected\": selected.value,\n            \"selectStrategy\": props.multiple ? 'independent' : 'single-independent',\n            \"onMousedown\": e => e.preventDefault(),\n            \"onFocusin\": onFocusin,\n            \"onFocusout\": onFocusout\n          }, {\n            default: () => [!displayItems.value.length && !props.hideNoData && (slots['no-data']?.() ?? _createVNode(VListItem, {\n              \"title\": t(props.noDataText)\n            }, null)), slots['prepend-item']?.(), displayItems.value.map(item => slots.item?.({\n              item,\n              props: mergeProps(item.props, {\n                onClick: () => select(item)\n              })\n            }) ?? _createVNode(VListItem, _mergeProps({\n              \"key\": item.value\n            }, item.props, {\n              \"onClick\": () => select(item)\n            }), {\n              prepend: _ref2 => {\n                let {\n                  isSelected\n                } = _ref2;\n                return props.multiple && !props.hideSelected ? _createVNode(VCheckboxBtn, {\n                  \"modelValue\": isSelected,\n                  \"ripple\": false,\n                  \"tabindex\": \"-1\"\n                }, null) : undefined;\n              },\n              title: () => {\n                return isPristine.value ? item.title : highlightResult(item.title, getMatches(item)?.title, search.value?.length ?? 0);\n              }\n            })), slots['append-item']?.()]\n          })]\n        }), selections.value.map((item, index) => {\n          function onChipClose(e) {\n            e.stopPropagation();\n            e.preventDefault();\n            select(item);\n          }\n\n          const slotProps = {\n            'onClick:close': onChipClose,\n            modelValue: true,\n            'onUpdate:modelValue': undefined\n          };\n          return _createVNode(\"div\", {\n            \"key\": item.value,\n            \"class\": ['v-autocomplete__selection', index === selectionIndex.value && ['v-autocomplete__selection--selected', textColorClasses.value]],\n            \"style\": index === selectionIndex.value ? textColorStyles.value : {}\n          }, [hasChips ? !slots.chip ? _createVNode(VChip, _mergeProps({\n            \"key\": \"chip\",\n            \"closable\": props.closableChips,\n            \"size\": \"small\",\n            \"text\": item.title\n          }, slotProps), null) : _createVNode(VDefaultsProvider, {\n            \"key\": \"chip-defaults\",\n            \"defaults\": {\n              VChip: {\n                closable: props.closableChips,\n                size: 'small',\n                text: item.title\n              }\n            }\n          }, {\n            default: () => [slots.chip?.({\n              item,\n              index,\n              props: slotProps\n            })]\n          }) : slots.selection?.({\n            item,\n            index\n          }) ?? _createVNode(\"span\", {\n            \"class\": \"v-autocomplete__selection-text\"\n          }, [item.title, props.multiple && index < selections.value.length - 1 && _createVNode(\"span\", {\n            \"class\": \"v-autocomplete__selection-comma\"\n          }, [_createTextVNode(\",\")])])]);\n        })])\n      });\n    });\n    return forwardRefs({\n      isFocused,\n      isPristine,\n      menu,\n      search,\n      filteredItems,\n      select\n    }, vTextFieldRef);\n  }\n\n});","map":{"version":3,"mappings":"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","names":["makeSelectProps","VCheckboxBtn","VChip","VDefaultsProvider","VList","VListItem","VMenu","VTextField","forwardRefs","makeFilterProps","useFilter","makeTransitionProps","useForm","useItems","useLocale","useProxiedModel","useTextColor","computed","mergeProps","nextTick","ref","watch","genericComponent","omit","useRender","wrapInArray","makeVTextFieldProps","highlightResult","text","matches","length","Array","isArray","Error","_createVNode","substr","VAutocomplete","name","props","search","String","filterKeys","modelValue","transition","emits","focused","val","setup","_ref","slots","t","vTextFieldRef","isFocused","isPristine","vMenuRef","_menu","menu","get","value","set","v","Î¨openChildren","selectionIndex","color","items","transformIn","transformOut","textColorClasses","textColorStyles","model","transformed","multiple","form","filteredItems","getMatches","undefined","selections","map","find","item","valueComparator","displayItems","hideSelected","filter","filteredItem","some","s","selected","selection","listRef","onClear","e","openOnClear","onMousedownControl","hideNoData","readonly","isReadonly","onKeydown","selectionStart","includes","key","preventDefault","focus","originalSelectionIndex","select","prev","setSelectionRange","next","onInput","target","onAfterLeave","onFocusin","onFocusout","relatedTarget","isSelecting","index","findIndex","splice","title","at","hasChips","chips","chip","hasList","prepend","append","isDirty","textFieldProps","filterProps","$event","externalValue","menuIcon","placeholder","default","eager","menuProps","noDataText","onClick","_ref2","isSelected","onChipClose","stopPropagation","slotProps","closableChips","closable","size"],"sources":["../../../src/components/VAutocomplete/VAutocomplete.tsx"],"sourcesContent":["// Styles\nimport './VAutocomplete.sass'\n\n// Components\nimport { makeSelectProps } from '@/components/VSelect/VSelect'\nimport { VCheckboxBtn } from '@/components/VCheckbox'\nimport { VChip } from '@/components/VChip'\nimport { VDefaultsProvider } from '@/components/VDefaultsProvider'\nimport { VList, VListItem } from '@/components/VList'\nimport { VMenu } from '@/components/VMenu'\nimport { VTextField } from '@/components/VTextField'\n\n// Composables\nimport { forwardRefs } from '@/composables/forwardRefs'\nimport { makeFilterProps, useFilter } from '@/composables/filter'\nimport { makeTransitionProps } from '@/composables/transition'\nimport { useForm } from '@/composables/form'\nimport { useItems } from '@/composables/items'\nimport { useLocale } from '@/composables/locale'\nimport { useProxiedModel } from '@/composables/proxiedModel'\nimport { useTextColor } from '@/composables/color'\n\n// Utility\nimport { computed, mergeProps, nextTick, ref, watch } from 'vue'\nimport { genericComponent, omit, useRender, wrapInArray } from '@/util'\nimport { makeVTextFieldProps } from '@/components/VTextField/VTextField'\n\n// Types\nimport type { FilterMatch } from '@/composables/filter'\nimport type { InternalItem } from '@/composables/items'\nimport type { MakeSlots, SlotsToProps } from '@/util'\nimport type { VFieldSlots } from '@/components/VField/VField'\nimport type { VInputSlots } from '@/components/VInput/VInput'\n\nfunction highlightResult (text: string, matches: FilterMatch | undefined, length: number) {\n  if (matches == null) return text\n\n  if (Array.isArray(matches)) throw new Error('Multiple matches is not implemented')\n\n  return typeof matches === 'number' && ~matches\n    ? (\n      <>\n        <span class=\"v-autocomplete__unmask\">{ text.substr(0, matches) }</span>\n        <span class=\"v-autocomplete__mask\">{ text.substr(matches, length) }</span>\n        <span class=\"v-autocomplete__unmask\">{ text.substr(matches + length) }</span>\n      </>\n    )\n    : text\n}\n\ntype Primitive = string | number | boolean | symbol\n\ntype Val <T, ReturnObject extends boolean> = T extends Primitive\n  ? T\n  : (ReturnObject extends true ? T : any)\n\ntype Value <T, ReturnObject extends boolean, Multiple extends boolean> =\n  Multiple extends true\n    ? readonly Val<T, ReturnObject>[]\n    : Val<T, ReturnObject>\n\nexport const VAutocomplete = genericComponent<new <\n  T,\n  ReturnObject extends boolean = false,\n  Multiple extends boolean = false,\n  V extends Value<T, ReturnObject, Multiple> = Value<T, ReturnObject, Multiple>\n>() => {\n  $props: {\n    items?: readonly T[]\n    returnObject?: ReturnObject\n    multiple?: Multiple\n    modelValue?: V\n    'onUpdate:modelValue'?: (val: V) => void\n  } & SlotsToProps<\n    Omit<VInputSlots & VFieldSlots, 'default'> & MakeSlots<{\n      item: [{ item: InternalItem<T>, index: number, props: Record<string, unknown> }]\n      chip: [{ item: InternalItem<T>, index: number, props: Record<string, unknown> }]\n      selection: [{ item: InternalItem<T>, index: number }]\n      'prepend-item': []\n      'append-item': []\n      'no-data': []\n    }>\n  >\n}>()({\n  name: 'VAutocomplete',\n\n  props: {\n    // TODO: implement post keyboard support\n    // autoSelectFirst: Boolean,\n    search: String,\n\n    ...makeFilterProps({ filterKeys: ['title'] }),\n    ...makeSelectProps(),\n    ...omit(makeVTextFieldProps({\n      modelValue: null,\n    }), ['validationValue', 'dirty', 'appendInnerIcon']),\n    ...makeTransitionProps({ transition: false }),\n  },\n\n  emits: {\n    'update:focused': (focused: boolean) => true,\n    'update:search': (val: any) => true,\n    'update:modelValue': (val: any) => true,\n    'update:menu': (val: boolean) => true,\n  },\n\n  setup (props, { slots }) {\n    const { t } = useLocale()\n    const vTextFieldRef = ref()\n    const isFocused = ref(false)\n    const isPristine = ref(true)\n    const vMenuRef = ref<VMenu>()\n    const _menu = useProxiedModel(props, 'menu')\n    const menu = computed({\n      get: () => _menu.value,\n      set: v => {\n        if (_menu.value && !v && vMenuRef.value?.Î¨openChildren) return\n        _menu.value = v\n      },\n    })\n    const selectionIndex = ref(-1)\n    const color = computed(() => vTextFieldRef.value?.color)\n    const { items, transformIn, transformOut } = useItems(props)\n    const { textColorClasses, textColorStyles } = useTextColor(color)\n    const search = useProxiedModel(props, 'search', '')\n    const model = useProxiedModel(\n      props,\n      'modelValue',\n      [],\n      v => transformIn(wrapInArray(v)),\n      v => {\n        const transformed = transformOut(v)\n        return props.multiple ? transformed : (transformed[0] ?? null)\n      }\n    )\n    const form = useForm()\n    const { filteredItems, getMatches } = useFilter(props, items, computed(() => isPristine.value ? undefined : search.value))\n    const selections = computed(() => {\n      return model.value.map(v => {\n        return items.value.find(item => props.valueComparator(item.value, v.value)) || v\n      })\n    })\n\n    const displayItems = computed(() => {\n      if (props.hideSelected) {\n        return filteredItems.value.filter(filteredItem => !selections.value.some(s => s.value === filteredItem.value))\n      }\n      return filteredItems.value\n    })\n\n    const selected = computed(() => selections.value.map(selection => selection.props.value))\n    const selection = computed(() => selections.value[selectionIndex.value])\n    const listRef = ref<VList>()\n\n    function onClear (e: MouseEvent) {\n      if (props.openOnClear) {\n        menu.value = true\n      }\n\n      search.value = ''\n    }\n    function onMousedownControl () {\n      if (\n        (props.hideNoData && !items.value.length) ||\n        props.readonly || form?.isReadonly.value\n      ) return\n\n      menu.value = true\n    }\n    function onKeydown (e: KeyboardEvent) {\n      if (props.readonly || form?.isReadonly.value) return\n\n      const selectionStart = vTextFieldRef.value.selectionStart\n      const length = selected.value.length\n\n      if (\n        selectionIndex.value > -1 ||\n        ['Enter', 'ArrowDown', 'ArrowUp'].includes(e.key)\n      ) {\n        e.preventDefault()\n      }\n\n      if (['Enter', 'ArrowDown'].includes(e.key)) {\n        menu.value = true\n      }\n\n      if (['Escape'].includes(e.key)) {\n        menu.value = false\n      }\n\n      if (['Enter', 'Escape', 'Tab'].includes(e.key)) {\n        isPristine.value = true\n      }\n\n      if (e.key === 'ArrowDown') {\n        listRef.value?.focus('next')\n      } else if (e.key === 'ArrowUp') {\n        listRef.value?.focus('prev')\n      }\n\n      if (!props.multiple) return\n\n      if (['Backspace', 'Delete'].includes(e.key)) {\n        if (selectionIndex.value < 0) {\n          if (e.key === 'Backspace' && !search.value) {\n            selectionIndex.value = length - 1\n          }\n\n          return\n        }\n\n        const originalSelectionIndex = selectionIndex.value\n\n        if (selection.value) select(selection.value)\n\n        selectionIndex.value = originalSelectionIndex >= length - 1 ? (length - 2) : originalSelectionIndex\n      }\n\n      if (e.key === 'ArrowLeft') {\n        if (selectionIndex.value < 0 && selectionStart > 0) return\n\n        const prev = selectionIndex.value > -1\n          ? selectionIndex.value - 1\n          : length - 1\n\n        if (selections.value[prev]) {\n          selectionIndex.value = prev\n        } else {\n          selectionIndex.value = -1\n          vTextFieldRef.value.setSelectionRange(search.value?.length, search.value?.length)\n        }\n      }\n\n      if (e.key === 'ArrowRight') {\n        if (selectionIndex.value < 0) return\n\n        const next = selectionIndex.value + 1\n\n        if (selections.value[next]) {\n          selectionIndex.value = next\n        } else {\n          selectionIndex.value = -1\n          vTextFieldRef.value.setSelectionRange(0, 0)\n        }\n      }\n    }\n\n    function onInput (e: InputEvent) {\n      search.value = (e.target as HTMLInputElement).value\n    }\n\n    function onAfterLeave () {\n      if (isFocused.value) isPristine.value = true\n    }\n\n    function onFocusin (e: FocusEvent) {\n      isFocused.value = true\n    }\n\n    function onFocusout (e: FocusEvent) {\n      if (e.relatedTarget == null) {\n        vTextFieldRef.value?.focus()\n      }\n    }\n\n    const isSelecting = ref(false)\n\n    function select (item: InternalItem) {\n      if (props.multiple) {\n        const index = selected.value.findIndex(selection => props.valueComparator(selection, item.value))\n\n        if (index === -1) {\n          model.value = [...model.value, item]\n        } else {\n          const value = [...model.value]\n          value.splice(index, 1)\n          model.value = value\n        }\n      } else {\n        model.value = [item]\n\n        isSelecting.value = true\n\n        if (!slots.selection) {\n          search.value = item.title\n        }\n\n        menu.value = false\n        isPristine.value = true\n\n        nextTick(() => (isSelecting.value = false))\n      }\n    }\n\n    watch(isFocused, val => {\n      if (val) {\n        isSelecting.value = true\n        search.value = props.multiple || !!slots.selection ? '' : String(selections.value.at(-1)?.props.title ?? '')\n        isPristine.value = true\n\n        nextTick(() => isSelecting.value = false)\n      } else {\n        menu.value = false\n        search.value = ''\n      }\n    })\n\n    watch(search, val => {\n      if (!isFocused.value || isSelecting.value) return\n\n      if (val) menu.value = true\n\n      isPristine.value = !val\n    })\n\n    useRender(() => {\n      const hasChips = !!(props.chips || slots.chip)\n      const hasList = !!((!props.hideNoData || displayItems.value.length) || slots.prepend || slots.append || slots['no-data'])\n      const isDirty = model.value.length > 0\n      const [textFieldProps] = VTextField.filterProps(props)\n\n      return (\n        <VTextField\n          ref={ vTextFieldRef }\n          { ...textFieldProps }\n          modelValue={ search.value }\n          onUpdate:modelValue={ v => { if (v == null) model.value = [] } }\n          v-model:focused={ isFocused.value }\n          validationValue={ model.externalValue }\n          dirty={ isDirty }\n          onInput={ onInput }\n          class={[\n            'v-autocomplete',\n            {\n              'v-autocomplete--active-menu': menu.value,\n              'v-autocomplete--chips': !!props.chips,\n              'v-autocomplete--selecting-index': selectionIndex.value > -1,\n              [`v-autocomplete--${props.multiple ? 'multiple' : 'single'}`]: true,\n              'v-autocomplete--selection-slot': !!slots.selection,\n            },\n          ]}\n          appendInnerIcon={ props.menuIcon }\n          readonly={ props.readonly }\n          placeholder={ isDirty ? undefined : props.placeholder }\n          onClick:clear={ onClear }\n          onMousedown:control={ onMousedownControl }\n          onKeydown={ onKeydown }\n        >\n          {{\n            ...slots,\n            default: () => (\n              <>\n                <VMenu\n                  ref={ vMenuRef }\n                  v-model={ menu.value }\n                  activator=\"parent\"\n                  contentClass=\"v-autocomplete__content\"\n                  eager={ props.eager }\n                  maxHeight={ 310 }\n                  openOnClick={ false }\n                  closeOnContentClick={ false }\n                  transition={ props.transition }\n                  onAfterLeave={ onAfterLeave }\n                  { ...props.menuProps }\n                >\n                  { hasList && (\n                    <VList\n                      ref={ listRef }\n                      selected={ selected.value }\n                      selectStrategy={ props.multiple ? 'independent' : 'single-independent' }\n                      onMousedown={ (e: MouseEvent) => e.preventDefault() }\n                      onFocusin={ onFocusin }\n                      onFocusout={ onFocusout }\n                    >\n                      { !displayItems.value.length && !props.hideNoData && (slots['no-data']?.() ?? (\n                        <VListItem title={ t(props.noDataText) } />\n                      ))}\n\n                      { slots['prepend-item']?.() }\n\n                      { displayItems.value.map(item => slots.item?.({\n                        item,\n                        props: mergeProps(item.props, { onClick: () => select(item) }),\n                      }) ?? (\n                        <VListItem\n                          key={ item.value }\n                          { ...item.props }\n                          onClick={ () => select(item) }\n                        >\n                          {{\n                            prepend: ({ isSelected }) => props.multiple && !props.hideSelected ? (\n                              <VCheckboxBtn\n                                modelValue={ isSelected }\n                                ripple={ false }\n                                tabindex=\"-1\"\n                              />\n                            ) : undefined,\n                            title: () => {\n                              return isPristine.value\n                                ? item.title\n                                : highlightResult(item.title, getMatches(item)?.title, search.value?.length ?? 0)\n                            },\n                          }}\n                        </VListItem>\n                      ))}\n\n                      { slots['append-item']?.() }\n                    </VList>\n                  )}\n                </VMenu>\n\n                { selections.value.map((item, index) => {\n                  function onChipClose (e: Event) {\n                    e.stopPropagation()\n                    e.preventDefault()\n\n                    select(item)\n                  }\n\n                  const slotProps = {\n                    'onClick:close': onChipClose,\n                    modelValue: true,\n                    'onUpdate:modelValue': undefined,\n                  }\n\n                  return (\n                    <div\n                      key={ item.value }\n                      class={[\n                        'v-autocomplete__selection',\n                        index === selectionIndex.value && [\n                          'v-autocomplete__selection--selected',\n                          textColorClasses.value,\n                        ],\n                      ]}\n                      style={ index === selectionIndex.value ? textColorStyles.value : {} }\n                    >\n                      { hasChips ? (\n                        !slots.chip ? (\n                          <VChip\n                            key=\"chip\"\n                            closable={ props.closableChips }\n                            size=\"small\"\n                            text={ item.title }\n                            { ...slotProps }\n                          />\n                        ) : (\n                          <VDefaultsProvider\n                            key=\"chip-defaults\"\n                            defaults={{\n                              VChip: {\n                                closable: props.closableChips,\n                                size: 'small',\n                                text: item.title,\n                              },\n                            }}\n                          >\n                            { slots.chip?.({ item, index, props: slotProps }) }\n                          </VDefaultsProvider>\n                        )\n                      ) : (\n                        slots.selection?.({ item, index }) ?? (\n                          <span class=\"v-autocomplete__selection-text\">\n                            { item.title }\n                            { props.multiple && (index < selections.value.length - 1) && (\n                              <span class=\"v-autocomplete__selection-comma\">,</span>\n                            )}\n                          </span>\n                        )\n                      )}\n                    </div>\n                  )\n                })}\n              </>\n            ),\n          }}\n        </VTextField>\n      )\n    })\n\n    return forwardRefs({\n      isFocused,\n      isPristine,\n      menu,\n      search,\n      filteredItems,\n      select,\n    }, vTextFieldRef)\n  },\n})\n\nexport type VAutocomplete = InstanceType<typeof VAutocomplete>\n"]},"metadata":{},"sourceType":"module"}