{"ast":null,"code":"import { createVNode as _createVNode } from \"vue\"; // Composables\n\nimport { createForm, makeFormProps } from \"../../composables/form.mjs\";\nimport { forwardRefs } from \"../../composables/forwardRefs.mjs\"; // Utilities\n\nimport { ref } from 'vue';\nimport { genericComponent, useRender } from \"../../util/index.mjs\"; // Types\n\nexport const VForm = genericComponent()({\n  name: 'VForm',\n  props: { ...makeFormProps()\n  },\n  emits: {\n    'update:modelValue': val => true,\n    submit: e => true\n  },\n\n  setup(props, _ref) {\n    let {\n      slots,\n      emit\n    } = _ref;\n    const form = createForm(props);\n    const formRef = ref();\n\n    function onReset(e) {\n      e.preventDefault();\n      form.reset();\n    }\n\n    function onSubmit(_e) {\n      const e = _e;\n      const ready = form.validate();\n      e.then = ready.then.bind(ready);\n      e.catch = ready.catch.bind(ready);\n      e.finally = ready.finally.bind(ready);\n      emit('submit', e);\n\n      if (!e.defaultPrevented) {\n        ready.then(_ref2 => {\n          let {\n            valid\n          } = _ref2;\n\n          if (valid) {\n            formRef.value?.submit();\n          }\n        });\n      }\n\n      e.preventDefault();\n    }\n\n    useRender(() => _createVNode(\"form\", {\n      \"ref\": formRef,\n      \"class\": \"v-form\",\n      \"novalidate\": true,\n      \"onReset\": onReset,\n      \"onSubmit\": onSubmit\n    }, [slots.default?.(form)]));\n    return forwardRefs(form, formRef);\n  }\n\n});","map":{"version":3,"mappings":"mDAAA;;AAAA,SACSA,UADT,EACqBC,aADrB,QACkC,4BADlC;AACkC,SACzBC,WADyB,QACd,mCADc,C,CAGlC;;AACA,SAASC,GAAT,QAAoB,KAApB;AAAyB,SAChBC,gBADgB,EACEC,SADF,QACW,sBADX,C,CAGzB;;AAGA,OAAO,MAAMC,KAAK,GAAGF,gBAAgB,GAAG;EACtCG,IAAI,EAAE,OADgC;EAGtCC,KAAK,EAAE,EACL,GAAGP,aAAa;EADX,CAH+B;EAOtCQ,KAAK,EAAE;IACL,qBAAsBC,GAAmB,IAAK,IADzC;IAELC,MAAM,EAAGC,CAAqB,IAAK;EAF9B,CAP+B;;EAYtCC,KAAKA,CAAEL,KAAFK,EAAOC,IAAPD,EAA0B;IAAA,IAAjB;MAAEE,KAAF;MAASC;IAAT,IAAeF,IAAE;IAC7B,MAAMG,IAAI,GAAGjB,UAAU,CAACQ,KAAD,CAAvB;IACA,MAAMU,OAAO,GAAGf,GAAG,EAAnB;;IAEA,SAASgB,OAAT,CAAkBP,CAAlB,EAA4B;MAC1BA,CAAC,CAACQ,cAAFR;MACAK,IAAI,CAACI,KAALJ;IACF;;IAEA,SAASK,QAAT,CAAmBC,EAAnB,EAA8B;MAC5B,MAAMX,CAAC,GAAGW,EAAV;MAEA,MAAMC,KAAK,GAAGP,IAAI,CAACQ,QAALR,EAAd;MACAL,CAAC,CAACc,IAAFd,GAASY,KAAK,CAACE,IAANF,CAAWG,IAAXH,CAAgBA,KAAhBA,CAATZ;MACAA,CAAC,CAACgB,KAAFhB,GAAUY,KAAK,CAACI,KAANJ,CAAYG,IAAZH,CAAiBA,KAAjBA,CAAVZ;MACAA,CAAC,CAACiB,OAAFjB,GAAYY,KAAK,CAACK,OAANL,CAAcG,IAAdH,CAAmBA,KAAnBA,CAAZZ;MAEAI,IAAI,CAAC,QAAD,EAAWJ,CAAX,CAAJI;;MAEA,IAAI,CAACJ,CAAC,CAACkB,gBAAP,EAAyB;QACvBN,KAAK,CAACE,IAANF,CAAWO,SAAe;UAAA,IAAd;YAAEC;UAAF,IAASD,KAAK;;UACxB,IAAIC,KAAJ,EAAW;YACTd,OAAO,CAACe,KAARf,EAAeP,MAAfO;UACF;QACD,CAJDM;MAKF;;MAEAZ,CAAC,CAACQ,cAAFR;IACF;;IAEAP,SAAS,CAAC;MAAA,OAEAa,OAFA;MAEO,SACP,QAHA;MAGQ,kBAHR;MAGQ,WAEJC,OALJ;MAKW,YACNG;IANL,GAMa,CAEjBP,KAAK,CAACmB,OAANnB,GAAgBE,IAAhBF,CAFiB,CANb,CAAD,CAATV;IAYA,OAAOH,WAAW,CAACe,IAAD,EAAOC,OAAP,CAAlB;EACF;;AAvDsC,CAAH,CAA9B","names":["createForm","makeFormProps","forwardRefs","ref","genericComponent","useRender","VForm","name","props","emits","val","submit","e","setup","_ref","slots","emit","form","formRef","onReset","preventDefault","reset","onSubmit","_e","ready","validate","then","bind","catch","finally","defaultPrevented","_ref2","valid","value","default"],"sources":["../../../src/components/VForm/VForm.tsx"],"sourcesContent":["// Composables\nimport { createForm, makeFormProps } from '@/composables/form'\nimport { forwardRefs } from '@/composables/forwardRefs'\n\n// Utilities\nimport { ref } from 'vue'\nimport { genericComponent, useRender } from '@/util'\n\n// Types\nimport type { SubmitEventPromise } from '@/composables/form'\n\nexport const VForm = genericComponent()({\n  name: 'VForm',\n\n  props: {\n    ...makeFormProps(),\n  },\n\n  emits: {\n    'update:modelValue': (val: boolean | null) => true,\n    submit: (e: SubmitEventPromise) => true,\n  },\n\n  setup (props, { slots, emit }) {\n    const form = createForm(props)\n    const formRef = ref<HTMLFormElement>()\n\n    function onReset (e: Event) {\n      e.preventDefault()\n      form.reset()\n    }\n\n    function onSubmit (_e: Event) {\n      const e = _e as SubmitEventPromise\n\n      const ready = form.validate()\n      e.then = ready.then.bind(ready)\n      e.catch = ready.catch.bind(ready)\n      e.finally = ready.finally.bind(ready)\n\n      emit('submit', e)\n\n      if (!e.defaultPrevented) {\n        ready.then(({ valid }) => {\n          if (valid) {\n            formRef.value?.submit()\n          }\n        })\n      }\n\n      e.preventDefault()\n    }\n\n    useRender(() => ((\n      <form\n        ref={ formRef }\n        class=\"v-form\"\n        novalidate\n        onReset={ onReset }\n        onSubmit={ onSubmit }\n      >\n        { slots.default?.(form) }\n      </form>\n    )))\n\n    return forwardRefs(form, formRef)\n  },\n})\n\nexport type VForm = InstanceType<typeof VForm>\n"]},"metadata":{},"sourceType":"module"}