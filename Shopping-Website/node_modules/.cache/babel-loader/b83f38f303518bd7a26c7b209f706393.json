{"ast":null,"code":"import { createVNode as _createVNode } from \"vue\"; // Styles\n\nimport \"./VChipGroup.css\"; // Composables\n\nimport { makeGroupProps, useGroup } from \"../../composables/group.mjs\";\nimport { makeTagProps } from \"../../composables/tag.mjs\";\nimport { makeThemeProps, provideTheme } from \"../../composables/theme.mjs\";\nimport { makeVariantProps } from \"../../composables/variant.mjs\";\nimport { provideDefaults } from \"../../composables/defaults.mjs\"; // Utilities\n\nimport { deepEqual, genericComponent, useRender } from \"../../util/index.mjs\";\nimport { toRef } from 'vue'; // Types\n\nexport const VChipGroupSymbol = Symbol.for('vuetify:v-chip-group');\nexport const VChipGroup = genericComponent()({\n  name: 'VChipGroup',\n  props: {\n    column: Boolean,\n    filter: Boolean,\n    valueComparator: {\n      type: Function,\n      default: deepEqual\n    },\n    ...makeGroupProps({\n      selectedClass: 'v-chip--selected'\n    }),\n    ...makeTagProps(),\n    ...makeThemeProps(),\n    ...makeVariantProps({\n      variant: 'tonal'\n    })\n  },\n  emits: {\n    'update:modelValue': value => true\n  },\n\n  setup(props, _ref) {\n    let {\n      slots\n    } = _ref;\n    const {\n      themeClasses\n    } = provideTheme(props);\n    const {\n      isSelected,\n      select,\n      next,\n      prev,\n      selected\n    } = useGroup(props, VChipGroupSymbol);\n    provideDefaults({\n      VChip: {\n        color: toRef(props, 'color'),\n        disabled: toRef(props, 'disabled'),\n        filter: toRef(props, 'filter'),\n        variant: toRef(props, 'variant')\n      }\n    });\n    useRender(() => _createVNode(props.tag, {\n      \"class\": ['v-chip-group', {\n        'v-chip-group--column': props.column\n      }, themeClasses.value]\n    }, {\n      default: () => [slots.default?.({\n        isSelected,\n        select,\n        next,\n        prev,\n        selected: selected.value\n      })]\n    }));\n    return {};\n  }\n\n});","map":{"version":3,"mappings":"mDAAA;;AACA,0B,CAEA;;AAAA,SACSA,cADT,EACyBC,QADzB,QACiC,6BADjC;AACiC,SACxBC,YADwB,QACZ,2BADY;AACZ,SACZC,cADY,EACIC,YADJ,QACgB,6BADhB;AACgB,SAC5BC,gBAD4B,QACZ,+BADY;AACZ,SAChBC,eADgB,QACD,gCADC,C,CAGzB;;AAAA,SACSC,SADT,EACoBC,gBADpB,EACsCC,SADtC,QAC+C,sBAD/C;AAEA,SAASC,KAAT,QAAsB,KAAtB,C,CAEA;;AAGA,OAAO,MAAMC,gBAAgB,GAAGC,MAAM,CAACC,GAAPD,CAAW,sBAAXA,CAAzB;AAEP,OAAO,MAAME,UAAU,GAAGN,gBAAgB,GAAG;EAC3CO,IAAI,EAAE,YADqC;EAG3CC,KAAK,EAAE;IACLC,MAAM,EAAEC,OADH;IAELC,MAAM,EAAED,OAFH;IAGLE,eAAe,EAAE;MACfC,IAAI,EAAEC,QADS;MAEfC,OAAO,EAAEhB;IAFM,CAHZ;IAQL,GAAGP,cAAc,CAAC;MAAEwB,aAAa,EAAE;IAAjB,CAAD,CARZ;IASL,GAAGtB,YAAY,EATV;IAUL,GAAGC,cAAc,EAVZ;IAWL,GAAGE,gBAAgB,CAAC;MAAEoB,OAAO,EAAE;IAAX,CAAD;EAXd,CAHoC;EAiB3CC,KAAK,EAAE;IACL,qBAAsBC,KAAU,IAAK;EADhC,CAjBoC;;EAqB3CC,KAAKA,CAAEZ,KAAFY,EAAOC,IAAPD,EAAoB;IAAA,IAAX;MAAEE;IAAF,IAASD,IAAE;IACvB,MAAM;MAAEE;IAAF,IAAmB3B,YAAY,CAACY,KAAD,CAArC;IACA,MAAM;MAAEgB,UAAF;MAAcC,MAAd;MAAsBC,IAAtB;MAA4BC,IAA5B;MAAkCC;IAAlC,IAA+CnC,QAAQ,CAACe,KAAD,EAAQL,gBAAR,CAA7D;IAEAL,eAAe,CAAC;MACd+B,KAAK,EAAE;QACLC,KAAK,EAAE5B,KAAK,CAACM,KAAD,EAAQ,OAAR,CADP;QAELuB,QAAQ,EAAE7B,KAAK,CAACM,KAAD,EAAQ,UAAR,CAFV;QAGLG,MAAM,EAAET,KAAK,CAACM,KAAD,EAAQ,QAAR,CAHR;QAILS,OAAO,EAAEf,KAAK,CAACM,KAAD,EAAQ,SAAR;MAJT;IADO,CAAD,CAAfV;IASAG,SAAS,CAAC;MAAA,SAEC,CACL,cADK,EAEL;QACE,wBAAwBO,KAAK,CAACC;MADhC,CAFK,EAKLc,YAAY,CAACJ,KALR;IAFD,GAQL;MAAAJ,gBAECO,KAAK,CAACP,OAANO,GAAgB;QAChBE,UADgB;QAEhBC,MAFgB;QAGhBC,IAHgB;QAIhBC,IAJgB;QAKhBC,QAAQ,EAAEA,QAAQ,CAACT;MALH,CAAhBG,CAFD;IAAA,CARK,CAAD,CAATrB;IAoBA,OAAO,EAAP;EACF;;AAvD2C,CAAH,CAAnC","names":["makeGroupProps","useGroup","makeTagProps","makeThemeProps","provideTheme","makeVariantProps","provideDefaults","deepEqual","genericComponent","useRender","toRef","VChipGroupSymbol","Symbol","for","VChipGroup","name","props","column","Boolean","filter","valueComparator","type","Function","default","selectedClass","variant","emits","value","setup","_ref","slots","themeClasses","isSelected","select","next","prev","selected","VChip","color","disabled"],"sources":["../../../src/components/VChipGroup/VChipGroup.tsx"],"sourcesContent":["// Styles\nimport './VChipGroup.sass'\n\n// Composables\nimport { makeGroupProps, useGroup } from '@/composables/group'\nimport { makeTagProps } from '@/composables/tag'\nimport { makeThemeProps, provideTheme } from '@/composables/theme'\nimport { makeVariantProps } from '@/composables/variant'\nimport { provideDefaults } from '@/composables/defaults'\n\n// Utilities\nimport { deepEqual, genericComponent, useRender } from '@/util'\nimport { toRef } from 'vue'\n\n// Types\nimport type { PropType } from 'vue'\n\nexport const VChipGroupSymbol = Symbol.for('vuetify:v-chip-group')\n\nexport const VChipGroup = genericComponent()({\n  name: 'VChipGroup',\n\n  props: {\n    column: Boolean,\n    filter: Boolean,\n    valueComparator: {\n      type: Function as PropType<typeof deepEqual>,\n      default: deepEqual,\n    },\n\n    ...makeGroupProps({ selectedClass: 'v-chip--selected' }),\n    ...makeTagProps(),\n    ...makeThemeProps(),\n    ...makeVariantProps({ variant: 'tonal' } as const),\n  },\n\n  emits: {\n    'update:modelValue': (value: any) => true,\n  },\n\n  setup (props, { slots }) {\n    const { themeClasses } = provideTheme(props)\n    const { isSelected, select, next, prev, selected } = useGroup(props, VChipGroupSymbol)\n\n    provideDefaults({\n      VChip: {\n        color: toRef(props, 'color'),\n        disabled: toRef(props, 'disabled'),\n        filter: toRef(props, 'filter'),\n        variant: toRef(props, 'variant'),\n      },\n    })\n\n    useRender(() => (\n      <props.tag\n        class={[\n          'v-chip-group',\n          {\n            'v-chip-group--column': props.column,\n          },\n          themeClasses.value,\n        ]}\n      >\n        { slots.default?.({\n          isSelected,\n          select,\n          next,\n          prev,\n          selected: selected.value,\n        })}\n      </props.tag>\n    ))\n\n    return {}\n  },\n})\n\nexport type VChipGroup = InstanceType<typeof VChipGroup>\n"]},"metadata":{},"sourceType":"module"}