{"ast":null,"code":"// Utilities\nimport { getCurrentInstance, hasEvent, IN_BROWSER, propsFactory } from \"../util/index.mjs\";\nimport { computed, nextTick, onScopeDispose, resolveDynamicComponent, toRef } from 'vue'; // Types\n\nexport function useRoute() {\n  const vm = getCurrentInstance('useRoute');\n  return computed(() => vm?.proxy?.$route);\n}\nexport function useRouter() {\n  return getCurrentInstance('useRouter')?.proxy?.$router;\n}\nexport function useLink(props, attrs) {\n  const RouterLink = resolveDynamicComponent('RouterLink');\n  const isLink = computed(() => !!(props.href || props.to));\n  const isClickable = computed(() => {\n    return isLink?.value || hasEvent(attrs, 'click') || hasEvent(props, 'click');\n  });\n\n  if (typeof RouterLink === 'string') {\n    return {\n      isLink,\n      isClickable,\n      href: toRef(props, 'href')\n    };\n  }\n\n  const link = props.to ? RouterLink.useLink(props) : undefined;\n  return {\n    isLink,\n    isClickable,\n    route: link?.route,\n    navigate: link?.navigate,\n    isActive: link && computed(() => props.exact ? link.isExactActive?.value : link.isActive?.value),\n    href: computed(() => props.to ? link?.route.value.href : props.href)\n  };\n}\nexport const makeRouterProps = propsFactory({\n  href: String,\n  replace: Boolean,\n  to: [String, Object],\n  exact: Boolean\n}, 'router');\nlet inTransition = false;\nexport function useBackButton(router, cb) {\n  let popped = false;\n  let removeBefore;\n  let removeAfter;\n\n  if (IN_BROWSER) {\n    nextTick(() => {\n      window.addEventListener('popstate', onPopstate);\n      removeBefore = router?.beforeEach((to, from, next) => {\n        if (!inTransition) {\n          setTimeout(() => popped ? cb(next) : next());\n        } else {\n          popped ? cb(next) : next();\n        }\n\n        inTransition = true;\n      });\n      removeAfter = router?.afterEach(() => {\n        inTransition = false;\n      });\n    });\n    onScopeDispose(() => {\n      window.removeEventListener('popstate', onPopstate);\n      removeBefore?.();\n      removeAfter?.();\n    });\n  }\n\n  function onPopstate(e) {\n    if (e.state?.replaced) return;\n    popped = true;\n    setTimeout(() => popped = false);\n  }\n}","map":{"version":3,"mappings":"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","names":["getCurrentInstance","hasEvent","IN_BROWSER","propsFactory","computed","nextTick","onScopeDispose","resolveDynamicComponent","toRef","useRoute","vm","proxy","$route","useRouter","$router","useLink","props","attrs","RouterLink","isLink","href","to","isClickable","value","link","undefined","route","navigate","isActive","exact","isExactActive","makeRouterProps","String","replace","Boolean","Object","inTransition","useBackButton","router","cb","popped","removeBefore","removeAfter","window","addEventListener","onPopstate","beforeEach","from","next","setTimeout","afterEach","removeEventListener","e","state","replaced"],"sources":["../../src/composables/router.tsx"],"sourcesContent":["// Utilities\nimport { getCurrentInstance, hasEvent, IN_BROWSER, propsFactory } from '@/util'\nimport {\n  computed,\n  nextTick,\n  onScopeDispose,\n  resolveDynamicComponent,\n  toRef,\n} from 'vue'\n\n// Types\nimport type { ComputedRef, PropType, Ref, SetupContext } from 'vue'\nimport type {\n  RouterLink as _RouterLink,\n  useLink as _useLink,\n  NavigationGuardNext,\n  RouteLocationNormalizedLoaded,\n  RouteLocationRaw,\n  Router,\n  UseLinkOptions,\n} from 'vue-router'\nimport type { EventProp } from '@/util'\n\nexport function useRoute (): Ref<RouteLocationNormalizedLoaded | undefined> {\n  const vm = getCurrentInstance('useRoute')\n\n  return computed(() => vm?.proxy?.$route)\n}\n\nexport function useRouter (): Router | undefined {\n  return getCurrentInstance('useRouter')?.proxy?.$router\n}\n\nexport interface LinkProps {\n  href: string | undefined\n  replace: boolean | undefined\n  to: RouteLocationRaw | undefined\n  exact: boolean | undefined\n}\n\nexport interface LinkListeners {\n  onClick?: EventProp | undefined\n  onClickOnce?: EventProp | undefined\n}\n\nexport interface UseLink extends Omit<Partial<ReturnType<typeof _useLink>>, 'href'> {\n  isLink: ComputedRef<boolean>\n  isClickable: ComputedRef<boolean>\n  href: Ref<string | undefined>\n}\n\nexport function useLink (props: LinkProps & LinkListeners, attrs: SetupContext['attrs']): UseLink {\n  const RouterLink = resolveDynamicComponent('RouterLink') as typeof _RouterLink | string\n\n  const isLink = computed(() => !!(props.href || props.to))\n  const isClickable = computed(() => {\n    return isLink?.value || hasEvent(attrs, 'click') || hasEvent(props, 'click')\n  })\n\n  if (typeof RouterLink === 'string') {\n    return {\n      isLink,\n      isClickable,\n      href: toRef(props, 'href'),\n    }\n  }\n\n  const link = props.to ? RouterLink.useLink(props as UseLinkOptions) : undefined\n\n  return {\n    isLink,\n    isClickable,\n    route: link?.route,\n    navigate: link?.navigate,\n    isActive: link && computed(() => props.exact ? link.isExactActive?.value : link.isActive?.value),\n    href: computed(() => props.to ? link?.route.value.href : props.href),\n  }\n}\n\nexport const makeRouterProps = propsFactory({\n  href: String,\n  replace: Boolean,\n  to: [String, Object] as PropType<RouteLocationRaw>,\n  exact: Boolean,\n}, 'router')\n\nlet inTransition = false\nexport function useBackButton (router: Router | undefined, cb: (next: NavigationGuardNext) => void) {\n  let popped = false\n  let removeBefore: (() => void) | undefined\n  let removeAfter: (() => void) | undefined\n\n  if (IN_BROWSER) {\n    nextTick(() => {\n      window.addEventListener('popstate', onPopstate)\n      removeBefore = router?.beforeEach((to, from, next) => {\n        if (!inTransition) {\n          setTimeout(() => popped ? cb(next) : next())\n        } else {\n          popped ? cb(next) : next()\n        }\n        inTransition = true\n      })\n      removeAfter = router?.afterEach(() => {\n        inTransition = false\n      })\n    })\n    onScopeDispose(() => {\n      window.removeEventListener('popstate', onPopstate)\n      removeBefore?.()\n      removeAfter?.()\n    })\n  }\n\n  function onPopstate (e: PopStateEvent) {\n    if (e.state?.replaced) return\n\n    popped = true\n    setTimeout(() => (popped = false))\n  }\n}\n"]},"metadata":{},"sourceType":"module"}