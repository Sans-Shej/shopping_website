{"ast":null,"code":"// Styles\nimport \"./VGrid.css\"; // Composables\n\nimport { breakpoints } from \"../../composables/display.mjs\";\nimport { makeTagProps } from \"../../composables/tag.mjs\"; // Utilities\n\nimport { capitalize, computed, h } from 'vue';\nimport { genericComponent } from \"../../util/index.mjs\"; // Types\n\nconst ALIGNMENT = ['start', 'end', 'center'];\nconst SPACE = ['space-between', 'space-around', 'space-evenly'];\n\nfunction makeRowProps(prefix, def) {\n  return breakpoints.reduce((props, val) => {\n    const prefixKey = prefix + capitalize(val);\n    props[prefixKey] = def();\n    return props;\n  }, {});\n}\n\nconst ALIGN_VALUES = [...ALIGNMENT, 'baseline', 'stretch'];\n\nconst alignValidator = str => ALIGN_VALUES.includes(str);\n\nconst alignProps = makeRowProps('align', () => ({\n  type: String,\n  default: null,\n  validator: alignValidator\n}));\nconst JUSTIFY_VALUES = [...ALIGNMENT, ...SPACE];\n\nconst justifyValidator = str => JUSTIFY_VALUES.includes(str);\n\nconst justifyProps = makeRowProps('justify', () => ({\n  type: String,\n  default: null,\n  validator: justifyValidator\n}));\nconst ALIGN_CONTENT_VALUES = [...ALIGNMENT, ...SPACE, 'stretch'];\n\nconst alignContentValidator = str => ALIGN_CONTENT_VALUES.includes(str);\n\nconst alignContentProps = makeRowProps('alignContent', () => ({\n  type: String,\n  default: null,\n  validator: alignContentValidator\n}));\nconst propMap = {\n  align: Object.keys(alignProps),\n  justify: Object.keys(justifyProps),\n  alignContent: Object.keys(alignContentProps)\n};\nconst classMap = {\n  align: 'align',\n  justify: 'justify',\n  alignContent: 'align-content'\n};\n\nfunction breakpointClass(type, prop, val) {\n  let className = classMap[type];\n\n  if (val == null) {\n    return undefined;\n  }\n\n  if (prop) {\n    // alignSm -> Sm\n    const breakpoint = prop.replace(type, '');\n    className += `-${breakpoint}`;\n  } // .align-items-sm-center\n\n\n  className += `-${val}`;\n  return className.toLowerCase();\n}\n\nexport const VRow = genericComponent()({\n  name: 'VRow',\n  props: {\n    dense: Boolean,\n    noGutters: Boolean,\n    align: {\n      type: String,\n      default: null,\n      validator: alignValidator\n    },\n    ...alignProps,\n    justify: {\n      type: String,\n      default: null,\n      validator: justifyValidator\n    },\n    ...justifyProps,\n    alignContent: {\n      type: String,\n      default: null,\n      validator: alignContentValidator\n    },\n    ...alignContentProps,\n    ...makeTagProps()\n  },\n\n  setup(props, _ref) {\n    let {\n      slots\n    } = _ref;\n    const classes = computed(() => {\n      const classList = []; // Loop through `align`, `justify`, `alignContent` breakpoint props\n\n      let type;\n\n      for (type in propMap) {\n        propMap[type].forEach(prop => {\n          const value = props[prop];\n          const className = breakpointClass(type, prop, value);\n          if (className) classList.push(className);\n        });\n      }\n\n      classList.push({\n        'v-row--no-gutters': props.noGutters,\n        'v-row--dense': props.dense,\n        [`align-${props.align}`]: props.align,\n        [`justify-${props.justify}`]: props.justify,\n        [`align-content-${props.alignContent}`]: props.alignContent\n      });\n      return classList;\n    });\n    return () => h(props.tag, {\n      class: ['v-row', classes.value]\n    }, slots.default?.());\n  }\n\n});","map":{"version":3,"mappings":"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","names":["breakpoints","makeTagProps","capitalize","computed","h","genericComponent","ALIGNMENT","SPACE","makeRowProps","prefix","def","reduce","props","val","prefixKey","ALIGN_VALUES","alignValidator","str","includes","alignProps","type","String","default","validator","JUSTIFY_VALUES","justifyValidator","justifyProps","ALIGN_CONTENT_VALUES","alignContentValidator","alignContentProps","propMap","align","Object","keys","justify","alignContent","classMap","breakpointClass","prop","className","undefined","breakpoint","replace","toLowerCase","VRow","name","dense","Boolean","noGutters","setup","_ref","slots","classes","classList","forEach","value","push","tag","class"],"sources":["../../../src/components/VGrid/VRow.ts"],"sourcesContent":["// Styles\nimport './VGrid.sass'\n\n// Composables\nimport { breakpoints } from '@/composables/display'\nimport { makeTagProps } from '@/composables/tag'\n\n// Utilities\nimport { capitalize, computed, h } from 'vue'\nimport { genericComponent } from '@/util'\n\n// Types\nimport type { Breakpoint } from '@/composables/display'\nimport type { Prop, PropType } from 'vue'\n\nconst ALIGNMENT = ['start', 'end', 'center'] as const\n\ntype BreakpointAlign = `align${Capitalize<Breakpoint>}`\ntype BreakpointJustify = `justify${Capitalize<Breakpoint>}`\ntype BreakpointAlignContent = `alignContent${Capitalize<Breakpoint>}`\n\nconst SPACE = ['space-between', 'space-around', 'space-evenly'] as const\n\nfunction makeRowProps <\n  Name extends BreakpointAlign | BreakpointJustify | BreakpointAlignContent,\n  Type,\n> (prefix: string, def: () => Prop<Type, null>) {\n  return breakpoints.reduce((props, val) => {\n    const prefixKey = prefix + capitalize(val) as Name\n    props[prefixKey] = def()\n    return props\n  }, {} as Record<Name, Prop<Type, null>>)\n}\n\nconst ALIGN_VALUES = [...ALIGNMENT, 'baseline', 'stretch'] as const\ntype AlignValue = typeof ALIGN_VALUES[number]\nconst alignValidator = (str: any) => ALIGN_VALUES.includes(str)\nconst alignProps = makeRowProps<BreakpointAlign, AlignValue>('align', () => ({\n  type: String as PropType<AlignValue>,\n  default: null,\n  validator: alignValidator,\n}))\n\nconst JUSTIFY_VALUES = [...ALIGNMENT, ...SPACE] as const\ntype JustifyValue = typeof JUSTIFY_VALUES[number]\nconst justifyValidator = (str: any) => JUSTIFY_VALUES.includes(str)\nconst justifyProps = makeRowProps<BreakpointJustify, JustifyValue>('justify', () => ({\n  type: String as PropType<JustifyValue>,\n  default: null,\n  validator: justifyValidator,\n}))\n\nconst ALIGN_CONTENT_VALUES = [...ALIGNMENT, ...SPACE, 'stretch'] as const\ntype AlignContentValue = typeof ALIGN_CONTENT_VALUES[number]\nconst alignContentValidator = (str: any) => ALIGN_CONTENT_VALUES.includes(str)\nconst alignContentProps = makeRowProps<BreakpointAlignContent, AlignContentValue>('alignContent', () => ({\n  type: String as PropType<AlignContentValue>,\n  default: null,\n  validator: alignContentValidator,\n}))\n\nconst propMap = {\n  align: Object.keys(alignProps),\n  justify: Object.keys(justifyProps),\n  alignContent: Object.keys(alignContentProps),\n}\n\nconst classMap = {\n  align: 'align',\n  justify: 'justify',\n  alignContent: 'align-content',\n}\n\nfunction breakpointClass (type: keyof typeof propMap, prop: string, val: string) {\n  let className = classMap[type]\n  if (val == null) {\n    return undefined\n  }\n  if (prop) {\n    // alignSm -> Sm\n    const breakpoint = prop.replace(type, '')\n    className += `-${breakpoint}`\n  }\n  // .align-items-sm-center\n  className += `-${val}`\n  return className.toLowerCase()\n}\n\nexport const VRow = genericComponent()({\n  name: 'VRow',\n\n  props: {\n    dense: Boolean,\n    noGutters: Boolean,\n    align: {\n      type: String as PropType<typeof ALIGN_VALUES[number]>,\n      default: null,\n      validator: alignValidator,\n    },\n    ...alignProps,\n    justify: {\n      type: String as PropType<typeof ALIGN_CONTENT_VALUES[number]>,\n      default: null,\n      validator: justifyValidator,\n    },\n    ...justifyProps,\n    alignContent: {\n      type: String as PropType<typeof ALIGN_CONTENT_VALUES[number]>,\n      default: null,\n      validator: alignContentValidator,\n    },\n\n    ...alignContentProps,\n    ...makeTagProps(),\n  },\n\n  setup (props, { slots }) {\n    const classes = computed(() => {\n      const classList: any[] = []\n\n      // Loop through `align`, `justify`, `alignContent` breakpoint props\n      let type: keyof typeof propMap\n      for (type in propMap) {\n        propMap[type].forEach(prop => {\n          const value: string = (props as any)[prop]\n          const className = breakpointClass(type, prop, value)\n          if (className) classList!.push(className)\n        })\n      }\n\n      classList.push({\n        'v-row--no-gutters': props.noGutters,\n        'v-row--dense': props.dense,\n        [`align-${props.align}`]: props.align,\n        [`justify-${props.justify}`]: props.justify,\n        [`align-content-${props.alignContent}`]: props.alignContent,\n      })\n\n      return classList\n    })\n\n    return () => h(props.tag, {\n      class: ['v-row', classes.value],\n    }, slots.default?.())\n  },\n})\n\nexport type VRow = InstanceType<typeof VRow>\n"]},"metadata":{},"sourceType":"module"}