{"ast":null,"code":"import { mergeProps as _mergeProps, createVNode as _createVNode } from \"vue\"; // Icons\n\nimport { aliases, mdi } from \"../iconsets/mdi.mjs\"; // Utilities\n\nimport { computed, inject, isRef } from 'vue';\nimport { defineComponent, genericComponent, mergeDeep, propsFactory } from \"../util/index.mjs\"; // Types\n\nexport const IconValue = [String, Function, Object];\nexport const IconSymbol = Symbol.for('vuetify:icons');\nexport const makeIconProps = propsFactory({\n  icon: {\n    type: IconValue\n  },\n  // Could not remove this and use makeTagProps, types complained because it is not required\n  tag: {\n    type: String,\n    required: true\n  }\n}, 'icon');\nexport const VComponentIcon = genericComponent()({\n  name: 'VComponentIcon',\n  props: makeIconProps(),\n\n  setup(props, _ref) {\n    let {\n      slots\n    } = _ref;\n    return () => {\n      return _createVNode(props.tag, null, {\n        default: () => [props.icon ? _createVNode(props.icon, null, null) : slots.default?.()]\n      });\n    };\n  }\n\n});\nexport const VSvgIcon = defineComponent({\n  name: 'VSvgIcon',\n  inheritAttrs: false,\n  props: makeIconProps(),\n\n  setup(props, _ref2) {\n    let {\n      attrs\n    } = _ref2;\n    return () => {\n      return _createVNode(props.tag, _mergeProps(attrs, {\n        \"style\": null\n      }), {\n        default: () => [_createVNode(\"svg\", {\n          \"class\": \"v-icon__svg\",\n          \"xmlns\": \"http://www.w3.org/2000/svg\",\n          \"viewBox\": \"0 0 24 24\",\n          \"role\": \"img\",\n          \"aria-hidden\": \"true\"\n        }, [_createVNode(\"path\", {\n          \"d\": props.icon\n        }, null)])]\n      });\n    };\n  }\n\n});\nexport const VLigatureIcon = defineComponent({\n  name: 'VLigatureIcon',\n  props: makeIconProps(),\n\n  setup(props) {\n    return () => {\n      return _createVNode(props.tag, null, {\n        default: () => [props.icon]\n      });\n    };\n  }\n\n});\nexport const VClassIcon = defineComponent({\n  name: 'VClassIcon',\n  props: makeIconProps(),\n\n  setup(props) {\n    return () => {\n      return _createVNode(props.tag, {\n        \"class\": props.icon\n      }, null);\n    };\n  }\n\n});\nexport const defaultSets = {\n  svg: {\n    component: VSvgIcon\n  },\n  class: {\n    component: VClassIcon\n  }\n}; // Composables\n\nexport function createIcons(options) {\n  return mergeDeep({\n    defaultSet: 'mdi',\n    sets: { ...defaultSets,\n      mdi\n    },\n    aliases\n  }, options);\n}\nexport const useIcon = props => {\n  const icons = inject(IconSymbol);\n  if (!icons) throw new Error('Missing Vuetify Icons provide!');\n  const iconData = computed(() => {\n    const iconAlias = isRef(props) ? props.value : props.icon;\n    if (!iconAlias) return {\n      component: VComponentIcon\n    };\n    let icon = iconAlias;\n\n    if (typeof icon === 'string') {\n      icon = icon.trim();\n\n      if (icon.startsWith('$')) {\n        icon = icons.aliases?.[icon.slice(1)];\n      }\n    }\n\n    if (!icon) throw new Error(`Could not find aliased icon \"${iconAlias}\"`);\n\n    if (typeof icon !== 'string') {\n      return {\n        component: VComponentIcon,\n        icon\n      };\n    }\n\n    const iconSetName = Object.keys(icons.sets).find(setName => typeof icon === 'string' && icon.startsWith(`${setName}:`));\n    const iconName = iconSetName ? icon.slice(iconSetName.length + 1) : icon;\n    const iconSet = icons.sets[iconSetName ?? icons.defaultSet];\n    return {\n      component: iconSet.component,\n      icon: iconName\n    };\n  });\n  return {\n    iconData\n  };\n};","map":{"version":3,"mappings":"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","names":["aliases","mdi","computed","inject","isRef","defineComponent","genericComponent","mergeDeep","propsFactory","IconValue","String","Function","Object","IconSymbol","Symbol","for","makeIconProps","icon","type","tag","required","VComponentIcon","name","props","setup","_ref","slots","default","_createVNode","VSvgIcon","inheritAttrs","_ref2","attrs","VLigatureIcon","VClassIcon","defaultSets","svg","component","class","createIcons","options","defaultSet","sets","useIcon","icons","Error","iconData","iconAlias","value","trim","startsWith","slice","iconSetName","keys","find","setName","iconName","length","iconSet"],"sources":["../../src/composables/icons.tsx"],"sourcesContent":["// Icons\nimport { aliases, mdi } from '@/iconsets/mdi'\n\n// Utilities\nimport { computed, inject, isRef } from 'vue'\nimport { defineComponent, genericComponent, mergeDeep, propsFactory } from '@/util'\n\n// Types\nimport type { InjectionKey, JSXComponent, PropType, Ref } from 'vue'\n\nexport type IconValue = string | JSXComponent\nexport const IconValue = [String, Function, Object] as PropType<IconValue>\n\nexport interface IconAliases {\n  [name: string]: IconValue\n  complete: IconValue\n  cancel: IconValue\n  close: IconValue\n  delete: IconValue\n  clear: IconValue\n  success: IconValue\n  info: IconValue\n  warning: IconValue\n  error: IconValue\n  prev: IconValue\n  next: IconValue\n  checkboxOn: IconValue\n  checkboxOff: IconValue\n  checkboxIndeterminate: IconValue\n  delimiter: IconValue\n  sortAsc: IconValue\n  sortDesc: IconValue\n  expand: IconValue\n  menu: IconValue\n  subgroup: IconValue\n  dropdown: IconValue\n  radioOn: IconValue\n  radioOff: IconValue\n  edit: IconValue\n  ratingEmpty: IconValue\n  ratingFull: IconValue\n  ratingHalf: IconValue\n  loading: IconValue\n  first: IconValue\n  last: IconValue\n  unfold: IconValue\n  file: IconValue\n  plus: IconValue\n  minus: IconValue\n}\n\nexport interface IconProps {\n  tag: string\n  icon?: IconValue\n  disabled?: Boolean\n}\n\ntype IconComponent = JSXComponent<IconProps>\n\nexport interface IconSet {\n  component: IconComponent\n}\n\nexport type IconOptions = {\n  defaultSet: string\n  aliases?: Partial<IconAliases>\n  sets: Record<string, IconSet>\n}\n\ntype IconInstance = {\n  component: IconComponent\n  icon?: IconValue\n}\n\nexport const IconSymbol: InjectionKey<IconOptions> = Symbol.for('vuetify:icons')\n\nexport const makeIconProps = propsFactory({\n  icon: {\n    type: IconValue,\n  },\n  // Could not remove this and use makeTagProps, types complained because it is not required\n  tag: {\n    type: String,\n    required: true,\n  },\n}, 'icon')\n\nexport const VComponentIcon = genericComponent()({\n  name: 'VComponentIcon',\n\n  props: makeIconProps(),\n\n  setup (props, { slots }) {\n    return () => {\n      return (\n        <props.tag>\n          { props.icon ? <props.icon /> : slots.default?.() }\n        </props.tag>\n      )\n    }\n  },\n})\nexport type VComponentIcon = InstanceType<typeof VComponentIcon>\n\nexport const VSvgIcon = defineComponent({\n  name: 'VSvgIcon',\n\n  inheritAttrs: false,\n\n  props: makeIconProps(),\n\n  setup (props, { attrs }) {\n    return () => {\n      return (\n        <props.tag { ...attrs } style={ null }>\n          <svg\n            class=\"v-icon__svg\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            viewBox=\"0 0 24 24\"\n            role=\"img\"\n            aria-hidden=\"true\"\n          >\n            <path d={ props.icon as string }></path>\n          </svg>\n        </props.tag>\n      )\n    }\n  },\n})\nexport type VSvgIcon = InstanceType<typeof VSvgIcon>\n\nexport const VLigatureIcon = defineComponent({\n  name: 'VLigatureIcon',\n\n  props: makeIconProps(),\n\n  setup (props) {\n    return () => {\n      return <props.tag>{ props.icon }</props.tag>\n    }\n  },\n})\nexport type VLigatureIcon = InstanceType<typeof VLigatureIcon>\n\nexport const VClassIcon = defineComponent({\n  name: 'VClassIcon',\n\n  props: makeIconProps(),\n\n  setup (props) {\n    return () => {\n      return <props.tag class={ props.icon }></props.tag>\n    }\n  },\n})\nexport type VClassIcon = InstanceType<typeof VClassIcon>\n\nexport const defaultSets: Record<string, IconSet> = {\n  svg: {\n    component: VSvgIcon,\n  },\n  class: {\n    component: VClassIcon,\n  },\n}\n\n// Composables\nexport function createIcons (options?: IconOptions) {\n  return mergeDeep({\n    defaultSet: 'mdi',\n    sets: {\n      ...defaultSets,\n      mdi,\n    },\n    aliases,\n  }, options)\n}\n\nexport const useIcon = (props: Ref<string | undefined> | { icon?: IconValue }) => {\n  const icons = inject(IconSymbol)\n\n  if (!icons) throw new Error('Missing Vuetify Icons provide!')\n\n  const iconData: Ref<IconInstance> = computed(() => {\n    const iconAlias = isRef(props) ? props.value : props.icon\n\n    if (!iconAlias) return { component: VComponentIcon }\n\n    let icon: IconValue | undefined = iconAlias\n\n    if (typeof icon === 'string') {\n      icon = icon.trim()\n\n      if (icon.startsWith('$')) {\n        icon = icons.aliases?.[icon.slice(1)]\n      }\n    }\n\n    if (!icon) throw new Error(`Could not find aliased icon \"${iconAlias}\"`)\n\n    if (typeof icon !== 'string') {\n      return {\n        component: VComponentIcon,\n        icon,\n      }\n    }\n\n    const iconSetName = Object.keys(icons.sets).find(\n      setName => typeof icon === 'string' && icon.startsWith(`${setName}:`)\n    )\n\n    const iconName = iconSetName ? icon.slice(iconSetName.length + 1) : icon\n    const iconSet = icons.sets[iconSetName ?? icons.defaultSet]\n\n    return {\n      component: iconSet.component,\n      icon: iconName,\n    }\n  })\n\n  return { iconData }\n}\n"]},"metadata":{},"sourceType":"module"}