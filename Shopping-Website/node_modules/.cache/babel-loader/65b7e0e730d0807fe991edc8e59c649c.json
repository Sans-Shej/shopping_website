{"ast":null,"code":"import { vModelText as _vModelText, withDirectives as _withDirectives, mergeProps as _mergeProps, resolveDirective as _resolveDirective, createVNode as _createVNode, Fragment as _Fragment } from \"vue\"; // Styles\n\nimport \"./VTextarea.css\";\nimport \"../VTextField/VTextField.css\"; // Components\n\nimport { filterFieldProps, makeVFieldProps } from \"../VField/VField.mjs\";\nimport { makeVInputProps, VInput } from \"../VInput/VInput.mjs\";\nimport { VCounter } from \"../VCounter/index.mjs\";\nimport { VField } from \"../VField/index.mjs\"; // Directives\n\nimport Intersect from \"../../directives/intersect/index.mjs\"; // Composables\n\nimport { forwardRefs } from \"../../composables/forwardRefs.mjs\";\nimport { useFocus } from \"../../composables/focus.mjs\";\nimport { useProxiedModel } from \"../../composables/proxiedModel.mjs\"; // Utilities\n\nimport { computed, nextTick, onBeforeUnmount, onMounted, ref, watch } from 'vue';\nimport { callEvent, clamp, convertToUnit, filterInputAttrs, genericComponent, useRender } from \"../../util/index.mjs\"; // Types\n\nexport const VTextarea = genericComponent()({\n  name: 'VTextarea',\n  directives: {\n    Intersect\n  },\n  inheritAttrs: false,\n  props: {\n    autoGrow: Boolean,\n    autofocus: Boolean,\n    counter: [Boolean, Number, String],\n    counterValue: Function,\n    prefix: String,\n    placeholder: String,\n    persistentPlaceholder: Boolean,\n    persistentCounter: Boolean,\n    noResize: Boolean,\n    rows: {\n      type: [Number, String],\n      default: 5,\n      validator: v => !isNaN(parseFloat(v))\n    },\n    maxRows: {\n      type: [Number, String],\n      validator: v => !isNaN(parseFloat(v))\n    },\n    suffix: String,\n    modelModifiers: Object,\n    ...makeVInputProps(),\n    ...makeVFieldProps()\n  },\n  emits: {\n    'click:control': e => true,\n    'mousedown:control': e => true,\n    'update:focused': focused => true,\n    'update:modelValue': val => true\n  },\n\n  setup(props, _ref) {\n    let {\n      attrs,\n      emit,\n      slots\n    } = _ref;\n    const model = useProxiedModel(props, 'modelValue');\n    const {\n      isFocused,\n      focus,\n      blur\n    } = useFocus(props);\n    const counterValue = computed(() => {\n      return typeof props.counterValue === 'function' ? props.counterValue(model.value) : (model.value || '').toString().length;\n    });\n    const max = computed(() => {\n      if (attrs.maxlength) return attrs.maxlength;\n      if (!props.counter || typeof props.counter !== 'number' && typeof props.counter !== 'string') return undefined;\n      return props.counter;\n    });\n\n    function onIntersect(isIntersecting, entries) {\n      if (!props.autofocus || !isIntersecting) return;\n      entries[0].target?.focus?.();\n    }\n\n    const vInputRef = ref();\n    const vFieldRef = ref();\n    const controlHeight = ref('');\n    const textareaRef = ref();\n    const isActive = computed(() => isFocused.value || props.persistentPlaceholder);\n\n    function onFocus() {\n      if (textareaRef.value !== document.activeElement) {\n        textareaRef.value?.focus();\n      }\n\n      if (!isFocused.value) focus();\n    }\n\n    function onControlClick(e) {\n      onFocus();\n      emit('click:control', e);\n    }\n\n    function onControlMousedown(e) {\n      emit('mousedown:control', e);\n    }\n\n    function onClear(e) {\n      e.stopPropagation();\n      onFocus();\n      nextTick(() => {\n        model.value = '';\n        callEvent(props['onClick:clear'], e);\n      });\n    }\n\n    function onInput(e) {\n      const el = e.target;\n      model.value = el.value;\n\n      if (props.modelModifiers?.trim) {\n        const caretPosition = [el.selectionStart, el.selectionEnd];\n        nextTick(() => {\n          el.selectionStart = caretPosition[0];\n          el.selectionEnd = caretPosition[1];\n        });\n      }\n    }\n\n    const sizerRef = ref();\n\n    function calculateInputHeight() {\n      if (!props.autoGrow) return;\n      nextTick(() => {\n        if (!sizerRef.value || !vFieldRef.value) return;\n        const style = getComputedStyle(sizerRef.value);\n        const fieldStyle = getComputedStyle(vFieldRef.value.$el);\n        const padding = parseFloat(style.getPropertyValue('--v-field-padding-top')) + parseFloat(style.getPropertyValue('--v-input-padding-top')) + parseFloat(style.getPropertyValue('--v-field-padding-bottom'));\n        const height = sizerRef.value.scrollHeight;\n        const lineHeight = parseFloat(style.lineHeight);\n        const minHeight = Math.max(parseFloat(props.rows) * lineHeight + padding, parseFloat(fieldStyle.getPropertyValue('--v-input-control-height')));\n        const maxHeight = parseFloat(props.maxRows) * lineHeight + padding || Infinity;\n        controlHeight.value = convertToUnit(clamp(height ?? 0, minHeight, maxHeight));\n      });\n    }\n\n    onMounted(calculateInputHeight);\n    watch(model, calculateInputHeight);\n    watch(() => props.rows, calculateInputHeight);\n    watch(() => props.maxRows, calculateInputHeight);\n    watch(() => props.density, calculateInputHeight);\n    let observer;\n    watch(sizerRef, val => {\n      if (val) {\n        observer = new ResizeObserver(calculateInputHeight);\n        observer.observe(sizerRef.value);\n      } else {\n        observer?.disconnect();\n      }\n    });\n    onBeforeUnmount(() => {\n      observer?.disconnect();\n    });\n    useRender(() => {\n      const hasCounter = !!(slots.counter || props.counter || props.counterValue);\n      const hasDetails = !!(hasCounter || slots.details);\n      const [rootAttrs, inputAttrs] = filterInputAttrs(attrs);\n      const [{\n        modelValue: _,\n        ...inputProps\n      }] = VInput.filterProps(props);\n      const [fieldProps] = filterFieldProps(props);\n      return _createVNode(VInput, _mergeProps({\n        \"ref\": vInputRef,\n        \"modelValue\": model.value,\n        \"onUpdate:modelValue\": $event => model.value = $event,\n        \"class\": ['v-textarea v-text-field', {\n          'v-textarea--prefixed': props.prefix,\n          'v-textarea--suffixed': props.suffix,\n          'v-text-field--prefixed': props.prefix,\n          'v-text-field--suffixed': props.suffix,\n          'v-textarea--auto-grow': props.autoGrow,\n          'v-textarea--no-resize': props.noResize || props.autoGrow,\n          'v-text-field--flush-details': ['plain', 'underlined'].includes(props.variant)\n        }]\n      }, rootAttrs, inputProps, {\n        \"focused\": isFocused.value\n      }), { ...slots,\n        default: _ref2 => {\n          let {\n            isDisabled,\n            isDirty,\n            isReadonly,\n            isValid\n          } = _ref2;\n          return _createVNode(VField, _mergeProps({\n            \"ref\": vFieldRef,\n            \"style\": {\n              '--v-textarea-control-height': controlHeight.value\n            },\n            \"onClick\": onControlClick,\n            \"onMousedown\": onControlMousedown,\n            \"onClick:clear\": onClear,\n            \"onClick:prependInner\": props['onClick:prependInner'],\n            \"onClick:appendInner\": props['onClick:appendInner'],\n            \"role\": \"textbox\"\n          }, fieldProps, {\n            \"active\": isActive.value || isDirty.value,\n            \"dirty\": isDirty.value || props.dirty,\n            \"disabled\": isDisabled.value,\n            \"focused\": isFocused.value,\n            \"error\": isValid.value === false\n          }), { ...slots,\n            default: _ref3 => {\n              let {\n                props: {\n                  class: fieldClass,\n                  ...slotProps\n                }\n              } = _ref3;\n              return _createVNode(_Fragment, null, [props.prefix && _createVNode(\"span\", {\n                \"class\": \"v-text-field__prefix\"\n              }, [props.prefix]), _withDirectives(_createVNode(\"textarea\", _mergeProps({\n                \"ref\": textareaRef,\n                \"class\": fieldClass,\n                \"value\": model.value,\n                \"onInput\": onInput,\n                \"autofocus\": props.autofocus,\n                \"readonly\": isReadonly.value,\n                \"disabled\": isDisabled.value,\n                \"placeholder\": props.placeholder,\n                \"rows\": props.rows,\n                \"name\": props.name,\n                \"onFocus\": onFocus,\n                \"onBlur\": blur\n              }, slotProps, inputAttrs), null), [[_resolveDirective(\"intersect\"), {\n                handler: onIntersect\n              }, null, {\n                once: true\n              }]]), props.autoGrow && _withDirectives(_createVNode(\"textarea\", {\n                \"class\": [fieldClass, 'v-textarea__sizer'],\n                \"onUpdate:modelValue\": $event => model.value = $event,\n                \"ref\": sizerRef,\n                \"readonly\": true,\n                \"aria-hidden\": \"true\"\n              }, null), [[_vModelText, model.value]]), props.suffix && _createVNode(\"span\", {\n                \"class\": \"v-text-field__suffix\"\n              }, [props.suffix])]);\n            }\n          });\n        },\n        details: hasDetails ? slotProps => _createVNode(_Fragment, null, [slots.details?.(slotProps), hasCounter && _createVNode(_Fragment, null, [_createVNode(\"span\", null, null), _createVNode(VCounter, {\n          \"active\": props.persistentCounter || isFocused.value,\n          \"value\": counterValue.value,\n          \"max\": max.value\n        }, slots.counter)])]) : undefined\n      });\n    });\n    return forwardRefs({}, vInputRef, vFieldRef, textareaRef);\n  }\n\n});","map":{"version":3,"mappings":"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","names":["filterFieldProps","makeVFieldProps","makeVInputProps","VInput","VCounter","VField","Intersect","forwardRefs","useFocus","useProxiedModel","computed","nextTick","onBeforeUnmount","onMounted","ref","watch","callEvent","clamp","convertToUnit","filterInputAttrs","genericComponent","useRender","VTextarea","name","directives","inheritAttrs","props","autoGrow","Boolean","autofocus","counter","Number","String","counterValue","Function","prefix","placeholder","persistentPlaceholder","persistentCounter","noResize","rows","type","default","validator","v","isNaN","parseFloat","maxRows","suffix","modelModifiers","Object","emits","e","focused","val","setup","_ref","attrs","emit","slots","model","isFocused","focus","blur","value","toString","length","max","maxlength","undefined","onIntersect","isIntersecting","entries","target","vInputRef","vFieldRef","controlHeight","textareaRef","isActive","onFocus","document","activeElement","onControlClick","onControlMousedown","onClear","stopPropagation","onInput","el","trim","caretPosition","selectionStart","selectionEnd","sizerRef","calculateInputHeight","style","getComputedStyle","fieldStyle","$el","padding","getPropertyValue","height","scrollHeight","lineHeight","minHeight","Math","maxHeight","Infinity","density","observer","ResizeObserver","observe","disconnect","hasCounter","hasDetails","details","rootAttrs","inputAttrs","modelValue","_","inputProps","filterProps","fieldProps","$event","includes","variant","_ref2","isDisabled","isDirty","isReadonly","isValid","dirty","_ref3","class","fieldClass","slotProps","_createVNode","_withDirectives","handler","once"],"sources":["../../../src/components/VTextarea/VTextarea.tsx"],"sourcesContent":["// Styles\nimport './VTextarea.sass'\nimport '../VTextField/VTextField.sass'\n\n// Components\nimport { filterFieldProps, makeVFieldProps } from '@/components/VField/VField'\nimport { makeVInputProps, VInput } from '@/components/VInput/VInput'\nimport { VCounter } from '@/components/VCounter'\nimport { VField } from '@/components/VField'\n\n// Directives\nimport Intersect from '@/directives/intersect'\n\n// Composables\nimport { forwardRefs } from '@/composables/forwardRefs'\nimport { useFocus } from '@/composables/focus'\nimport { useProxiedModel } from '@/composables/proxiedModel'\n\n// Utilities\nimport { computed, nextTick, onBeforeUnmount, onMounted, ref, watch } from 'vue'\nimport { callEvent, clamp, convertToUnit, filterInputAttrs, genericComponent, useRender } from '@/util'\n\n// Types\nimport type { PropType } from 'vue'\nimport type { VFieldSlots } from '@/components/VField/VField'\nimport type { VInputSlots } from '@/components/VInput/VInput'\n\nexport const VTextarea = genericComponent<Omit<VInputSlots & VFieldSlots, 'default'>>()({\n  name: 'VTextarea',\n\n  directives: { Intersect },\n\n  inheritAttrs: false,\n\n  props: {\n    autoGrow: Boolean,\n    autofocus: Boolean,\n    counter: [Boolean, Number, String] as PropType<true | number | string>,\n    counterValue: Function as PropType<(value: any) => number>,\n    prefix: String,\n    placeholder: String,\n    persistentPlaceholder: Boolean,\n    persistentCounter: Boolean,\n    noResize: Boolean,\n    rows: {\n      type: [Number, String],\n      default: 5,\n      validator: (v: any) => !isNaN(parseFloat(v)),\n    },\n    maxRows: {\n      type: [Number, String],\n      validator: (v: any) => !isNaN(parseFloat(v)),\n    },\n    suffix: String,\n    modelModifiers: Object as PropType<Record<string, boolean>>,\n\n    ...makeVInputProps(),\n    ...makeVFieldProps(),\n  },\n\n  emits: {\n    'click:control': (e: MouseEvent) => true,\n    'mousedown:control': (e: MouseEvent) => true,\n    'update:focused': (focused: boolean) => true,\n    'update:modelValue': (val: string) => true,\n  },\n\n  setup (props, { attrs, emit, slots }) {\n    const model = useProxiedModel(props, 'modelValue')\n    const { isFocused, focus, blur } = useFocus(props)\n    const counterValue = computed(() => {\n      return typeof props.counterValue === 'function'\n        ? props.counterValue(model.value)\n        : (model.value || '').toString().length\n    })\n    const max = computed(() => {\n      if (attrs.maxlength) return attrs.maxlength as string | number\n\n      if (\n        !props.counter ||\n        (typeof props.counter !== 'number' &&\n        typeof props.counter !== 'string')\n      ) return undefined\n\n      return props.counter\n    })\n\n    function onIntersect (\n      isIntersecting: boolean,\n      entries: IntersectionObserverEntry[]\n    ) {\n      if (!props.autofocus || !isIntersecting) return\n\n      (entries[0].target as HTMLInputElement)?.focus?.()\n    }\n\n    const vInputRef = ref<VInput>()\n    const vFieldRef = ref<VInput>()\n    const controlHeight = ref('')\n    const textareaRef = ref<HTMLInputElement>()\n    const isActive = computed(() => (\n      isFocused.value ||\n      props.persistentPlaceholder\n    ))\n\n    function onFocus () {\n      if (textareaRef.value !== document.activeElement) {\n        textareaRef.value?.focus()\n      }\n\n      if (!isFocused.value) focus()\n    }\n    function onControlClick (e: MouseEvent) {\n      onFocus()\n\n      emit('click:control', e)\n    }\n    function onControlMousedown (e: MouseEvent) {\n      emit('mousedown:control', e)\n    }\n    function onClear (e: MouseEvent) {\n      e.stopPropagation()\n\n      onFocus()\n\n      nextTick(() => {\n        model.value = ''\n\n        callEvent(props['onClick:clear'], e)\n      })\n    }\n    function onInput (e: Event) {\n      const el = e.target as HTMLTextAreaElement\n      model.value = el.value\n      if (props.modelModifiers?.trim) {\n        const caretPosition = [el.selectionStart, el.selectionEnd]\n        nextTick(() => {\n          el.selectionStart = caretPosition[0]\n          el.selectionEnd = caretPosition[1]\n        })\n      }\n    }\n\n    const sizerRef = ref<HTMLTextAreaElement>()\n    function calculateInputHeight () {\n      if (!props.autoGrow) return\n\n      nextTick(() => {\n        if (!sizerRef.value || !vFieldRef.value) return\n\n        const style = getComputedStyle(sizerRef.value)\n        const fieldStyle = getComputedStyle(vFieldRef.value.$el)\n\n        const padding = parseFloat(style.getPropertyValue('--v-field-padding-top')) +\n          parseFloat(style.getPropertyValue('--v-input-padding-top')) +\n          parseFloat(style.getPropertyValue('--v-field-padding-bottom'))\n\n        const height = sizerRef.value.scrollHeight\n        const lineHeight = parseFloat(style.lineHeight)\n        const minHeight = Math.max(\n          parseFloat(props.rows) * lineHeight + padding,\n          parseFloat(fieldStyle.getPropertyValue('--v-input-control-height'))\n        )\n        const maxHeight = parseFloat(props.maxRows!) * lineHeight + padding || Infinity\n\n        controlHeight.value = convertToUnit(clamp(height ?? 0, minHeight, maxHeight))\n      })\n    }\n\n    onMounted(calculateInputHeight)\n    watch(model, calculateInputHeight)\n    watch(() => props.rows, calculateInputHeight)\n    watch(() => props.maxRows, calculateInputHeight)\n    watch(() => props.density, calculateInputHeight)\n\n    let observer: ResizeObserver | undefined\n    watch(sizerRef, val => {\n      if (val) {\n        observer = new ResizeObserver(calculateInputHeight)\n        observer.observe(sizerRef.value!)\n      } else {\n        observer?.disconnect()\n      }\n    })\n    onBeforeUnmount(() => {\n      observer?.disconnect()\n    })\n\n    useRender(() => {\n      const hasCounter = !!(slots.counter || props.counter || props.counterValue)\n      const hasDetails = !!(hasCounter || slots.details)\n      const [rootAttrs, inputAttrs] = filterInputAttrs(attrs)\n      const [{ modelValue: _, ...inputProps }] = VInput.filterProps(props)\n      const [fieldProps] = filterFieldProps(props)\n\n      return (\n        <VInput\n          ref={ vInputRef }\n          v-model={ model.value }\n          class={[\n            'v-textarea v-text-field',\n            {\n              'v-textarea--prefixed': props.prefix,\n              'v-textarea--suffixed': props.suffix,\n              'v-text-field--prefixed': props.prefix,\n              'v-text-field--suffixed': props.suffix,\n              'v-textarea--auto-grow': props.autoGrow,\n              'v-textarea--no-resize': props.noResize || props.autoGrow,\n              'v-text-field--flush-details': ['plain', 'underlined'].includes(props.variant),\n            },\n          ]}\n          { ...rootAttrs }\n          { ...inputProps }\n          focused={ isFocused.value }\n        >\n          {{\n            ...slots,\n            default: ({\n              isDisabled,\n              isDirty,\n              isReadonly,\n              isValid,\n            }) => (\n              <VField\n                ref={ vFieldRef }\n                style={{\n                  '--v-textarea-control-height': controlHeight.value,\n                }}\n                onClick={ onControlClick }\n                onMousedown={ onControlMousedown }\n                onClick:clear={ onClear }\n                onClick:prependInner={ props['onClick:prependInner'] }\n                onClick:appendInner={ props['onClick:appendInner'] }\n                role=\"textbox\"\n                { ...fieldProps }\n                active={ isActive.value || isDirty.value }\n                dirty={ isDirty.value || props.dirty }\n                disabled={ isDisabled.value }\n                focused={ isFocused.value }\n                error={ isValid.value === false }\n              >\n                {{\n                  ...slots,\n                  default: ({\n                    props: { class: fieldClass, ...slotProps },\n                  }) => (\n                    <>\n                      { props.prefix && (\n                        <span class=\"v-text-field__prefix\">\n                          { props.prefix }\n                        </span>\n                      )}\n\n                      <textarea\n                        ref={ textareaRef }\n                        class={ fieldClass }\n                        value={ model.value }\n                        onInput={ onInput }\n                        v-intersect={[{\n                          handler: onIntersect,\n                        }, null, ['once']]}\n                        autofocus={ props.autofocus }\n                        readonly={ isReadonly.value }\n                        disabled={ isDisabled.value }\n                        placeholder={ props.placeholder }\n                        rows={ props.rows }\n                        name={ props.name }\n                        onFocus={ onFocus }\n                        onBlur={ blur }\n                        { ...slotProps }\n                        { ...inputAttrs }\n                      />\n\n                      { props.autoGrow && (\n                        <textarea\n                          class={[\n                            fieldClass,\n                            'v-textarea__sizer',\n                          ]}\n                          v-model={ model.value }\n                          ref={ sizerRef }\n                          readonly\n                          aria-hidden=\"true\"\n                        />\n                      )}\n\n                      { props.suffix && (\n                        <span class=\"v-text-field__suffix\">\n                          { props.suffix }\n                        </span>\n                      )}\n                    </>\n                  ),\n                }}\n              </VField>\n            ),\n            details: hasDetails ? slotProps => (\n              <>\n                { slots.details?.(slotProps) }\n\n                { hasCounter && (\n                  <>\n                    <span />\n\n                    <VCounter\n                      active={ props.persistentCounter || isFocused.value }\n                      value={ counterValue.value }\n                      max={ max.value }\n                      v-slots:default={ slots.counter }\n                    />\n                  </>\n                )}\n              </>\n            ) : undefined,\n          }}\n        </VInput>\n      )\n    })\n\n    return forwardRefs({}, vInputRef, vFieldRef, textareaRef)\n  },\n})\n\nexport type VTextarea = InstanceType<typeof VTextarea>\n"]},"metadata":{},"sourceType":"module"}