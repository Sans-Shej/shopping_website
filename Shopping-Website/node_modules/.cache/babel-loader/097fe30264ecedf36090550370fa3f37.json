{"ast":null,"code":"import { mergeProps as _mergeProps, resolveDirective as _resolveDirective, createVNode as _createVNode, Fragment as _Fragment } from \"vue\"; // Styles\n\nimport \"./VRadioGroup.css\"; // Components\n\nimport { VSelectionControl } from \"../VSelectionControl/index.mjs\";\nimport { makeVInputProps, VInput } from \"../VInput/VInput.mjs\";\nimport { makeSelectionControlGroupProps, VSelectionControlGroup } from \"../VSelectionControlGroup/VSelectionControlGroup.mjs\";\nimport { VLabel } from \"../VLabel/index.mjs\"; // Composables\n\nimport { IconValue } from \"../../composables/icons.mjs\";\nimport { useProxiedModel } from \"../../composables/proxiedModel.mjs\"; // Utilities\n\nimport { computed } from 'vue';\nimport { filterInputAttrs, genericComponent, getUid, omit, useRender } from \"../../util/index.mjs\"; // Types\n\nexport const VRadioGroup = genericComponent()({\n  name: 'VRadioGroup',\n  inheritAttrs: false,\n  props: {\n    height: {\n      type: [Number, String],\n      default: 'auto'\n    },\n    ...makeVInputProps(),\n    ...omit(makeSelectionControlGroupProps(), ['multiple']),\n    trueIcon: {\n      type: IconValue,\n      default: '$radioOn'\n    },\n    falseIcon: {\n      type: IconValue,\n      default: '$radioOff'\n    },\n    type: {\n      type: String,\n      default: 'radio'\n    }\n  },\n  emits: {\n    'update:modelValue': val => true\n  },\n\n  setup(props, _ref) {\n    let {\n      attrs,\n      slots\n    } = _ref;\n    const uid = getUid();\n    const id = computed(() => props.id || `radio-group-${uid}`);\n    const model = useProxiedModel(props, 'modelValue');\n    useRender(() => {\n      const [inputAttrs, controlAttrs] = filterInputAttrs(attrs);\n      const [inputProps, _1] = VInput.filterProps(props);\n      const [controlProps, _2] = VSelectionControl.filterProps(props);\n      const label = slots.label ? slots.label({\n        label: props.label,\n        props: {\n          for: id.value\n        }\n      }) : props.label;\n      return _createVNode(VInput, _mergeProps({\n        \"class\": \"v-radio-group\"\n      }, inputAttrs, inputProps, {\n        \"modelValue\": model.value,\n        \"onUpdate:modelValue\": $event => model.value = $event,\n        \"id\": id.value\n      }), { ...slots,\n        default: _ref2 => {\n          let {\n            id,\n            messagesId,\n            isDisabled,\n            isReadonly\n          } = _ref2;\n          return _createVNode(_Fragment, null, [label && _createVNode(VLabel, {\n            \"id\": id.value\n          }, {\n            default: () => [label]\n          }), _createVNode(VSelectionControlGroup, _mergeProps(controlProps, {\n            \"id\": id.value,\n            \"aria-describedby\": messagesId.value,\n            \"defaultsTarget\": \"VRadio\",\n            \"trueIcon\": props.trueIcon,\n            \"falseIcon\": props.falseIcon,\n            \"type\": props.type,\n            \"disabled\": isDisabled.value,\n            \"readonly\": isReadonly.value,\n            \"aria-labelledby\": label ? id.value : undefined,\n            \"multiple\": false\n          }, controlAttrs, {\n            \"modelValue\": model.value,\n            \"onUpdate:modelValue\": $event => model.value = $event\n          }), slots)]);\n        }\n      });\n    });\n    return {};\n  }\n\n});","map":{"version":3,"mappings":"4IAAA;;AACA,2B,CAEA;;AAAA,SACSA,iBADT,QAC0B,gCAD1B;AAC0B,SACjBC,eADiB,EACAC,MADA,QACM,sBADN;AACM,SACvBC,8BADuB,EACSC,sBADT,QAC+B,sDAD/B;AAC+B,SACtDC,MADsD,QAChD,qBADgD,C,CAG/D;;AAAA,SACSC,SADT,QACkB,6BADlB;AACkB,SACTC,eADS,QACM,oCADN,C,CAGlB;;AACA,SAASC,QAAT,QAAyB,KAAzB;AAA8B,SACrBC,gBADqB,EACHC,gBADG,EACeC,MADf,EACuBC,IADvB,EAC6BC,SAD7B,QACsC,sBADtC,C,CAG9B;;AAMA,OAAO,MAAMC,WAAW,GAAGJ,gBAAgB,GAAqB;EAC9DK,IAAI,EAAE,aADwD;EAG9DC,YAAY,EAAE,KAHgD;EAK9DC,KAAK,EAAE;IACLC,MAAM,EAAE;MACNC,IAAI,EAAE,CAACC,MAAD,EAASC,MAAT,CADA;MAENC,OAAO,EAAE;IAFH,CADH;IAML,GAAGrB,eAAe,EANb;IAOL,GAAGW,IAAI,CAACT,8BAA8B,EAA/B,EAAmC,CAAC,UAAD,CAAnC,CAPF;IASLoB,QAAQ,EAAE;MACRJ,IAAI,EAAEb,SADE;MAERgB,OAAO,EAAE;IAFD,CATL;IAaLE,SAAS,EAAE;MACTL,IAAI,EAAEb,SADG;MAETgB,OAAO,EAAE;IAFA,CAbN;IAiBLH,IAAI,EAAE;MACJA,IAAI,EAAEE,MADF;MAEJC,OAAO,EAAE;IAFL;EAjBD,CALuD;EA4B9DG,KAAK,EAAE;IACL,qBAAsBC,GAAQ,IAAK;EAD9B,CA5BuD;;EAgC9DC,KAAKA,CAAEV,KAAFU,EAAOC,IAAPD,EAA2B;IAAA,IAAlB;MAAEE,KAAF;MAASC;IAAT,IAAgBF,IAAE;IAC9B,MAAMG,GAAG,GAAGpB,MAAM,EAAlB;IACA,MAAMqB,EAAE,GAAGxB,QAAQ,CAAC,MAAMS,KAAK,CAACe,EAANf,IAAa,eAAcc,GAAI,EAAtC,CAAnB;IACA,MAAME,KAAK,GAAG1B,eAAe,CAACU,KAAD,EAAQ,YAAR,CAA7B;IAEAJ,SAAS,CAAC,MAAM;MACd,MAAM,CAACqB,UAAD,EAAaC,YAAb,IAA6B1B,gBAAgB,CAACoB,KAAD,CAAnD;MACA,MAAM,CAACO,UAAD,EAAaC,EAAb,IAAmBnC,MAAM,CAACoC,WAAPpC,CAAmBe,KAAnBf,CAAzB;MACA,MAAM,CAACqC,YAAD,EAAeC,EAAf,IAAqBxC,iBAAiB,CAACsC,WAAlBtC,CAA8BiB,KAA9BjB,CAA3B;MACA,MAAMyC,KAAK,GAAGX,KAAK,CAACW,KAANX,GACVA,KAAK,CAACW,KAANX,CAAY;QACZW,KAAK,EAAExB,KAAK,CAACwB,KADD;QAEZxB,KAAK,EAAE;UAAEyB,GAAG,EAAEV,EAAE,CAACW;QAAV;MAFK,CAAZb,CADUA,GAKVb,KAAK,CAACwB,KALV;MAOA;QAAA,SAEU;MAFV,GAGSP,UAHT,EAISE,UAJT,EAImB;QAAA,cACLH,KAAK,CAACU,KADD;QACM,iCAAXV,KAAK,CAACU,KAANV,GAAWW,MADN;QACM,MAChBZ,EAAE,CAACW;MAFO,CAJnB,GAMiB,EAGX,GAAGb,KAHQ;QAIXR,OAAO,EAAEuB;UAAA,IAAC;YACRb,EADQ;YAERc,UAFQ;YAGRC,UAHQ;YAIRC;UAJQ,IAKTH,KALQ;UAKR,sCAEKJ,KAAK;YAAA,MACQT,EAAE,CAACW;UADX,GACgB;YAAArB,gBACjBmB,KADiB;UAAA,CADhB,CAFV,EAMIQ,iDAGMV,YAHN,EAGkB;YAAA,MACZP,EAAE,CAACW,KADS;YACJ,oBACMG,UAAU,CAACH,KAFb;YAEkB,kBACpB,QAHE;YAGM,YACZ1B,KAAK,CAACM,QAJA;YAIQ,aACbN,KAAK,CAACO,SALD;YAKU,QACpBP,KAAK,CAACE,IANI;YAMA,YACN4B,UAAU,CAACJ,KAPL;YAOU,YAChBK,UAAU,CAACL,KARL;YAQU,mBACTF,KAAK,GAAGT,EAAE,CAACW,KAAN,GAAcO,SATpB;YAS6B,YACnC;UAVM,CAHlB,EAcMf,YAdN,EAckB;YAAA,cACPF,KAAK,CAACU,KADC;YACI,iCAAXV,KAAK,CAACU,KAANV,GAAWW;UADJ,CAdlB,GAgBWd,KAhBX,CANJ;QAsBoB;MA/BV,CANjB;IA4CD,CAvDQ,CAATjB;IAyDA,OAAO,EAAP;EACF;;AA/F8D,CAArB,CAApC","names":["VSelectionControl","makeVInputProps","VInput","makeSelectionControlGroupProps","VSelectionControlGroup","VLabel","IconValue","useProxiedModel","computed","filterInputAttrs","genericComponent","getUid","omit","useRender","VRadioGroup","name","inheritAttrs","props","height","type","Number","String","default","trueIcon","falseIcon","emits","val","setup","_ref","attrs","slots","uid","id","model","inputAttrs","controlAttrs","inputProps","_1","filterProps","controlProps","_2","label","for","value","$event","_ref2","messagesId","isDisabled","isReadonly","_createVNode","undefined"],"sources":["../../../src/components/VRadioGroup/VRadioGroup.tsx"],"sourcesContent":["// Styles\nimport './VRadioGroup.sass'\n\n// Components\nimport { VSelectionControl } from '@/components/VSelectionControl'\nimport { makeVInputProps, VInput } from '@/components/VInput/VInput'\nimport { makeSelectionControlGroupProps, VSelectionControlGroup } from '@/components/VSelectionControlGroup/VSelectionControlGroup'\nimport { VLabel } from '@/components/VLabel'\n\n// Composables\nimport { IconValue } from '@/composables/icons'\nimport { useProxiedModel } from '@/composables/proxiedModel'\n\n// Utilities\nimport { computed } from 'vue'\nimport { filterInputAttrs, genericComponent, getUid, omit, useRender } from '@/util'\n\n// Types\nimport type { VInputSlots } from '@/components/VInput/VInput'\nimport type { VSelectionControlSlots } from '@/components/VSelectionControl/VSelectionControl'\n\nexport type VRadioGroupSlots = VInputSlots & VSelectionControlSlots\n\nexport const VRadioGroup = genericComponent<VRadioGroupSlots>()({\n  name: 'VRadioGroup',\n\n  inheritAttrs: false,\n\n  props: {\n    height: {\n      type: [Number, String],\n      default: 'auto',\n    },\n\n    ...makeVInputProps(),\n    ...omit(makeSelectionControlGroupProps(), ['multiple']),\n\n    trueIcon: {\n      type: IconValue,\n      default: '$radioOn',\n    },\n    falseIcon: {\n      type: IconValue,\n      default: '$radioOff',\n    },\n    type: {\n      type: String,\n      default: 'radio',\n    },\n  },\n\n  emits: {\n    'update:modelValue': (val: any) => true,\n  },\n\n  setup (props, { attrs, slots }) {\n    const uid = getUid()\n    const id = computed(() => props.id || `radio-group-${uid}`)\n    const model = useProxiedModel(props, 'modelValue')\n\n    useRender(() => {\n      const [inputAttrs, controlAttrs] = filterInputAttrs(attrs)\n      const [inputProps, _1] = VInput.filterProps(props)\n      const [controlProps, _2] = VSelectionControl.filterProps(props)\n      const label = slots.label\n        ? slots.label({\n          label: props.label,\n          props: { for: id.value },\n        })\n        : props.label\n\n      return (\n        <VInput\n          class=\"v-radio-group\"\n          { ...inputAttrs }\n          { ...inputProps }\n          v-model={ model.value }\n          id={ id.value }\n        >\n          {{\n            ...slots,\n            default: ({\n              id,\n              messagesId,\n              isDisabled,\n              isReadonly,\n            }) => (\n              <>\n                { label && (\n                  <VLabel id={ id.value }>\n                    { label }\n                  </VLabel>\n                )}\n\n                <VSelectionControlGroup\n                  { ...controlProps }\n                  id={ id.value }\n                  aria-describedby={ messagesId.value }\n                  defaultsTarget=\"VRadio\"\n                  trueIcon={ props.trueIcon }\n                  falseIcon={ props.falseIcon }\n                  type={ props.type }\n                  disabled={ isDisabled.value }\n                  readonly={ isReadonly.value }\n                  aria-labelledby={ label ? id.value : undefined }\n                  multiple={ false }\n                  { ...controlAttrs }\n                  v-model={ model.value }\n                  v-slots={ slots }\n                />\n              </>\n            ),\n          }}\n        </VInput>\n      )\n    })\n\n    return {}\n  },\n})\n\nexport type VRadioGroup = InstanceType<typeof VRadioGroup>\n"]},"metadata":{},"sourceType":"module"}