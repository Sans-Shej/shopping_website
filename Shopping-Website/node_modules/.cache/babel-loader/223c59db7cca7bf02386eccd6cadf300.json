{"ast":null,"code":"import { mergeProps as _mergeProps, createVNode as _createVNode, Fragment as _Fragment } from \"vue\"; // Styles\n\nimport \"./VSlider.css\"; // Components\n\nimport { makeVInputProps, VInput } from \"../VInput/VInput.mjs\";\nimport { VLabel } from \"../VLabel/index.mjs\";\nimport { VSliderThumb } from \"./VSliderThumb.mjs\";\nimport { VSliderTrack } from \"./VSliderTrack.mjs\"; // Composables\n\nimport { makeFocusProps, useFocus } from \"../../composables/focus.mjs\";\nimport { makeSliderProps, useSlider } from \"./slider.mjs\";\nimport { useProxiedModel } from \"../../composables/proxiedModel.mjs\"; // Utilities\n\nimport { computed, ref } from 'vue';\nimport { genericComponent, useRender } from \"../../util/index.mjs\"; // Types\n\nexport const VSlider = genericComponent()({\n  name: 'VSlider',\n  props: { ...makeFocusProps(),\n    ...makeSliderProps(),\n    ...makeVInputProps(),\n    modelValue: {\n      type: [Number, String],\n      default: 0\n    }\n  },\n  emits: {\n    'update:focused': value => true,\n    'update:modelValue': v => true\n  },\n\n  setup(props, _ref) {\n    let {\n      slots\n    } = _ref;\n    const thumbContainerRef = ref();\n    const {\n      min,\n      max,\n      mousePressed,\n      roundValue,\n      onSliderMousedown,\n      onSliderTouchstart,\n      trackContainerRef,\n      position,\n      hasLabels,\n      readonly\n    } = useSlider({\n      props,\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\n      handleSliderMouseUp: newValue => model.value = roundValue(newValue),\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\n      handleMouseMove: newValue => model.value = roundValue(newValue),\n      getActiveThumb: () => thumbContainerRef.value?.$el\n    });\n    const model = useProxiedModel(props, 'modelValue', undefined, v => {\n      const value = typeof v === 'string' ? parseFloat(v) : v == null ? min.value : v;\n      return roundValue(value);\n    });\n    const {\n      isFocused,\n      focus,\n      blur\n    } = useFocus(props);\n    const trackStop = computed(() => position(model.value));\n    useRender(() => {\n      const [inputProps, _] = VInput.filterProps(props);\n      const hasPrepend = !!(props.label || slots.label || slots.prepend);\n      return _createVNode(VInput, _mergeProps({\n        \"class\": ['v-slider', {\n          'v-slider--has-labels': !!slots['tick-label'] || hasLabels.value,\n          'v-slider--focused': isFocused.value,\n          'v-slider--pressed': mousePressed.value,\n          'v-slider--disabled': props.disabled\n        }]\n      }, inputProps, {\n        \"focused\": isFocused.value\n      }), { ...slots,\n        prepend: hasPrepend ? slotProps => _createVNode(_Fragment, null, [slots.label?.(slotProps) ?? props.label ? _createVNode(VLabel, {\n          \"id\": slotProps.id.value,\n          \"class\": \"v-slider__label\",\n          \"text\": props.label\n        }, null) : undefined, slots.prepend?.(slotProps)]) : undefined,\n        default: _ref2 => {\n          let {\n            id,\n            messagesId\n          } = _ref2;\n          return _createVNode(\"div\", {\n            \"class\": \"v-slider__container\",\n            \"onMousedown\": !readonly.value ? onSliderMousedown : undefined,\n            \"onTouchstartPassive\": !readonly.value ? onSliderTouchstart : undefined\n          }, [_createVNode(\"input\", {\n            \"id\": id.value,\n            \"name\": props.name || id.value,\n            \"disabled\": props.disabled,\n            \"readonly\": props.readonly,\n            \"tabindex\": \"-1\",\n            \"value\": model.value\n          }, null), _createVNode(VSliderTrack, {\n            \"ref\": trackContainerRef,\n            \"start\": 0,\n            \"stop\": trackStop.value\n          }, {\n            'tick-label': slots['tick-label']\n          }), _createVNode(VSliderThumb, {\n            \"ref\": thumbContainerRef,\n            \"aria-describedby\": messagesId.value,\n            \"focused\": isFocused.value,\n            \"min\": min.value,\n            \"max\": max.value,\n            \"modelValue\": model.value,\n            \"onUpdate:modelValue\": v => model.value = v,\n            \"position\": trackStop.value,\n            \"elevation\": props.elevation,\n            \"onFocus\": focus,\n            \"onBlur\": blur\n          }, {\n            'thumb-label': slots['thumb-label']\n          })]);\n        }\n      });\n    });\n    return {};\n  }\n\n});","map":{"version":3,"mappings":"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","names":["makeVInputProps","VInput","VLabel","VSliderThumb","VSliderTrack","makeFocusProps","useFocus","makeSliderProps","useSlider","useProxiedModel","computed","ref","genericComponent","useRender","VSlider","name","props","modelValue","type","Number","String","default","emits","value","v","setup","_ref","slots","thumbContainerRef","min","max","mousePressed","roundValue","onSliderMousedown","onSliderTouchstart","trackContainerRef","position","hasLabels","readonly","handleSliderMouseUp","newValue","model","handleMouseMove","getActiveThumb","$el","undefined","parseFloat","isFocused","focus","blur","trackStop","inputProps","_","filterProps","hasPrepend","label","prepend","disabled","slotProps","_createVNode","id","_ref2","messagesId","elevation"],"sources":["../../../src/components/VSlider/VSlider.tsx"],"sourcesContent":["// Styles\nimport './VSlider.sass'\n\n// Components\nimport { makeVInputProps, VInput } from '@/components/VInput/VInput'\nimport { VLabel } from '@/components/VLabel'\nimport { VSliderThumb } from './VSliderThumb'\nimport { VSliderTrack } from './VSliderTrack'\n\n// Composables\nimport { makeFocusProps, useFocus } from '@/composables/focus'\nimport { makeSliderProps, useSlider } from './slider'\nimport { useProxiedModel } from '@/composables/proxiedModel'\n\n// Utilities\nimport { computed, ref } from 'vue'\nimport { genericComponent, useRender } from '@/util'\n\n// Types\nimport type { MakeSlots } from '@/util'\nimport type { VInputSlots } from '@/components/VInput/VInput'\n\nexport type VSliderSlots = VInputSlots & MakeSlots<{\n  'tick-label': []\n  'thumb-label': []\n}>\n\nexport const VSlider = genericComponent<VSliderSlots>()({\n  name: 'VSlider',\n\n  props: {\n    ...makeFocusProps(),\n    ...makeSliderProps(),\n    ...makeVInputProps(),\n\n    modelValue: {\n      type: [Number, String],\n      default: 0,\n    },\n  },\n\n  emits: {\n    'update:focused': (value: boolean) => true,\n    'update:modelValue': (v: number) => true,\n  },\n\n  setup (props, { slots }) {\n    const thumbContainerRef = ref()\n\n    const {\n      min,\n      max,\n      mousePressed,\n      roundValue,\n      onSliderMousedown,\n      onSliderTouchstart,\n      trackContainerRef,\n      position,\n      hasLabels,\n      readonly,\n    } = useSlider({\n      props,\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\n      handleSliderMouseUp: newValue => model.value = roundValue(newValue),\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\n      handleMouseMove: newValue => model.value = roundValue(newValue),\n      getActiveThumb: () => thumbContainerRef.value?.$el,\n    })\n\n    const model = useProxiedModel(\n      props,\n      'modelValue',\n      undefined,\n      v => {\n        const value = typeof v === 'string' ? parseFloat(v) : v == null ? min.value : v\n\n        return roundValue(value)\n      },\n    )\n\n    const { isFocused, focus, blur } = useFocus(props)\n    const trackStop = computed(() => position(model.value))\n\n    useRender(() => {\n      const [inputProps, _] = VInput.filterProps(props)\n      const hasPrepend = !!(props.label || slots.label || slots.prepend)\n\n      return (\n        <VInput\n          class={[\n            'v-slider',\n            {\n              'v-slider--has-labels': !!slots['tick-label'] || hasLabels.value,\n              'v-slider--focused': isFocused.value,\n              'v-slider--pressed': mousePressed.value,\n              'v-slider--disabled': props.disabled,\n            },\n          ]}\n          { ...inputProps }\n          focused={ isFocused.value }\n        >\n          {{\n            ...slots,\n            prepend: hasPrepend ? slotProps => (\n              <>\n                { slots.label?.(slotProps) ?? props.label\n                  ? (\n                    <VLabel\n                      id={ slotProps.id.value }\n                      class=\"v-slider__label\"\n                      text={ props.label }\n                    />\n                  ) : undefined\n                }\n\n                { slots.prepend?.(slotProps) }\n              </>\n            ) : undefined,\n            default: ({ id, messagesId }) => (\n              <div\n                class=\"v-slider__container\"\n                onMousedown={ !readonly.value ? onSliderMousedown : undefined }\n                onTouchstartPassive={ !readonly.value ? onSliderTouchstart : undefined }\n              >\n                <input\n                  id={ id.value }\n                  name={ props.name || id.value }\n                  disabled={ props.disabled }\n                  readonly={ props.readonly }\n                  tabindex=\"-1\"\n                  value={ model.value }\n                />\n\n                <VSliderTrack\n                  ref={ trackContainerRef }\n                  start={ 0 }\n                  stop={ trackStop.value }\n                >\n                  {{ 'tick-label': slots['tick-label'] }}\n                </VSliderTrack>\n\n                <VSliderThumb\n                  ref={ thumbContainerRef }\n                  aria-describedby={ messagesId.value }\n                  focused={ isFocused.value }\n                  min={ min.value }\n                  max={ max.value }\n                  modelValue={ model.value }\n                  onUpdate:modelValue={ v => (model.value = v) }\n                  position={ trackStop.value }\n                  elevation={ props.elevation }\n                  onFocus={ focus }\n                  onBlur={ blur }\n                >\n                  {{ 'thumb-label': slots['thumb-label'] }}\n                </VSliderThumb>\n              </div>\n            ),\n          }}\n        </VInput>\n      )\n    })\n\n    return {}\n  },\n})\n\nexport type VSlider = InstanceType<typeof VSlider>\n"]},"metadata":{},"sourceType":"module"}